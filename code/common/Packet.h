
#ifndef TIANGUO_PACKET_H
#define TIANGUO_PACKET_H

#include "net/syspacket.h"

/*	
	About format of packet parameter
	b: 1Byte
	w: 2Byte
	d: 4Byte
	q: 8Byte
	s: string
	u: Unicode string

	prefix : M_CS -> From client to server
	prefix : M_SC -> From server to client
*/
// date string format = "YYYY-MM-DD HH:MM:SS"

// [Date4] = [w:year(16th bit:era, 15th bit:lunar)][b:month][b:day]
// [M1970] = [d:MinutesSince1970]
// [CH info] = [d:CH id][u:CH name][d:Model id][d:default dress id][d:Face id][d:Hair id][s:creation time][b:Master][d:dress id][s:time changed dress]
// [CH desc] = [Date4:Birthday][d:RegionInfo][u:Comment]
// [CH state] = [d:state][d:X][d:Y][d:Z][d:Dir][u:AniName][d:AniState][d:HoldItem]
// [Room property] = [d:Exp][w:Virtue][w:Fame][w:Appreciation][b:level]
// [Price info]	= [d:Game money][d:Discount rate][d:Real money][d:Discount rate]
// [PhotoInfo] = [d:DataID][d:FileSize][d:FileChecksum][M1970:UploadTime][u:Description]
// [MovieInfo] = [d:DataID][d:FileSize][d:FileChecksum][M1970:UploadTime][u:Description]
// [MailType] = 1:Sent mail, 2:Received mail
// [MailKind] = 1:Normal mail, 2:System mail, 3:Rejected mail
// [MailStatus] = 0:New mail, 1:Opened mail, 2:Get item mail, 3: Rejected mail
// Symbol '<>' means that parameter may not be.


#ifdef SIP_MSG_NAME_DWORD

enum _PACKETS
{
	// Packets for DataServer
	M_WH_CHECK_AUTH_UPLOAD = 30001,
	M_HW_CHECK_AUTH_UPLOAD = 30002,
	M_WH_UPLOAD_DONE = 30003,
	M_HW_UPLOAD_DONE = 30004,
	M_WH_CHECK_AUTH_DOWNLOAD = 30005,
	M_HW_CHECK_AUTH_DOWNLOAD = 30006,
	M_WH_DOWNLOAD_DONE = 30007,
	M_WH_CHECK_AUTH_DELETE = 30008,
	M_HW_CHECK_AUTH_DELETE = 30009,

	// connect
	M_SC_SHARDS = 10002,
	M_CS_CHECK_FASTENTERROOM = 10003,
	M_SC_CHECK_FASTENTERROOM = 10004,

	// TryEnterToShard
	// M_ENTER_SHARD_ANSWER : #define M_SC_SCS							"SCS"						// Enter shard fail ([w:Error code])
	M_SC_CONNECTSHARD = 10006,
	M_SC_FAIL = 10008,
	// M_ENTER_SHARD : #define M_SC_SV								"SV"						// Authentication of shard([w:error code])
	M_SC_IDENTIFICATION = 10010,
	// M_WAIT : #define M_SC_WAITCONNECTION					"WAIT"						// Wait connection([d:user count][d:user decrease time(ms)])
	// M_CONNECT : #define M_SC_ADMITCONNECTION				"CONNECT"					// Admit connection()
	M_SC_CANCELCONNECTION = 10012,
	M_SC_SSLONGINFAIL = 10014,

	// disconnect
	// M_CLIENT_DISCONNECT : #define M_SC_DC								"DC"						// Client disconnect(None)

	M_SYS_DISCONNECT = 20101,
	M_SYS_TIMEOUT = 20102,
	M_SC_DISCONNECT_OTHERLOGIN = 20103,

	// Update
	//#define M_FTPURI							"FTPURI"					// update list([s:product name][s:current version])
	//#define M_CS_FTPURI							"FTPURI"					// update list([s:product name][s:current version])
	//#define M_SC_FTPURI							"FTPURI"					// update server list([s:last version][s:server url][d:port][s:relative path][s:userID][s:password])

	// Administrate and monitor
	M_AD_REGAES_CONNECT = 20201,
	M_AD_UNREGAES_CONNECT = 20202,
	M_AD_AES_CONNECT = 20203,
	M_AD_AES_DISCONNECT = 20204,
	M_AD_ADMIN_CONF = 20205,
	M_MH_LOGIN_MAN_HOST = 20206,
	M_MH_CHPWD = 20207,
	M_MH_CHNAME = 20208,
	M_MH_CHVERSION = 20209,
	M_MH_ACCOUNTINFO = 20210,
	M_MH_MANAGEPOWER = 20211,
	M_MH_MANAGEINFO = 20212,
	M_MH_ADDMANAGER = 20213,
	M_MH_DELMANAGER = 20214,
	M_MH_DISCONNECT = 20215,
	M_MH_UPDATE = 20216,
	M_MH_CHUPDATE = 20217,
	M_MH_MANAGERONLINE = 20218,
	M_MH_COMPINFO = 20219,
	M_MH_ONLINEINFO = 20220,
	M_MH_ONLINEHOSTINFO = 20221,
	M_MH_ADDSERVICE = 20222,
	M_MH_DELSERVICE = 20223,
	M_MH_ADDHOST = 20224,
	M_MH_DELHOST = 20225,
	M_MH_ADDSHARD = 20226,
	M_MH_DELSHARD = 20227,
	M_MH_REQUEST = 20228,
	M_MH_REQUESTHOST = 20229,
	M_MH_STOPSERVICE = 20230,
	M_MH_OPENSHARD = 20231,
	M_MH_CLOSESHARD = 20232,
	M_MH_LOCKSHARD = 20233,
	M_MH_UNLOCKSHARD = 20234,
	M_MH_LOG = 20235,
	M_MH_IDENT = 20236,
	M_MH_LOGRESET = 20237,
	M_AES_SERVICE_CONNECT = 20238,
	M_AD_REGSVC_CONNECT = 20239,
	M_AD_UNREGSVC_CONNECT = 20240,
	M_AD_SERVICE_IDENTIFY = 20241,
	M_AES_SERVICE_DISCONNECT = 20242,
	M_AD_SERVICE_DISCONNECT = 20243,
	M_MO_COMPINFO = 20244,
	M_MO_CONFIRM = 20245,
	M_MO_MVARIABLE = 20246,
	M_MO_VARIABLE = 20247,
	M_MO_NOTPING = 20248,
	M_MO_HOSTNOTPING = 20249,
	M_MO_DELMV = 20250,
	M_MO_ADDMV = 20251,
	M_MO_PING = 20252,
	M_MO_PONG = 20253,

	/*****************************************************************************************************/
	M_NT_LOGIN = 20301,
	M_NT_LOGOUT = 20302,
	M_CS_LOGOUT = 10303,
	M_NTENTERROOM = 20304,
	M_NTOUTROOM = 20305,
	//M_NTCHANGEROOMCHANNEL = 20306,

	// Family
	M_CS_FAMILY = 10401,
	M_SC_FAMILY = 10402,
	M_CS_NEWFAMILY = 10403,
	M_SC_NEWFAMILY = 10404,
	M_SC_ALLCHARACTER = 10406,
	//M_CS_REQ_CHANGECH = 10407,
	//M_SC_REQ_CHANGECH = 10408,
	M_CS_CHCHARACTER = 10409,
	M_CS_CHANGE_CHDESC = 10411,
	M_NT_CHANGE_NAME = 20412,

	M_CS_USERLIST = 10413,
	M_SC_USERLIST = 10414,

	M_CS_SET_FAMILY_FIGURE = 10415,
	M_CS_GET_FAMILY_FIGURE = 10417,
	M_SC_FAMILY_FIGURE = 10418,
	
	//M_CS_SET_FAMILY_FACEMODEL = 10419,
	//M_CS_GET_FAMILY_FACEMODEL = 10421,
	//M_SC_FAMILY_FACEMODEL = 10422,

	// 체험방관련
	M_NT_EXPROOM_INFO_CHANGED = 20506,
	M_NT_EXPROOM_INFO_RELOAD = 20507,

	//M_CS_EXPROOMS = 10507,
	M_SC_EXPROOM_GROUP = 10508,
	M_SC_EXPROOMS = 10510,

	M_GMCS_EXPROOM_GROUP_ADD = 10511,
	//M_GMSC_EXPROOM_GROUP_ADD = 10512,
	M_GMCS_EXPROOM_GROUP_MODIFY = 10513,
	M_GMCS_EXPROOM_GROUP_DELETE = 10515,
	M_GMCS_EXPROOM_ADD = 10517,
	M_GMCS_EXPROOM_MODIFY = 10519,
	M_GMCS_EXPROOM_DELETE = 10521,

	// TopList기능
	//M_CS_TOPLIST = 10531,
	M_SC_TOPLIST_ROOMEXP = 10532,
	M_SC_TOPLIST_ROOMVISIT = 10534,
	M_SC_TOPLIST_FAMILYEXP = 10536,

	M_CS_FPROPERTY_MONEY = 10601,
	M_SC_FPROPERTY_MONEY = 10602,
	M_SC_FPROPERTY_LEVEL = 10604,

	M_CS_REQ_FAMILYCHS = 10605,

	// Money
	M_SC_MONEY_DEFICIT = 10606,

	// Inventory
	M_SC_FAMILYITEM = 10702,
	M_CS_INVENSYNC = 10703,
	M_SC_INVENSYNC = 10704,
	M_CS_BUYITEM = 10705,
	M_SC_BUYITEM = 10706,
	M_SC_SETINVEN = 10708,
	M_SC_SETINVENNUM = 10710,

	//// Bank Items
	//M_SM_BANKITEM_GET_NUSER = 20801,
	//M_CS_BANKITEM_LIST = 10803,
	//M_SC_BANKITEM_LIST = 10804,
	//M_CS_BANKITEM_GET = 10805,
	//M_MS_BANKITEM_GET = 20806,
	//M_SM_BANKITEM_GET_FAIL = 20807,

	// 기념일활동관련
	M_MS_CURRENT_ACTIVITY = 20850,
	M_NT_CURRENT_ACTIVITY = 20851,
	M_SM_CHECK_USER_ACTIVITY = 20852,
	M_MS_CHECK_USER_ACTIVITY = 20853,
	M_SC_CURRENT_ACTIVITY = 10854,
	M_CS_REQ_ACTIVITY_ITEM = 10855,
	//#define M_NT_REQ_ACTIVITY_ITEM
	M_SM_SET_USER_ACTIVITY = 20856,
	M_MS_SET_USER_ACTIVITY = 20857,

	// 시작사용자아이템
	M_MS_BEGINNERMSTITEM = 20860,
	M_NT_BEGINNERMSTITEM = 20861,
	M_SM_CHECK_BEGINNERMSTITEM = 20862,
	M_MS_CHECK_BEGINNERMSTITEM = 20863,
	M_SC_GIFTITEM = 10864,
	M_CS_RECV_GIFTITEM = 10865,
	//#define M_NT_RECV_GIFTITEM
	M_SM_SET_USER_BEGINNERMSTITEM = 20866,
	M_MS_SET_USER_BEGINNERMSTITEM = 20867,

	// Lobby
	//M_CS_REQUEST_LOBBYS = 10901,
	//M_CS_REQ_ENTERLOBBY = 10902,
	//M_SC_REQ_ENTERLOBBY = 10903,
	M_CS_ENTER_LOBBY = 10905,
	M_SC_ENTER_LOBBY = 10906,
	//M_SC_WAIT_ENTERLOBBY = 10906,
	M_CS_CANCEL_WAITLOBBY = 10909,
	M_CS_LEAVE_LOBBY = 10911,
	M_SC_LEAVE_LOBBY = 10912,
	M_NT_QUERY_LOBBY = 20913,
	M_NT_LOBBY = 20914,
	//M_NT_NEW_LOBBY = 10912,
	//M_NT_DEL_LOBBY = 10913,
	M_NT_LEAVE_LOBBY = 20917,
	M_NT_SHARD_LOBBYS = 20918,
	M_SC_CELL_IN = 10920,
	M_SC_CELL_OUT = 10922,

	M_NT_ROOM = 20923,

	M_SC_OWNROOM = 10940,
	M_CS_NEWROOM = 10941,
	M_SC_NEWROOM = 10942,
	M_CS_DELROOM = 10943,
	M_SC_DELROOM = 10944,
	M_CS_UNDELROOM = 10945,
	M_SC_UNDELROOM = 10946,
	M_CS_RENEWROOM = 10947,
	M_SC_RENEWROOM = 10948,

	//감은원날자연기
	//M_CS_PROLONG_PASS = 10949,
	//M_SC_PROLONG_PASS = 10950,

	M_NT_ROOM_RENEW = 20949,
	M_NT_RELOAD_ROOMINFO = 20950,

	// Room Promotion
	M_CS_PROMOTION_ROOM = 10953,
	M_SC_PROMOTION_ROOM = 10954,
	M_CS_GET_PROMOTION_PRICE = 10955,
	M_SC_PROMOTION_PRICE = 10956,

	M_CS_FINDROOM = 10959,
	M_SC_FINDROOMRESULT = 10960,

	//M_SC_FAVORROOMGROUP = 10962,
	//M_SC_FAVORROOM = 10964,
	M_SC_FAVORROOM_AUTODEL = 10965,
	M_CS_INSFAVORROOM = 10966,
	M_CS_DELFAVORROOM = 10967,
	M_CS_MOVFAVORROOM = 10968,
	M_CS_NEW_FAVORROOMGROUP = 10969,
	M_CS_DEL_FAVORROOMGROUP = 10970,
	M_CS_REN_FAVORROOMGROUP = 10971,

	M_CS_REQ_FAVORROOM_INFO = 10972,
	M_NT_REQ_FAVORROOM_INFO = 20973,
	M_SC_FAVORROOM_INFO = 10974,
	//M_CS_REQ_ROOMORDERINFO = 10975,
	M_SC_ROOMORDERINFO = 10976,
	M_CS_ROOMORDERINFO = 10977,

	M_CS_SETROOMINFO = 10979,
	//M_CS_SETROOMPWD = 10981,
	//M_SC_SETROOMPWD = 10982,

	M_SC_MSTROOM = 10984,
	M_SC_MSTITEM = 10986,
	M_SC_MSTHISSPACE = 10988,
	M_SC_MSTROOMLEVELEXP = 10990,
	M_SC_MSTFAMILYLEVELEXP = 10992,
	M_SC_MSTCONFIG = 10994,

	//M_CS_BESTSELLITEM = 10997,
	M_SC_BESTSELLITEM = 10998,

	// Contact
	//M_SC_MYCONTGROUP = 11002,
	//M_SC_MYCONTLIST = 11004,
	M_CS_ADDCONTGROUP = 11005,
	M_CS_DELCONTGROUP = 11007,
	M_CS_RENCONTGROUP = 11009,
	M_CS_SETCONTGROUP_INDEX = 11011,

	M_CS_ADDCONT = 11013,
	M_SC_FAMILY_MODEL = 11014,
	M_CS_DELCONT = 11015,
	M_CS_CHANGECONTGRP = 11016,
	M_NT_REQ_FAMILY_INFO = 21017,
	M_NT_ANS_FAMILY_INFO = 21018,

	M_CS_FINDFAMILY = 11019,
	M_SC_FINDFAMILY = 11020,

	M_CS_SELFSTATE = 11021,
	M_SC_CONTSTATE = 11022,
	//M_SELFSTATE = 21023,

	// Room Enter & Out
	M_CS_REQEROOM = 11101,
	M_SC_REQEROOM = 11102,
	M_CS_CHANNELLIST = 11103,
	M_SC_CHANNELLIST = 11104,
	M_CS_ENTERROOM = 11105,
	M_SC_ENTERROOM = 11106,
	M_CS_CHANGECHANNELIN = 11107,
	M_SC_CHANGECHANNELIN = 11108,
	M_CS_CHANGECHANNELOUT = 11109,
	M_SC_CHANNELCHANGED = 11110,
	M_SC_NEWENTER = 11112,
	M_CS_OUTROOM = 11113,
	M_SC_OUTROOM = 11114,
	M_SC_FORCEOUTROOM = 11116,
	M_SC_ALLINROOM = 11118,
	M_SC_ROOMTERMTIME = 11120,
	M_CS_CANCELREQEROOM = 11121,

	M_CS_STATECH = 31121,
	M_SC_STATECH = 31122,
	M_CS_ACTION = 11123,
	M_SC_ACTION = 11124,
	//M_CS_CHMETHOD = 31125,
	//M_SC_CHMETHOD = 31126,
	M_CS_MOVECH = 31127,
	M_SC_MOVECH = 31128,

	M_SC_CHAIR_LIST = 11128,
	M_CS_CHAIR_SITDOWN = 11129,
	M_SC_CHAIR_SITDOWN = 11130,
	M_CS_CHAIR_STANDUP = 11131,
	M_SC_CHAIR_STANDUP = 11132,

	//M_CS_FORCEOUT = 11133,
	//M_SC_FORCEOUT = 11134,
	M_CS_ROOMFORFAMILY = 11135,
	M_SC_ROOMFORFAMILY = 11136,

	// Check Enter Room
	M_CS_CHECK_ENTERROOM = 11151,
	M_SC_CHECK_ENTERROOM = 11152,

	// Invite & Banish
	M_CS_INVITE_REQ = 11201,
	M_SC_INVITE_REQ = 11202,
	M_CS_INVITE_ANS = 11203,
	M_SC_INVITE_ANS = 11204,
	M_CS_BANISH = 11205,
	M_SC_BANISH = 11206,

	// Dead Info (Deceased Info)
	M_CS_DECEASED = 11301,
	M_SC_DECEASED = 11302,
	M_CS_SETDEAD = 11303,
	M_NT_REQ_DECEASED = 21304,
	//M_CS_DELDEAD = 11305,
	//M_SC_DELDEAD = 11306,

	M_CS_SET_DEAD_FIGURE = 11307,
	M_SC_SET_DEAD_FIGURE = 11308,

	M_CS_ROOMINFO = 11321,
	M_SC_ROOMINFO = 11322,
	M_NT_REQ_ROOMINFO = 21323,

	// Memo : Record Of Vistors - 길상등기능으로 교체됨.
	//M_CS_REQRMEMO = 11401,
	M_SC_ROOMMEMO = 11402,
	M_CS_NEWRMEMO = 11403,
	M_SC_NEWRMEMO = 11404,
	//M_CS_DELRMEMO = 11405,
	//M_SC_DELRMEMO = 11406,
	//M_CS_MODIFYRMEMO = 11407,
	//M_SC_MODIFYRMEMO = 11408,
	//M_CS_MODIFY_MEMO_START = 11409,
	//M_CS_MODIFY_MEMO_END = 11411,

	M_SC_ROOMMEMO_LIST = 11412,
	M_SC_ROOMMEMO_UPDATE = 11414,
	//M_CS_ROOMMEMO_GET = 11415,
	//M_SC_ROOMMEMO_DATA = 11416,

	// Letter
	M_CS_REQ_PAPER_LIST = 11501,
	M_SC_PAPER_LIST = 11502,
	M_CS_REQ_PAPER = 11503,
	M_SC_PAPER = 11504,
	M_CS_NEW_PAPER = 11505,
	M_SC_NEW_PAPER = 11506,
	M_CS_DEL_PAPER = 11507,
	M_SC_DEL_PAPER = 11508,
	M_CS_MODIFY_PAPER = 11509,
	//M_SC_MODIFY_PAPER = 11510,
	M_CS_MODIFY_PAPER_START = 11511,
	M_CS_MODIFY_PAPER_END = 11513,

	// Visit Info
	M_CS_REQRVISITLIST = 11601,
	M_SC_ROOMVISITLIST = 11602,
	M_CS_ADDACTIONMEMO = 11603,
	M_CS_VISIT_DETAIL_LIST = 11605,
	M_SC_VISIT_DETAIL_LIST = 11606,
	M_CS_VISIT_DATA = 11607,
	M_SC_VISIT_DATA = 11608,
	M_CS_VISIT_DATA_SHIELD = 11609,
	M_CS_VISIT_DATA_DELETE = 11611,
	M_CS_VISIT_DATA_MODIFY = 11613,
	M_SC_VISIT_FISHFLOWER_LIST = 11614,

	M_CS_GET_ROOM_VISIT_FID = 11615,
	M_SC_ROOM_VISIT_FID = 11616,

	// Mail
	M_NT_REQ_MAILBOX_STATUS_CHECK = 21700,
	M_SC_MAILBOX_STATUS = 11702,
	M_CS_MAIL_GET_LIST = 11703,
	M_SC_MAIL_LIST = 11704,
	M_CS_MAIL_GET = 11705,
	M_SC_MAIL = 11706,
	M_CS_MAIL_SEND = 11707,
	M_NT_MAILBOX_STATUS_FOR_SEND = 21708,
	M_NT_MAIL_SEND = 21709,
	M_SC_MAIL_SEND = 11710,
	M_CS_MAIL_DELETE = 11711,
	M_CS_MAIL_REJECT = 11712,
	M_SC_MAIL_REJECT = 11713,
	M_CS_MAIL_ACCEPT_ITEM = 11714,
	M_NT_MAIL_ITEM_FOR_ACCEPT = 21716,
	M_NT_MAIL_ACCEPT_ITEM = 21717,
	M_NT_TEMP_MAIL_ADDPOINT_TO_OLDROOM = 21718,

	M_SC_CHANGECHDRESS = 11740,
	M_SC_ROOMPRO = 11741,
	//M_CS_ROOMMUSIC = 11716,
	//M_SC_ROOMMUSIC = 11717,

	M_CS_MANAGER_ADD = 11751,
	M_CS_MANAGER_ANS = 11753,
	M_CS_MANAGER_DEL = 11755,
	M_CS_MANAGEROOMS_GET = 11757,
	M_SC_MANAGEROOMS_LIST = 11758,
	M_CS_MANAGER_GET = 11759,
	M_SC_MANAGER_LIST = 11760,
	M_NT_MANAGER_DEL = 21761,
	M_CS_MANAGER_SET_PERMISSION = 11763,

	// 비석관리
	M_CS_TOMBSTONE = 11801,
	M_SC_TOMBSTONE = 11802,

	// ruyibei관련
	M_SC_RUYIBEI = 11803,
	M_CS_RUYIBEI_TEXT = 11804,
	M_SC_RUYIBEI_TEXT = 11805,

	// 기념관안의 동물관리
	M_SC_ANIMAL_ADD = 11806,
	M_SC_ANIMALMOVE = 11808,
	M_CS_ANIMAL_APPROACH = 11809,
	M_CS_ANIMAL_STOP = 11811,
	M_CS_ANIMAL_SELECT = 11813,
	M_SC_ANIMAL_SELECT = 11814,
	M_CS_ANIMAL_SELECT_END = 11815,
	M_SC_PEACOCK_TYPE = 11816,

	// 기념관안의 편집동물관리
	M_SC_EANOTIFYMAINCLIENT = 11830,
	M_CS_EAINITINFO = 11831,
	M_SC_EASETPOS = 11832,
	M_CS_EAMOVE = 11833,
	M_SC_EAMOVE = 11834,
//	M_CS_EAANIMATION = 11835,
//	M_SC_EAANIMATION = 11836,
	M_CS_EABASEINFO = 11837,
	M_SC_EABASEINFO = 11838,
	M_CS_EAANISELECT = 11839,
	M_SC_EAANISELECT = 11840,

	// 행운대
	M_CS_LUCK_REQ = 11851,
	M_SC_LUCK = 11852,
	M_NT_LUCK = 21853,
	M_NT_LUCKHIS = 21854,
	M_SC_LUCK_LIST = 11854,
	M_SC_LUCK_TOALL = 11856,
	//M_NT_LUCK_RESET = 21857,
	//M_CS_LUCK4_LIST = 11859,
	M_SC_LUCK4_LIST = 11860,
//	M_NT_LUCK4_REQ = 21861,
//	M_NT_LUCK4_RES = 21862,
	M_NT_LUCK4_CONFIRM = 21863,
	M_NT_LUCK4_RESET = 11864,

	// 북,종
	M_CS_DRUM_START = 11873,
	M_SC_DRUM_START = 11874,
	M_CS_DRUM_END = 11875,
	M_SC_DRUM_END = 11876,
	M_CS_BELL_START = 11877,
	M_SC_BELL_START = 11878,
	M_CS_BELL_END = 11879,
	M_SC_BELL_END = 11880,
	M_CS_MUSIC_START = 11881,
	M_SC_MUSIC_START = 11882,
	M_CS_MUSIC_END = 11883,
	M_SC_MUSIC_END = 11884,
	M_CS_SHENSHU_START = 11885, // by krs  
	M_SC_SHENSHU_START = 11886,

	// Activity
	M_CS_ACT_REQ = 11901,
	M_SC_ACT_WAIT = 11902,
	M_CS_ACT_WAIT_CANCEL = 11903,

	M_CS_ACT_START = 11905,
	M_SC_ACT_START = 11906,
	M_CS_ACT_RELEASE = 11907,
	M_SC_ACT_RELEASE = 11908,

	M_CS_ACT_STEP = 11931,
	M_SC_ACT_STEP = 11932,

	M_SC_ACT_NOW_START = 11934,

	M_CS_MULTIACT2_ITEMS = 11939,
	M_SC_MULTIACT2_ITEMS = 11940,

	M_CS_MULTIACT2_ASK = 11941,
	M_SC_MULTIACT2_ASK = 11942,
	M_CS_MULTIACT2_JOIN = 11943,
	M_SC_MULTIACT2_JOIN = 11944,
	M_SC_MULTIACT2_JOINADD = 11946,

	M_CS_MULTIACT_REQ = 11951,
	M_SC_MULTIACT_REQ = 11952,
	M_CS_MULTIACT_ANS = 11953,
	M_SC_MULTIACT_ANS = 11954,
	M_CS_MULTIACT_READY = 11955,
	M_SC_MULTIACT_READY = 11956,

	M_CS_MULTIACT_CANCEL = 11957,
	M_SC_MULTIACT_CANCEL = 11958,

	M_SC_MULTIACT_WAIT = 11960,

	M_CS_MULTIACT_GO = 11961,
	M_SC_MULTIACT_GO = 11962,

	M_CS_MULTIACT_START = 11963,
	M_SC_MULTIACT_START = 11964,
	M_SC_MULTIACT_STARTED = 11966,
	M_CS_MULTIACT_RELEASE = 11967,
	M_SC_MULTIACT_RELEASE = 11968,

	M_CS_MULTIACT_COMMAND = 11969,
	M_SC_MULTIACT_COMMAND = 11970,
	M_CS_MULTIACT_REPLY = 11971,
	M_SC_MULTIACT_REPLY = 11972,
	M_CS_MULTIACT_REQADD = 11973,
	M_SC_MULTIACT_REQADD = 11974,

	M_SC_CHITLIST = 12002,
	M_CS_RESCHIT = 12003,
	M_NT_ADDCHIT = 22004,

	// 채팅관련
	M_CS_CHATROOM = 12005,
	M_SC_CHATROOM = 12006,
	M_CS_CHATCOMMON = 12007,
	M_SC_CHATCOMMON = 12008,
	M_CS_CHATEAR = 12009,
	M_SC_CHATEAR = 12010,
	M_CS_CHATALL = 12011,
	M_SC_CHATALL = 12012,
	M_SC_CHATSYSTEM = 12014,
	M_SC_CHATMAIN = 12016,
	M_SC_CHATEAR_FAIL = 12018,

	M_CS_JOIN_SESSION = 12101,
	M_SC_JOIN_SESSION = 12102,
	M_SC_SESSION_ADDMEMBER = 12104,
	M_SC_SESSION_DELMEMBER = 12106,
	M_CS_SPEAK_TO_SESSION = 12107,
	M_SC_SPEAK_TO_SESSION = 12108,
	M_CS_EXIT_SESSION = 12109,
	M_CS_REQUEST_TALK = 12111,
	M_SC_REQUEST_TALK = 12112,
	M_CS_RESPONSE_TALK = 12113,
	M_SC_RESPONSE_TALK = 12114,
	M_CS_HANGUP_TALK = 12115,
	M_SC_HANGUP_TALK = 12116,
	M_CS_TALK_INIT_COMPLETED = 12117,
	M_SC_TALK_INIT_COMPLETED = 12118,

	/************************************************************************/
	/*   History data(figure, photo, movie) upload and download and delete  */
	/************************************************************************/
	M_CS_REQ_UPLOAD = 12201,
	M_SC_REQ_UPLOAD = 12202,
	M_CS_UPLOAD_DONE = 12203,
	M_SC_UPLOAD_DONE = 12204,
	M_CS_REQDATA_PHOTO = 12205,
	M_SC_REQDATA_PHOTO = 12206,
	M_CS_REQDATA_VIDEO = 12207,
	M_SC_REQDATA_VIDEO = 12208,
	M_CS_REQ_DOWNLOAD = 12209,
	M_SC_REQ_DOWNLOAD = 12210,
	M_SC_DOWNLOAD_DONE = 12212,
	M_CS_REQ_DELETE = 12213,
	M_SC_REQ_DELETE = 12214,
	M_SC_DELETE_DONE = 12216,
	M_SC_DOWNLOAD_PROG = 12218,
	M_SC_UPLOAD_PROG = 12220,

	M_CS_PHOTOALBUMLIST = 12221,
	M_SC_PHOTOALBUMLIST = 12222,
	M_CS_VIDEOALBUMLIST = 12223,
	M_SC_VIDEOALBUMLIST = 12224,
	M_CS_ADDALBUM = 12225,
	M_CS_DELALBUM = 12227,
	M_CS_RENALBUM = 12229,
	M_CS_CHANGEALBUMINDEX = 12231,

	M_CS_ALBUMINFO = 12233,
	M_SC_ALBUMINFO = 12234,

	M_CS_RENDATA = 12235,
	M_CS_MOVDATA = 12237,
	M_SC_MOVDATA = 12238,

	M_CS_CHANGEVIDEOINDEX = 12239,

	M_SC_FRAMELIST = 12240,
	M_CS_FRAMEDATA_SET = 12241,
	//#define M_SC_FRAMEDATA						"SC_FRAMEDATA"				// [d:Result Code]
	M_CS_FRAMEDATA_GET = 12243,
	M_SC_FRAMEDATA_GET = 12244,

	M_CS_BUYHISSPACE = 12245,
	M_SC_CURHISSPACE = 12246,

	M_NT_ADDTOHIS = 22247,
	M_NT_DELFROMHIS = 22248,
	M_NT_CHANGEROLE = 22249,
	M_NT_ENTERLOBBY = 22250,

	M_CS_HISMANAGE_START = 12251,
	M_SC_HISMANAGE_START = 12252,
	M_CS_HISMANAGE_END = 12253,

	M_SC_FIGUREFRAME_LIST = 12254,
	M_CS_FIGUREFRAME_SET = 12255,

	M_CS_PLAY_START = 12261,
	M_CS_PLAY_STOP = 12263,

	//////////////////////////////////////////////////////////////////////////

	M_CS_FORCESTATECH = 12301,

	// Reserve Event
	//M_SC_CURDATETIME = 12302,

	// Festival
	M_CS_REGFESTIVAL = 12401,
	M_SC_REGFESTIVAL = 12402,
	M_CS_MODIFYFESTIVAL = 12403,
	M_SC_MODIFYFESTIVAL = 12404,
	M_CS_DELFESTIVAL = 12405,
	M_SC_DELFESTIVAL = 12406,
	M_SC_ALLFESTIVAL = 12408,
	M_CS_SET_FESTIVALALARM = 12409,
	M_SC_SET_FESTIVALALARM = 12410,
	M_SC_ALL_FESTIVALALARM = 12412,

	// Log
	M_CS_SHARDLOG = 12501,
	M_CS_UNLAWLOG = 12503,
	M_CS_GMLOG = 12505,

	// GM
	M_GMCS_NOTICE = 12601,
	M_GMCS_WHEREFAMILY = 12603,
	M_GMSC_WHEREFAMILY = 12604,
	M_GMSC_MOVETO = 12606,
	M_GMCS_PULLFAMILY = 12607,
	M_GMCS_GETFAMILY = 12609,
	M_GMSC_GETFAMILY = 12610,
	M_GMCS_LOGOFFFAMILY = 12611,
	M_GMSC_LOGOFFFAMILY = 12612,
	M_GMCS_OUTFAMILY = 12613,
	M_GMCS_ACTIVE = 12615,
	M_GMSC_ACTIVE = 12616,
	M_GMCS_SHOW = 12617,
	M_GMSC_SHOW = 12618,
	M_GMCS_GETMONEY = 12619,
	M_GMSC_GETMONEY = 12620,
	M_GMCS_GETITEM = 12621,
	M_GMSC_GETITEM = 12622,
	M_GMCS_GETINVENEMPTY = 12623,
	M_GMSC_GETINVENEMPTY = 12624,
	M_GMCS_GETLEVEL = 12625,
	M_GMSC_GETLEVEL = 12626,
	M_GMCS_SETLEVEL = 12627,
	M_GMCS_LISTCHANNEL = 12629,
	M_GMSC_LISTCHANNEL = 12630,
	M_GMCS_GET_GMONEY = 12631,
	M_GMSC_GET_GMONEY = 12632,


	//M_GMCS_MAIL_SEND = 12637,
	//M_GMSC_MAIL_SEND = 12638,
	M_GMSC_FAIL = 12640,

	M_GMSC_ROOMCHAT = 12642,
	
	M_GMCS_ZAIXIAN_ANSWER = 12701,
	M_GMSC_ZAIXIAN_ASK = 12702,
	M_GMCS_ZAIXIAN_CONTROL = 12703,
	M_GMSC_ZAIXIAN_END = 12704,

	// 금언기능
	M_NT_SET_DBTIME = 12711,
	M_GMSC_SILENCE_FAMILY = 12712,
	M_GMCS_SILENCE_SET = 12713,
	M_SC_SILENCE_TIME = 12714,
	M_NT_SILENCE_SET = 12715,

// For Media Stream
	M_CS_SMINIT = 12801,
	M_SC_SMINIT = 12802,
	M_CS_SMSTART = 12803,
	M_SC_SMSTART = 12804,
	M_CS_SMSETSEG = 12805,
	M_SC_SMENDSTREAMSEG = 12806,
	M_CS_SMSTOP = 12807,
	M_CS_SMSEEK = 12809,
	M_SC_SMSEEK = 12810,
	M_CS_SMPAUSEANDREPLAY = 12811,
	M_SC_SMMEDIADATA = 12812,
	M_SC_SMEND = 12814,

	//// 천원카드관리
	//M_CS_ROOMCARD_CHECK = 12901,
	//M_SC_ROOMCARD_CHECK = 12902,
	M_CS_ROOMCARD_NEW = 12903,
	//M_CS_ROOMCARD_RENEW = 12905,
	M_CS_ROOMCARD_PROMOTION = 12907,

	//M_SM_ROOMCARD_CHECK = 22909,
	//M_MS_ROOMCARD_CHECK = 22910,
	M_SM_ROOMCARD_USE = 22911,
	M_MS_ROOMCARD_USE = 22912,

	M_CS_ADDWISH = 13001,
	M_SC_WISH = 13002,
	M_CS_WISH_LIST = 13003,
	M_SC_WISH_LIST = 13004,
	M_CS_MY_WISH_LIST = 13005,
	M_SC_MY_WISH_LIST = 13006,
	M_CS_MY_WISH_DATA = 13007,
	M_SC_MY_WISH_DATA = 13008,

	// 종교구역에서 편지올리기 - 사양 없어짐
	//M_SC_R_PAPER_LIST = 13102,
	//M_CS_R_PAPER_START = 13103,
	//M_SC_R_PAPER_START = 13104,
	//M_CS_R_PAPER_END = 13105,
	//M_SC_R_PAPER_END = 13106,
	//M_CS_R_PAPER_PLAY = 13107,
	//M_SC_R_PAPER_PLAY = 13108,

	// 열점추천기능
	//M_GMCS_RECOMMEND_SET = 13201,
	//M_CS_RECOMMEND_ROOM = 13203,
	//M_SC_RECOMMEND_ROOM = 13204,

	// 공덕비관련
	M_CS_VIRTUE_LIST = 13301,
	M_SC_VIRTUE_LIST = 13302,
	M_CS_VIRTUE_MY = 13303,
	M_SC_VIRTUE_MY = 13304,

	// 종교구역에서 행사기록관련
	M_CS_R_ACT_INSERT = 13401,
	M_CS_R_ACT_MODIFY = 13403,
	M_CS_R_ACT_LIST = 13405,
	M_SC_R_ACT_LIST = 13406,
	M_CS_R_ACT_MY_LIST = 13407,
	M_SC_R_ACT_MY_LIST = 13408,
	M_CS_R_ACT_PRAY = 13409,
	M_SC_R_ACT_PRAY = 13410,

	// Action결과물관련
	M_SC_ACT_RESULT_XIANBAO = 13500,
	M_SC_ACT_RESULT_YISHI = 13502,
	M_SC_ACT_RESULT_ANCESTOR_JISI = 13504,
	M_SC_ACT_RESULT_ANCESTOR_DECEASED_XIANG = 13506,
	M_SC_ACT_RESULT_ANCESTOR_DECEASED_HUA = 13508,
	M_SC_ACT_RESULT_AUTO2 = 13510,

	// 방양도
	M_CS_CHANGEMASTER = 13601,
	M_SC_CHANGEMASTER = 13602,
	M_CS_CHANGEMASTER_CANCEL = 13603,
	M_SC_CHANGEMASTER_REQ = 13604,
	M_CS_CHANGEMASTER_ANS = 13605,
	// If you modify this, you must modify M_SC_OWNROOM
	M_SC_SETROOMMASTER = 13606,
	M_NT_CHANGEMASTER_FORCE = 13607,

	// 조상탑기능
	M_SC_ANCESTOR_TEXT = 13702,
	M_SC_ANCESTOR_DECEASED = 13704,
	M_CS_ANCESTOR_TEXT_SET = 13705,
	M_CS_ANCESTOR_DECEASED_SET = 13707,

	// AutoPlay기능
	M_CS_AUTOPLAY_REQ_BEGIN = 13801,
	M_CS_AUTOPLAY_REQ = 13803,
	M_SC_AUTO_ENTER = 13804,
	M_SC_AUTO_LEAVE = 13806,
	//M_SC_AUTO_STATECH = 13808,
	//M_SC_AUTO_CHMETHOD = 13810,
	//M_SC_AUTO_HOLDITEM = 13812,
	//M_SC_AUTO_MOVECH = 13814,
	M_NT_AUTOPLAY_REGISTER = 23820,
	M_NT_ADDACTIONMEMO = 23821,
	M_NT_ADDACTIONMEMO_OK = 23822,
	M_NT_AUTOPLAY_REQ = 23823,
	M_NT_AUTOPLAY_ANS = 23824,
	M_NT_AUTOPLAY_START = 23825,
	M_NT_AUTOPLAY_END = 23826,
//	M_NT_AUTOPLAY_STATECH = 23827,
//	M_NT_AUTOPLAY_CHMETHOD = 23828,
//	M_NT_AUTOPLAY_HOLDITEM = 23829,
//	M_NT_AUTOPLAY_MOVECH = 23830,

	M_SC_AUTOPLAY_STATUS = 13840,

	M_CS_AUTOPLAY2_REQ = 13851,

	// 행사예약기능
	M_SC_AUTOPLAY3_LIST = 13860,
	M_CS_AUTOPLAY3_REGISTER = 13861,
	M_NT_AUTOPLAY3_REGISTER = 23862,
	M_NT_AUTOPLAY3_START_REQ = 23863,
	M_NT_AUTOPLAY3_START_OK = 23864,
	M_NT_AUTOPLAY3_EXP_ADD_ONLINE = 23865,
	M_NT_AUTOPLAY3_EXP_ADD_OFFLINE = 23866,
	M_NT_AUTOPLAY3_EXP_ADD_OK = 23877,
	M_NT_AUTOPLAY3_FAIL = 23878,
	M_NT_AUTOPLAY3_TIANDI = 23879,

	// Manager써비스 Player사용자 방입장/방퇴장 관련
	M_NT_PLAYER_LOGIN = 23900,
	M_NT_PLAYER_LOGOUT = 23901,
	M_NT_PLAYER_ENTERROOM = 23902,
	M_NT_PLAYER_LEAVEROOM = 23903,
	//M_NT_PLAYER_CHANGECHANNEL = 23904,

	// Manager써비스 Room관리용
	M_NT_ROOM_CREATE_REQ = 24000,
	M_NT_ROOM_CREATED = 24001,
	M_NT_ROOM_DELETED = 24002,

	// 물고기, 꽃
	M_CS_FISH_FOOD = 14101,
	M_SC_UPDATE_FISH = 14102,
	M_CS_FLOWER_NEW = 14103,
	M_CS_FLOWER_WATER = 14105,
	M_SC_UPDATE_FLOWER = 14106,
	M_CS_FLOWER_END = 14107,
	M_CS_FLOWER_NEW_REQ = 14109,
	M_CS_FLOWER_WATER_REQ = 14111,
	M_SC_FLOWER_NEW_ANS = 14112,
	M_SC_FLOWER_WATER_ANS = 14114,
	M_SC_MSTFISH = 14116,
	M_CS_GOLDFISH_CHANGE = 14117,
	M_SC_UPDATE_GOLDFISH = 14118,
	M_CS_FLOWER_WATERTIME_REQ = 14119,
	M_SC_FLOWER_WATERTIME_ANS = 14120,

	// 기념관 보물창고관련
	M_CS_GET_ROOMSTORE = 14201,
	M_SC_ROOMSTORE = 14202,
	M_CS_ADD_ROOMSTORE = 14203,
	M_SC_ADD_ROOMSTORE_RESULT = 14204,
	M_CS_GET_ROOMSTORE_HISTORY = 14205,
	M_SC_ROOMSTORE_HISTORY = 14206,
	M_CS_GET_ROOMSTORE_HISTORY_DETAIL = 14207,
	M_SC_ROOMSTORE_HISTORY_DETAIL = 14208,
	M_CS_ROOMSTORE_LOCK = 14209,
	M_SC_ROOMSTORE_LOCK = 14210,
	M_CS_ROOMSTORE_UNLOCK = 14211,
	M_SC_ROOMSTORE_STATUS = 14212,
	M_CS_ROOMSTORE_LASTITEM_SET = 14213,
	M_CS_ROOMSTORE_HISTORY_MODIFY = 14215,
	M_CS_ROOMSTORE_HISTORY_DELETE = 14217,
	M_CS_ROOMSTORE_HISTORY_SHIELD = 14219,
	M_CS_ROOMSTORE_GETITEM = 14221,
	M_SC_ROOMSTORE_GETITEM = 14222,

	// 中奖기능
	M_SC_PRIZE = 14312,
	M_SC_LARGEACTPRIZE = 14314,
	M_SC_YUWANGPRIZE = 14316,
	M_SC_ADDEDJIFEN = 14318,
	M_NT_REMOVEJIFEN = 14319,
	// 축복카드기능
	M_SC_BLESSCARD_LIST = 14402,
	M_CS_BLESSCARD_GET = 14403,
	M_SC_BLESSCARD_GET = 14404,
	M_CS_BLESSCARD_SEND = 14405,
	M_SC_BLESSCARD_SEND = 14406,
	M_SC_BLESSCARD_RECEIVE = 14408,

	M_NT_BLESSCARD_USED = 34409,
	M_NT_LARGEACTPRIZE = 34410,
	// 사용후기
	//M_CS_REVIEW_LIST = 14501,
	//M_SC_REVIEW = 14502,
	//M_GMCS_REVIEW_ADD = 14503,
	//M_GMCS_REVIEW_MODIFY = 14505,
	//M_GMCS_REVIEW_DELETE = 14507,

	// 공공구역에서 Frame에 걸려있는 체험방자료
	M_GMCS_PUBLICROOM_FRAME_SET = 14601,
	M_CS_PUBLICROOM_FRAME_LIST = 14603,
	M_SC_PUBLICROOM_FRAME_LIST = 14604,

	// 공공구역에서 대형행사조직
	//M_CS_LARGEACT_LIST = 14701,
	M_SC_LARGEACT_LIST = 14702,
	M_GMCS_LARGEACT_SET = 14703,
	M_GMSC_LARGEACT_NEWID = 14704,
	M_GMCS_LARGEACT_DETAIL = 14705,
	M_GMSC_LARGEACT_DETAIL = 14706,
	M_GMSC_LARGEACT_SET = 14708,

	M_SC_LARGEACT_CURRENT = 14720,
	M_SC_LARGEACT_USERNUM = 14722,

	// 공공구역에서 대형행사참가/진행
	M_CS_LARGEACT_REQUEST = 14751,
	M_SC_LARGEACT_REQUEST = 14752,
	M_CS_LARGEACT_CANCEL = 14753,

	M_SC_LARGEACT_PREPARE = 14754,

	M_SC_LARGEACT_START = 14756,
	M_SC_LARGEACT_OUT = 14758,
	M_CS_LARGEACT_STEP = 14759,
	M_SC_LARGEACT_STEP = 14760,

	M_CS_LARGEACT_USEITEM = 14761,
	M_SC_LARGEACT_INFOCHANGE = 14762,
	M_SC_LARGEACT_READYVIP = 14764,

	M_CS_ADD_TOUXIANG	= 14770,
	M_SC_ADD_TOUXIANG	= 14771,
	M_SC_DEL_TOUXIANG	= 14773,
	
	M_CS_NIANFO_BEGIN	 = 14781,
	M_SC_NIANFO_BEGIN	 = 14782,
	M_CS_NIANFO_END		 = 14783,
	M_SC_NIANFO_END		 = 14784,
	
	M_CS_NEINIANFO_BEGIN = 14791,
	M_SC_NEINIANFO_BEGIN = 14792,
	M_CS_NEINIANFO_END	 = 14793,
	M_SC_NEINIANFO_END	 = 14794,

	// 불교구역대형행사관련
	M_SC_BY_CURRENT = 15000,
	M_GMCS_SBY_LIST = 15001,
	M_GMSC_SBY_LIST = 15002,
	M_GMCS_SBY_DEL = 15003,
	M_GMSC_SBY_DELRES = 15004,
	M_GMCS_SBY_EDIT = 15005,
	M_GMSC_SBY_EDITRES = 15006,
	M_GMCS_SBY_ADD = 15007, 
	M_GMSC_SBY_ADDRES = 15008,
	M_CS_SBY_ADDREQ = 15101,
	M_SC_SBY_ADDRES = 15102,
	M_SC_SBY_ADDUSER = 15104,
	M_CS_SBY_EXIT = 15105,
	M_SC_SBY_EXITUSER = 15106,
	M_CS_SBY_OVER = 15107,
	M_SC_SBY_START = 15108,
	M_SC_SBY_OVER = 15110,
	M_SC_SBY_CURSTATE = 15112,
	M_CS_PBY_SET = 15201,
	M_SC_PBY_SET = 15202,
	M_CS_PBY_MAKE = 15203,
	M_SC_PBY_MAKERES = 15204,
	M_CS_PBY_ADDREQ = 15205,
	M_SC_PBY_ADDRES = 15206,
	M_CS_PBY_JOINSET = 15207,
	M_SC_PBY_ADDUSER = 15208,
	M_CS_PBY_EXIT = 15209,
	M_SC_PBY_EXITUSER = 15210,
	M_CS_PBY_UPDATESTATE = 15211,
	M_SC_PBY_UPDATESTATE = 15212,
	M_SC_PBY_CURSTATE = 15214,
	M_CS_PBY_CANCEL = 15215,
	M_SC_PBY_CANCEL = 15216,
	M_CS_PBY_OVERUSER = 15217,
	M_SC_PBY_OVERALL = 15218,

	M_CS_PBY_HISLIST = 15301,
	M_SC_PBY_HISLIST = 15302,
	M_CS_PBY_MYHISLIST = 15303,
	M_SC_PBY_MYHISLIST = 15304,
	M_CS_PBY_HISINFO = 15305,
	M_SC_PBY_HISINFO = 15306,
	M_CS_PBY_SUBHISINFO = 15307,
	M_SC_PBY_SUBHISINFO = 15308,
	M_CS_PBY_HISMODIFY = 15309,
	M_CS_PBY_SUBHISMODIFY = 15311,

	// 매일 chekin관련
	M_CS_CHECKIN		= 16001,
	M_SC_CHECKIN		= 16002,
	M_SC_CHECKINSTATE	= 16004,
	M_NT_REQCHECKIN		= 16006,
	M_NT_RESCHECKIN		= 16007,
	M_MS_CURRENT_CHECKIN = 16008,
	M_NT_CURRENT_CHECKIN = 16009,

	// 공공구역 선밍관련
	M_CS_REQLUCKINPUBROOM = 16101,
//	M_SC_NEWLUCKINPUBROOM = 16102,
//	M_SC_DELLUCKINPUBROOM = 16104,
	M_CS_GETBLESSCARDINPUBROOM = 16105,
	M_CS_HISLUCKINPUBROOM = 16107,
	M_SC_HISLUCKINPUBROOM = 16108,
	M_NT_REQGIVEBLESSCARD = 16109,
	M_NT_RESGIVEBLESSCARD = 16110,
	M_SC_CURLUCKINPUBROOM = 16112,
	M_NT_CURLUCKINPUBROOM = 16114,

	// 지역써버절환용
	M_CS_CHANGE_SHARD_REQ = 16201,
	M_SC_CHANGE_SHARD_ANS = 16202,

	M_NT_MOVE_USER_DATA_REQ = 26203,
	M_NT_MOVE_USER_DATA_END = 26204,

	M_NT_SEND_USER_DATA = 26205,

	M_NT_NEWFAMILY = 26206,
	M_NT_CHANGE_USERNAME = 26207,

	M_CS_REQ_MST_DATA = 16210,
	M_CS_REQ_PRIMARY_DATA = 16211,

	// 친구: Main에서 관리된다.
	M_SC_FRIEND_GROUP = 16220,
	M_SC_FRIEND_LIST = 16221,
	M_NT_REQ_FRIEND_INFO = 26222,
	M_NT_FRIEND_GROUP = 26223,
	M_NT_FRIEND_LIST = 26224,
	M_NT_FRIEND_SN = 26225,
	M_NT_FRIEND_DELETED = 26226,

	// Favorite: Main에서 관리된다.
	M_SC_FAVORROOM_GROUP = 16230,
	M_SC_FAVORROOM_LIST = 16231,



	M_PROCPACKET = 27001,
	M_FORCEDISCONNECT = 27002,

	M_AES_SERVICE_NOTPONG = 27003,
	M_AES_REGISTER_AES = 27004,
	M_AES_AES_INFO = 27005,
	M_AES_REJECTED = 27006,
	M_AES_AES_GET_VIEW = 27007,
	M_AES_REG_SVCS = 27008,
	M_AES_DISCONNECT_SERVICE = 27009,
	M_CS_FORCELOGIN = 27013,

	M_SS_MASTER = 27100,
	M_SS_SLAVE = 27101,
	//M_SS_CV = 27102,
	//M_SS_FORCECS = 27104,
	//M_SS_REG = 27105,
	M_SS_NOTIFYCOOKIETOSLAVE = 27106,
	M_SS_RECEIVED_COOKIE = 27107,
	M_SS_RQSTATE = 27108,
	M_NT_REQ_FORCE_LOGOFF = 27109,
	M_SS_SLAVEIDENT = 27110,
	//M_SS_asymMsg = 27111,
	//M_SS_symMsg = 27112,
	//M_SS_FORCELOGOFF = 27113,

	//M_LS_STATEDEF = 27200,
	//M_LS_RESHARD = 27201,
	M_LW_SHARDINFO = 27202,
	M_WL_WS_IDENT = 27203,
	M_LS_EXPENDMONEY = 27204,
	M_LS_REFRESHMONEY = 27205,
	M_LS_USERMONEY = 27206,
	M_LS_REPORT_FS_STATE = 27207,
	M_LS_SET_SHARD_OPEN = 27208,
	M_LS_OL_ST = 27209,
	M_LS_RELOGOFF = 27210,
	M_LS_CHECKPWD2 = 27211,
	M_LS_CHECKPWD2_R = 27212,
	M_W_REQSHARDCODE = 27213,
	M_W_SHARDCODE = 27214,

	M_WS_FS_ACCEPT = 27215,
	M_WS_FEPA = 27216,
	M_WS_NBPLAYERS = 27217,
	M_WS_NBPLAYERS2 = 27218,
	//M_WS_RESTORE_SHARD_OPEN = 27219,

	M_LW_OTHER_SHARD = 27230,
	M_LW_OTHER_SHARD_OFF = 27231,

//	M_WM_SHARDCODELIST = 27233,

	M_TEST = 28000,

	//M_OROOM_MS_CREATE_LOBBY = 28001,
	//M_OROOM_MS_DEL_LOBBY = 28002,
	//M_OROOM_SM_DEL_LOBBY = 28003,
	//M_OROOM_LOBBY_USERS_CHANGED = 28004,
	//M_OROOM_SM_CREATE_LOBBY = 28005,

	M_CLIENT_temp = 28006,
	//M_CLIENT_GMAUTH = 28007,
	M_CLIENT_accountLogin = 28008,
	//M_CLIENT_connectToShard = 28009,

	M_TESTINGTOOL_PMINFO = 28010,
	M_TESTINGTOOL_PMCONFIG = 28011,
	M_TESTINGTOOL_PMAUTH = 28012,
	M_TESTINGTOOL_PMLOGOFF = 28013,

	// ZaiXianKeFu관련
	M_CS_ZAIXIAN_REQUEST = 40001,
	M_SC_ZAIXIAN_RESPONSE = 40002,
	M_CS_ZAIXIAN_ASK = 40003,
	M_SC_ZAIXIAN_ANSWER = 40004,
	M_CS_ZAIXIAN_END = 40005,
	M_SC_ZAIXIAN_CONTROL = 40006,
	M_NT_ZAIXIANGM_LOGON = 40010,
	M_NT_ZAIXIANGM_LOGOFF = 40011,

	// 폭죽관련
	M_SC_CRACKER_LIST = 100001,
	M_CS_CRACKER_BOMB = 100002,
	M_SC_CRACKER_BOMB = 100003,
	M_SC_CRACKER_CREATE = 100004,

	// 등불아이템관련
	M_CS_LANTERN = 100011,
	M_SC_LANTERN = 100012,
	M_CS_MULTILANTERN_REQ = 100061,
	M_SC_MULTILANTERN_RES = 100062,
	M_SC_MULTILANTERN_NEW = 100064,
	M_CS_MULTILANTERN_JOIN = 100065,
	M_SC_MULTILANTERN_JOIN = 100066,
	M_CS_MULTILANTERN_START = 100067,
	M_SC_MULTILANTERN_START = 100068,
	M_CS_MULTILANTERN_END = 100069,
	M_SC_MULTILANTERN_END = 100070,
	M_CS_MULTILANTERN_CANCEL = 100071,
	M_SC_MULTILANTERN_CANCEL = 100072,
	M_CS_MULTILANTERN_OUTJOIN = 100073,
	M_SC_MULTILANTERN_OUTJOIN = 100074,
	M_SC_MULTILANTERN_READYLIST = 100076,

	// 악기아이템들 - 피리, 바이올린, 칠현금, 북, 폭죽
	M_CS_ITEM_MUSICITEM = 100021,

	//// 피리아이템불기
	//M_CS_ITEM_FLUTES = 100021,

	//// 바이올린아이템관련
	//M_CS_ITEM_VIOLIN = 100023,

	//// 칠현금아이템관련
	//M_CS_ITEM_GUQIN = 100025,

	//// 북아이템관련
	//M_CS_ITEM_DRUM = 100027,

	//// 폭죽아이템관련
	//M_CS_ITEM_FIRECRACK = 100029,

	// 특수비아이템관련
	M_CS_ITEM_RAIN = 100031,
	M_SC_ITEM_RAIN = 100032,

	// 포인트카드아이템관련
	M_CS_ITEM_POINTCARD = 100041,
	M_SC_ITEM_POINTCARD = 100042,

	// 기념관 깜짝이벤트기능
	M_SC_ROOMEVENT = 100052,
	M_GMCS_ROOMEVENT_ADD = 100053,
	M_SC_ROOMEVENT_END = 100054,

	// 신비동물타기기능
	M_CS_MOUNT_LUCKANIMAL = 100101,
	M_SC_MOUNT_LUCKANIMAL = 100102,
	M_CS_UNMOUNT_LUCKANIMAL = 100103,
	M_SC_UNMOUNT_LUCKANIMAL = 100104,

	// 婚庆祭祖祈福관련
	M_CS_HUNQING_LOGIN = 1000001,
	M_SC_HUNQING_LOGIN_RESULT = 1000002,
	M_CS_HUNQING_LIST = 1000003,
	M_SC_HUNQING_LIST = 1000004,
	M_CS_HUNQING_ADD = 1000005,
	M_SC_HUNQING_ADD = 1000006,
	M_CS_HUNQING_MODIFY = 1000007,
	M_CS_HUNQING_DELETE = 1000008,
	M_CS_HUNQING_PLAY = 1000009,
	M_SC_HUNQING_ERROR = 1000010,
	M_CS_HUNQING_LOGOUT = 1000011,

};

#else

// connect
// M_HANDSHKOK : #define M_SC_HANDSHKOK						"HANDSHKOK"					// Handshake OK(None)
// M_HANDSHKFAIL #define M_SC_HANDSHKFAIL					"HANDSHKFAIL"				// Handshake fail(None)
#define M_SC_SHARDS							"SHARDS"					// List of shards([d:userID][d:last entered shardID][d:client network partid][d:list count][[d:shard id][u:shard name][d:room count][b:online flag][b:state(_SHARDSTATEDEFINE)][u:ShardCodeList][b:IsDefaultShard][d:ShardNetworkPartID]])
#define M_CS_CHECK_FASTENTERROOM			"CS_CHECK_FASTENTERROOM"	// Request to Check Enter Room ([d:RoomID])
#define M_SC_CHECK_FASTENTERROOM			"SC_CHECK_FASTENTERROOM"	// Check Enter Room Result ([d:ErrorCode][d:RoomID][d:ShardID])

// TryEnterToShard
// M_ENTER_SHARD_ANSWER : #define M_SC_SCS							"SCS"						// Enter shard fail ([w:Error code])
#define M_SC_CONNECTSHARD					"CONNECTSHARD"				// Connect to shard OK(parameter : CSecurityClient *)
#define M_SC_FAIL							"FAIL"						// Login fail ([w:error code])
#define M_SC_SSLONGINFAIL					"SSLONGINFAIL"				// equal M_SC_FAIL
// M_ENTER_SHARD : #define M_SC_SV								"SV"						// Authentication of shard([w:error code])
#define M_SC_IDENTIFICATION					"IDENTIFICATION"			// Login OK([d:dbID])
// M_WAIT : #define M_SC_WAITCONNECTION					"WAIT"						// Wait connection([d:user count][d:user decrease time(ms)])
// M_CONNECT : #define M_SC_ADMITCONNECTION				"CONNECT"					// Admit connection()
#define M_SC_CANCELCONNECTION				"CANCEL"					// Cancel connection(None)

// disconnect
// M_CLIENT_DISCONNECT : #define M_SC_DC								"DC"						// Client disconnect(None)

#define M_SYS_DISCONNECT					"SYSDISCONNECT"				// disconnect from server
#define M_SYS_TIMEOUT						"SYSTIMEOUT"				// Timeout
#define M_SC_DISCONNECT_OTHERLOGIN			"SC_DISCONNECT_OTHERLOGIN"	// Force Disconnect by another login

// Update
//#define M_FTPURI							"FTPURI"					// update list([s:product name][s:current version])
//#define M_CS_FTPURI							"FTPURI"					// update list([s:product name][s:current version])
//#define M_SC_FTPURI							"FTPURI"					// update server list([s:last version][s:server url][d:port][s:relative path][s:userID][s:password])

// Administrate and monitor
#define	M_AD_REGAES_CONNECT					"REGAES_CONNECT"			// AES is connected
#define	M_AD_UNREGAES_CONNECT				"UNREGAES_CONNECT"			// AES is connected
#define M_AD_AES_CONNECT					"AES_CONNECT"
#define	M_AD_AES_DISCONNECT					"AES_DISCONNECT"			// AES is connected
#define M_AD_ADMIN_CONF						"AD_ADMIN_CONF"
#define	M_MH_LOGIN_MAN_HOST					"MH_LOGIN_MAN_HOST"			// Manager is logined
#define	M_MH_CHPWD							"MH_CHPWD"					// Change password
#define	M_MH_CHNAME							"MH_CHNAME"					// Change name
#define	M_MH_CHVERSION						"MH_CHVERSION"				// Change version
#define	M_MH_ACCOUNTINFO					"MH_ACCOUNTINFO"			// Get account info
#define	M_MH_MANAGEPOWER					"MH_MANAGEPOWER"			// Get manager's power
#define	M_MH_MANAGEINFO						"MH_MANAGEINFO"				// Get manager's info
#define	M_MH_ADDMANAGER						"MH_ADDMANAGER"				// Add manager
#define	M_MH_DELMANAGER						"MH_DELMANAGER"				// Delete manager
#define	M_MH_DISCONNECT						"MH_DISCONNECT"				// Manager is disconnected
#define	M_MH_UPDATE							"MH_UPDATE"					// Update shard
#define	M_MH_CHUPDATE						"MH_CHUPDATE"				// Change update info
#define	M_MH_MANAGERONLINE					"MH_MANAGERONLINE"			// Manager is online
#define	M_MH_COMPINFO						"MH_COMPINFO"				// Component info
#define	M_MH_ONLINEINFO						"MH_ONLINEINFO"				// Service online info
#define	M_MH_ONLINEHOSTINFO					"MH_ONLINEHOSTINFO"			// Host online info
#define	M_MH_ADDSERVICE						"MH_ADDSERVICE"				// Add service
#define	M_MH_DELSERVICE						"MH_DELSERVICE"				// Delete service
#define	M_MH_ADDHOST						"MH_ADDHOST"				// Add host
#define	M_MH_DELHOST						"MH_DELHOST"				// Delete host
#define	M_MH_ADDSHARD						"MH_ADDSHARD"				// Add shard
#define	M_MH_DELSHARD						"MH_DELSHARD"				// Delete shard
#define	M_MH_REQUEST						"MH_REQUEST"				// Send request
#define	M_MH_REQUESTHOST					"MH_REQUESTHOST"			// Send request to host
#define	M_MH_STOPSERVICE					"MH_STOPSERVICE"			// Stop service
#define	M_MH_OPENSHARD						"MH_OPENSHARD"				// Open shard
#define	M_MH_CLOSESHARD						"MH_CLOSESHARD"				// Close shard
#define	M_MH_LOCKSHARD						"MH_LOCKSHARD"				// Lock shard
#define	M_MH_UNLOCKSHARD					"MH_UNLOCKSHARD"			// Unlock shard
#define	M_MH_LOG							"MH_LOG"					// Get manager's log
#define	M_MH_IDENT							"MH_IDENT"					// Service is idenitied : Ports ary
#define	M_MH_LOGRESET						"MH_LOGRESET"				// Reset manager's log
#define M_AES_SERVICE_CONNECT				"AES_SVC_CONNECT"		// Service is connected
#define	M_AD_REGSVC_CONNECT					"REGSVC_CONNECT"			// Service is connected
#define	M_AD_UNREGSVC_CONNECT				"UNREGSVC_CONNECT"			// Service is connected
#define	M_AD_SERVICE_IDENTIFY				"SERVICE_IDENTITY"			// Service is idenitied
#define	M_AES_SERVICE_DISCONNECT			"AES_SVC_DISCONNECT"		// Service is disconnected
#define	M_AD_SERVICE_DISCONNECT				"SVC_DISCONNECT"		// Service is disconnected
#define	M_MO_COMPINFO						"MO_COMPINFO"				// Component info
#define	M_MO_CONFIRM						"MO_CONFIRM"				// Confirm alive
#define	M_MO_MVARIABLE						"MO_MVARIABLE"				// Monitoring variable list
#define	M_MO_VARIABLE						"MO_VARIABLE"				// Monitor variable value
#define	M_MO_NOTPING						"MO_NOTPING"				// No service ping
#define	M_MO_HOSTNOTPING					"MO_HOSTNOTPING"			// No host ping
#define	M_MO_DELMV							"MO_DELMV"					// Delete monitor variable
#define	M_MO_ADDMV							"MO_ADDMV"					// Add monitor variable
#define	M_MO_PING							"MO_PING"					// Send ping
#define	M_MO_PONG							"MO_PONG"					// Send pong

/*****************************************************************************************************/
#define M_NT_LOGIN							"NT_LOGIN"					// Login
#define M_NT_LOGOUT							"NT_LOGOUT"					// Logout
#define M_CS_LOGOUT							"CS_LOGOUT"					// Logout
#define M_NTENTERROOM						"NT_ENTERROOM"				// Notify family enter room to FES
#define M_NTOUTROOM							"NT_OUTROOM"				// Notify family out room to FES
//#define M_NTCHANGEROOMCHANNEL				"NTCHANGEROOMCHANNEL"		// Notify family change room channel

// Family
#define M_CS_FAMILY							"CS_FAMILY"					// Request family info([b:bIsMobile])
#define M_SC_FAMILY							"SC_FAMILY"					// Family info([b:IsSystemUser][d:id][u:Name][b:IsMobile][d:ModelID][b:Level][d:Exp][b:FreeUsed][u:Comment][M1970:ServerTime])
#define M_CS_NEWFAMILY						"CS_NEWFAMILY"				// Create family([b:bIsMobile][u:Name][d:Model id][d:default dress id][d:Face id][d:Hair id][d:City])
#define M_SC_NEWFAMILY						"SC_NEWFAMILY"				// Response for creating family ([d:OK/Fail][d:Result code])
//#define M_CS_FAMILYCOMMENT					"CS_FAMILYCOMMENT"			// Set family comment([u:comment])
//#define M_SC_FAMILYCOMMENT					"SC_FAMILYCOMMENT"			// Response for M_CS_FAMILYCOMMENT([d:Result code][u:Comment])
#define M_SC_ALLCHARACTER					"SC_ALLCH"					// All of character info([d:FamilyId][b:Level][d:Exp][ <[d:CH id][u:CH name][d:Model id][d:default dress id][d:Face id][d:Hair id][s:creation time][b:Master][d:dress id][s:time changed dress][Date4:Birthday][d:City][u:Comment]> ]) 
//#define	M_CS_REQ_CHANGECH					"CS_REQ_CHANGECH"			// Ask change character, consume money
//#define	M_SC_REQ_CHANGECH					"SC_REQ_CHANGECH"			// Response for Ask change character [d:Result code]
#define	M_CS_CHCHARACTER					"CS_CHCHARACTER"			// Change character's property([d:CH id][d:Model id][d:Default dress id][d:Faceid][d:Hairid][d:City][u:CH name])
//#define	M_SC_CHCHARACTER					"SC_CHCHARACTER"			// Response ([d:Result code][d:CH id][d:Model id][d:default dress id][d:Faceid][d:Hairid][u:CH name])
#define	M_CS_CHANGE_CHDESC					"CS_CHANGE_CHDESC"			// Change character's description([d:CH id][Date4:Birthday][d:City][u:Comment])
//#define	M_SC_CHANGE_CHDESC					"SC_CHANGE_CHDESC"			// Response ([d:Result code][d:CH id])
//#define	M_CS_CHDESC							"CS_CHDESC"					// Request character's description([d:CH id])
//#define	M_SC_CHDESC							"SC_CHDESC"					// Character description ([d:CH id][CH desc])
#define	M_NT_CHANGE_NAME					"NT_CHANGE_NAME"			// Notice that character's name changed to OROOM & LOBBY ([d:FID][u:Family name][d:ModelID])	Lobby->ORoom, RRoom, Lobby, FS, WS

#define M_CS_USERLIST						"CS_USERLIST"				// Request User List
#define M_SC_USERLIST						"SC_USERLIST"				// Send User List ([ [d:FID][u:FamilyName][b:IsMobile][d:ModelID] ])

#define M_CS_SET_FAMILY_FIGURE				"CS_SET_FAMILY_FIGURE"		// Set Family Figure ([d:FigureID][b:SecretFlag])
#define M_CS_GET_FAMILY_FIGURE				"CS_GET_FAMILY_FIGURE"		// Request Family Figure ([d:targetFID])
#define M_SC_FAMILY_FIGURE					"SC_FAMILY_FIGURE"			// Send Family Figure ([d:FID][d:FigureID] <[b:SecretFlag]>) : SecretFlag exist if own FID

//#define M_CS_SET_FAMILY_FACEMODEL				"CS_SET_FAMILY_FACEMODEL"	// Set Family FaceModel ([d:ModelID][b:SecretFlag])
//#define M_CS_GET_FAMILY_FACEMODEL				"CS_GET_FAMILY_FACEMODEL"	// Request Family FaceModel ([d:targetFID])
//#define M_SC_FAMILY_FACEMODEL					"SC_FAMILY_FACEMODEL"			// Send Family FaceModel ([d:FID][d:ModelID] <[b:SecretFlag]>) : SecretFlag exist if own FID

// 체험방관련
#define M_NT_EXPROOM_INFO_CHANGED			"NT_EXPROOM_INFO_C"			// 방정보갱신통지
#define M_NT_EXPROOM_INFO_RELOAD			"NT_EXPROOM_INFO_R"			// 방의 정보를 reload한다. [d:RoomID]
//#define M_CS_EXPROOMS						"CS_EXPROOMS"				// Request for experience rooms
#define M_SC_EXPROOM_GROUP					"SC_EXPROOM_GROUP"			// Send ExpRoom Groups [ [w:GroupID][u:GroupName][b:GroupIndex] ]
#define M_SC_EXPROOMS						"SC_EXPROOMS"				// Send ExpRoom List [b:flagStart][ [w:GroupID][d:PhotoID][b:RoomIndex][d:Room ID][w:Room kind][u:name][u:masterName][d:familyId][d:visitCount][b:openFlag][b:PhotoType][u:Dead name1][b:Dead surnamelen1][u:Dead name2][b:Dead surnamelen2] ][b:flagEnd]

#define M_GMCS_EXPROOM_GROUP_ADD			"GMCS_EXPROOM_GROUP_ADD"	// Add a ExpRoom Group ([u:GroupName][b:GroupIndex][w:GroupID])
//#define M_GMSC_EXPROOM_GROUP_ADD			"GMSC_EXPROOM_GROUP_ADD"	// Response for M_GMCS_EXPROOM_GROUP_ADD ([b:GroupIndex][w:GroupID])
#define M_GMCS_EXPROOM_GROUP_MODIFY			"GMCS_EXPROOM_GROUP_MODIFY"	// Modify ExpRoom Group's Info ([w:GroupID][u:GroupName][b:GroupIndex])
#define M_GMCS_EXPROOM_GROUP_DELETE			"GMCS_EXPROOM_GROUP_DELETE"	// Delete a ExpRoom Group ([w:GroupID])
#define M_GMCS_EXPROOM_ADD					"GMCS_EXPROOM_ADD"			// Add a ExpRoom ([d:RoomID][w:GroupID][b:RoomIndex][d:PhotoID])
#define M_GMCS_EXPROOM_MODIFY				"GMCS_EXPROOM_MODIFY"		// Modify ExpRoom's Info ([d:RoomID][w:GroupID][b:RoomIndex][d:PhotoID])
#define M_GMCS_EXPROOM_DELETE				"GMCS_EXPROOM_DELETE"		// Delete a ExpRoom ([d:RoomID])
//#define M_GMCS_EXPROOMDATA					"GMCS_EXPROOMDATA"			// [d:roomid]
//#define M_GMSC_EXPROOMDATA					"GMSC_EXPROOMDATA"			// [b:result][d:roomid]
//??#define M_GMCS_GETEXPROOM					"GMCS_GETEXPROOM"			//
//??#define M_GMSC_GETEXPROOM					"GMSC_GETEXPROOM"			// [[d:id][d:index][u:name]]

// TopList기능
//#define M_CS_TOPLIST                        "CS_TOPLIST"                // Request for TopList
#define	M_SC_TOPLIST_ROOMEXP				"SC_TOPLIST_ROOMEXP"		// List of TopList's RoomExp [b:flagStart][ [d:Room ID][w:SceneID][u:RoomName][u:masterName][d:familyId][d:visitCount][b:Level][d:Exp][b:openFlag][b:PhotoType][b:Dead surnamelen1][u:Dead name1][b:Dead surnamelen2][u:Dead name2] ][b:flagEnd]
#define	M_SC_TOPLIST_ROOMVISIT				"SC_TOPLIST_ROOMVISIT"		// List of TopList's RoomVisit [b:flagStart][ [d:Room ID][w:SceneID][u:RoomName][u:masterName][d:familyId][d:visitCount][b:Level][d:Exp][b:openFlag][b:PhotoType][b:Dead surnamelen1][u:Dead name1][b:Dead surnamelen2][u:Dead name2] ][b:flagEnd]
#define	M_SC_TOPLIST_FAMILYEXP				"SC_TOPLIST_FAMILYEXP"		// List of TopList's FamilyExp [b:flagStart][ [d:FID][u:FamilyName][b:Sex][d:City][b:Level][d:Exp] ][b:flagEnd]

#define M_CS_FPROPERTY_MONEY				"CS_FPROPERTY_MONEY"		// [b:bForce] Request Family's money refresh from main DB.
#define M_SC_FPROPERTY_MONEY				"SC_FPROPERTY_MONEY"		// Family's property([d:GMoney]<d:UMoney>)
#define M_SC_FPROPERTY_LEVEL				"SC_FPROPERTY_LEVEL"		// Family's property([d:Exp])

//#define M_CS_ROOMFAMILYCOMMENT				"CS_ROOMFAMILYCOMMENT"		// Request family comment in room([d:Family id])
//#define M_SC_ROOMFAMILYCOMMENT				"SC_ROOMFAMILYCOMMENT"		// Response for M_CS_ROOMFAMILYCOMMENT([d:Family id][u:Comment])
#define	M_CS_REQ_FAMILYCHS					"CS_REQ_FAMILYCHS"			// Request ch info of family([d:FamilyId])

// Money
#define M_SC_MONEY_DEFICIT					"DEFICIT"					// Money deficit ([d:Real money][d:Game money])
//#define M_SC_MONEY							"MONEY"						// Money info of family ([d:Real money][d:Game money])

// Inventory
#define M_SC_FAMILYITEM						"SC_FAMILYITEM"				// Family's Invens' infomation([d:SyncCode][ [w:Inven position][d:subtypeid][w:Count][q:Getting time][d:Using CH id][b:MoneyType] ])
#define M_CS_INVENSYNC						"CS_INVENSYNC"				// Inven [d:SyncCode][b:ReqType][b:count][b:DelCount][[w:Inven position][w:Item Count][d:subtypeid][q:Getting time][d:Using CH id][b:MoneyType]][[w:Item Count][d:subtypeid][q:Getting time][b:MoneyType][b:DelType]], ItemCount가 0이면 subtypeid 뒤부분의 자료는 없다.
#define M_SC_INVENSYNC						"SC_INVENSYNC"				// [d:SyncCode][d:Result Code][[w:Inven position][q:Get Time]]
//#define M_CS_FITEMPOS						"CS_FITEMPOS"				// Change item position([w:Old pos][w:New pos])
//#define M_SC_FITEMPOS						"SC_FITEMPOS"				// Response for M_CS_FITEMPOS([w:Old pos][w:New pos][b:moveItemNum])
#define	M_CS_BUYITEM						"CS_BUYITEM"				// Buy item([b:MoneyType,1:UMoney,2:Point][b:Number][ [w:Inven pos][d:Item id][w:Count] ])
#define	M_SC_BUYITEM						"SC_BUYITEM"				// Response for M_CS_BUYITEM([d:Result code])
#define	M_SC_SETINVEN						"SC_SETINVEN"				// Set inventory( [[w:Inven pos][b:1-delete,0-add, 2-trim][d:subtypeid][w:count][q:Getting time][d:Using CH id][b:MoneyType]] )
#define	M_SC_SETINVENNUM					"SC_SETINVENNUM"			// Set inventory item count( [[w:Inven pos][w:count]])
//#define	M_CS_USEITEM						"CS_USEITEM"				// Put on dress([w:Inven pos][d:CH id])
//#define M_SC_CHDRESS						"SC_CHDRESS"				// Set character dress([d:CH id][d:Dress id])
//#define	M_CS_THROWITEM						"CS_THROWITEM"				// Throw item([w:Inven pos][w:Count])

//#define M_CS_TIMEOUT_ITEM					"CS_TIMEOUT_ITEM"			// Item timeout ([b:Number][ [w:InvenPos] ])
//#define M_SC_TIMEOUT_ITEM					"SC_TIMEOUT_ITEM"			// Item timeout ([ [d:ItemID][w:ItemCount][w:InvenPos] ])

//#define M_CS_TRIMITEM                       "CS_TRIMITEM"               // Request trim family's items (None)
//#define M_SC_TRIMITEM                       "SC_TRIMITEM"               // Response for M_CS_TRIMITEM (None)

//// Bank Items
//#define M_SM_BANKITEM_GET_NUSER				"SM_BANKITEM_GET_NUSER"		// Request for Get NewUser's BankItem ()
//#define M_CS_BANKITEM_LIST					"CS_BANKITEM_LIST"			// Request for BankItem List ()
//#define M_SC_BANKITEM_LIST					"SC_BANKITEM_LIST"			// Response of M_CS_BANKITEM_LIST ([b:Count][[d:IndexID][d:ItemID][d:ItemCount]])
//#define M_CS_BANKITEM_GET					"CS_BANKITEM_GET"			// Get BankItem ([b:Count][[d:IndexID][d:ItemID][d:ItemCount]])
//#define	M_MS_BANKITEM_GET					"MS_BANKITEM_GET"			// Response of M_SM_BANKITEM_GET_NUSER & M_CS_BANKITEM_GET ([b:Count][[d:IndexID][d:ItemID][d:ItemCount]])
//#define M_SM_BANKITEM_GET_FAIL				"SM_BANKITEM_GET_FAIL"		// Notice to Main when GetBankItem fail. ({[d:UserID][b:Count][[d:IndexID][d:ItemCount]]})

// 기념일활동관련
#define M_MS_CURRENT_ACTIVITY				"MS_REQ_CURRENT_ACTIVITY"	// LS에서 WS에 현재의 기념일활동자료를 보낸다. ([d:ActID][u:Text][b:Count][ [d:ItemID][b:ItemCount] ])
#define M_NT_CURRENT_ACTIVITY				"NT_REQ_CURRENT_ACTIVITY"	// WS에서 WorldService,MS에 현재의 기념일활동자료를 보낸다. ([d:ActID][u:Text][b:Count][ [d:ItemID][b:ItemCount] ])
#define M_SM_CHECK_USER_ACTIVITY			"SM_CHECK_USER_ACTIVITY"	// MS->WS->LS, 사용자가  기념일활동아이템을 받았는지 자료를 요청한다. ([d:UserID][d:FID])
#define M_MS_CHECK_USER_ACTIVITY			"MS_CHECK_USER_ACTIVITY"	// LS->WS->MS, M_SM_CHECK_USER_ACTIVITY에 대한 응답이다. ([d:FID][d:LastActID])
#define M_SC_CURRENT_ACTIVITY				"SC_CURRENT_ACTIVITY"		// Send Current Activity Data ([d:ActID][u:Text][b:Count][ [d:ItemID][b:ItemCount] ])
#define M_CS_REQ_ACTIVITY_ITEM				"CS_REQ_ACTIVITY_ITEM"		// Request current activity items (Attention!! Client must check inven)
//#define M_NT_REQ_ACTIVITY_ITEM				"NT_REQ_ACTIVITY_ITEM"		// MS->WorldService, 사용자에게 기념일활동아이템을 줄것을 통지한다. ([d:FID])
#define M_SM_SET_USER_ACTIVITY				"SM_SET_USER_ACTIVITY"		// WorldService->WS->LS, 사용자가  기념일활동아이템을 받기를 요청. ([d:UserID][FID][d:ActID])
#define M_MS_SET_USER_ACTIVITY				"MS_SET_USER_ACTIVITY"		// LS->WS->WorldService, 사용자가  기념일활동아이템 받기 요청에 대한 응답 ([d:FID])

// 시작사용자아이템
#define M_MS_BEGINNERMSTITEM				"MS_BEGINNERMSTITEM"		// LS에서 WS에 새사용자선물아이템자료를 보낸다. ([d:GiftID][u:Title][u:Content][b:Count][ [d:ItemID][b:ItemCount] ])
#define M_NT_BEGINNERMSTITEM				"NT_BEGINNERMSTITEM"		// WS에서 서비스들에 새사용자선물아이템자료를 보낸다. ([d:GiftID][u:Title][u:Content][b:Count][ [d:ItemID][b:ItemCount] ])
#define M_SM_CHECK_BEGINNERMSTITEM			"SM_CHECK_BEGINNERMSTITEM"	// MS->WS->LS, 사용자가  새사용자아이템을 받았는지 자료를 요청한다. ([d:UserID][d:FID])
#define M_MS_CHECK_BEGINNERMSTITEM			"MS_CHECK_BEGINNERMSTITEM"	//  LS->WS->MS, M_SM_CHECK_BEGINNERMSTITEM에 대한 응답이다. ([d:FID])
#define M_SC_GIFTITEM						"SC_GIFTITEM"				// Send gift item([d:GiftId][u:Title][u:Content][b:Count][ [d:ItemID][b:ItemCount] ])
#define M_CS_RECV_GIFTITEM					"CS_RECV_GIFTITEM"			// Receive gift item([d:GiftId])
//#define M_NT_RECV_GIFTITEM					"NT_RECV_GIFTITEM"			// MS->WorldService, 사용자에게 새사용자아이템을 줄것을 통지한다. ([d:FID])
#define M_SM_SET_USER_BEGINNERMSTITEM		"SM_SET_USER_BEGINNERMSTITEM" // WorldService->WS->LS, 사용자가  새사용자아이템을 받기를 요청. ([d:UserID][d:FID])
#define M_MS_SET_USER_BEGINNERMSTITEM		"MS_SET_USER_BEGINNERMSTITEM" // LS->WS->WorldService, 사용자가  새사용자아이템을 받았음을 설정한다. ([d:FID])

// Lobby
//#define M_CS_REQUEST_LOBBYS					"CS_REQUEST_LOBBYS"			// Request Lobby list(None)
//#define M_SC_LOBBYS							"SC_LOBBYS"					// Lobby list([d:count][[d:lobby id][d:user count][d:ENUM_LOBBYSTATE][u:LobbyName]])
//#define M_CS_REQ_ENTERLOBBY					"CS_REQ_ENTERLOBBY"			// Request entering lobby([d:Room id])
//#define M_SC_REQ_ENTERLOBBY					"SC_REQ_ENTERLOBBY"			// Response for M_CS_REQ_ENTERLOBBY([d:Room id][d:Result code])
#define M_CS_ENTER_LOBBY					"CS_ENTER_LOBBY"			// Enter lobby(None)
#define M_SC_ENTER_LOBBY					"SC_ENTER_LOBBY"			// ([d:error code])
//#define M_SC_WAIT_ENTERLOBBY				"SC_WAIT_ENTERLOBBY"		// ([d:Lobby ID][d:user count + 1: if this value is 0, can enter lobby])
#define M_CS_CANCEL_WAITLOBBY				"CS_CANCEL_WAITLOBBY"		// Cancel wait enter lobby([d:Lobby id])
#define M_CS_LEAVE_LOBBY					"CS_LEAVE_LOBBY"			// Leave lobby(None)
#define M_SC_LEAVE_LOBBY					"SC_LEAVE_LOBBY"			// Response for M_CS_LEAVE_LOBBY([d:error code])
#define M_NT_QUERY_LOBBY					"NT_QUERY_LOBBY"			// Query which service is lobby manager (None), and lobbys
#define M_NT_LOBBY							"NT_LOBBY"					// Notify which service is lobby manager (None)
//#define M_NT_NEW_LOBBY						"NT_NEW_LOBBY"				// ([d:Lobby ID])
//#define M_NT_DEL_LOBBY						"NT_DEL_LOBBY"				// ([d:Lobby ID])
#define M_NT_LEAVE_LOBBY					"NT_LEAVE_LOBBY"			// ([d:Family Id][d:Lobby ID])
#define M_NT_SHARD_LOBBYS					"SHARD_LOBBYS"				// ([[d:lobby id][d:ENUM_LOBBYSTATE]])
#define M_SC_CELL_IN						"SC_CELL_IN"				// Add player([d:Room id][d:Family id][u:Family Name][b:level][ [d:CH id][u:CH Name][d:Model id][d:default dress id][d:Face id][d:HairId][d:Dress id][CH state] ])
#define M_SC_CELL_OUT						"SC_CELL_OUT"				// Del player([d:Room id][[d:CH id]])

#define M_NT_ROOM							"NT_ROOM"					// [d:RoomID][b:flag, 1:Create, 0:Delete] Notify that roomworld is created or destroyed from OpenRoomService to FS

// If you modify this, you must modify M_SC_SETROOMMASTER
#define M_SC_OWNROOM						"SC_OWNROOM"				// List of my room( [b:flagStart][...[d:Room id][w:Room kind][M1970:CreationTime][M1970:Term time][M1970:RenewTime][u:Name][b:OpenFlag][s:OpenPWD][b:FreeFlag][d:VisitCount][u:Comment][d:DeleteRemainMinutes][d:HisSpaceSize][d:HisSpaceUsed][d:Exp][d:curGiveFID][d:M1970-curGiveTime][b:PhotoType][u:Dead name1][b:Dead surnamelen1][d:BirthDate1][d:DeadDate1][u:Dead name2][b:Dead surnamelen2][d:BirthDate2][d:DeadDate2][d:SamePromotionCount] ][b:flagEnd])
#define M_CS_NEWROOM						"CS_NEWROOM"				// Create room([w:RoomPriceID])
#define M_SC_NEWROOM						"SC_NEWROOM"				// Response for M_CS_NEWROOM([d:Result code][d:Room id][w:RoomPriceID][d:AddUMoney])
#define M_CS_DELROOM						"CS_DELROOM"				// Delete room([d:Room id])
#define M_SC_DELROOM						"SC_DELROOM"				// [d:Result code]<[d:Room id][d:DeleteDay]>
#define M_CS_UNDELROOM						"CS_UNDELROOM"				// Delete room([d:Room id])
#define M_SC_UNDELROOM						"SC_UNDELROOM"				// Response for M_CS_DELROOM([d:Result code][d:Room id])
#define M_CS_RENEWROOM						"CS_RENEWROOM"				// Renew room ([d:Room id][w:RoomPriceID])
#define M_SC_RENEWROOM						"SC_RENEWROOM"				// Response for M_CS_RENEWROOM([d:Result code][d:Room id])

//감은원날자연기
//#define M_CS_PROLONG_PASS					"CS_PROLONG_PASS"			// ([d:RoomID])
//#define M_SC_PROLONG_PASS					"SC_PROLONG_PASS"			// ([d:Result][d:RoomID][d:M1970])

#define M_NT_ROOM_RENEW						"NT_ROOM_RENEW"				// Notice to ORoomService that room renewed. ([d:RoomID][s:TermTime])
#define M_NT_RELOAD_ROOMINFO				"NT_RELOAD_ROOMINFO"		// Notice that reload room info because of Auditing Error ([RoomID])

// Room Promotion
#define M_CS_PROMOTION_ROOM					"CS_PROMOTION_ROOM"			// Promotion room([d:Room id][w:Scene id][w:PriceID])
#define M_SC_PROMOTION_ROOM					"SC_PROMOTION_ROOM"			// Response for M_CS_PROMOTION_ROOM([d:Result code][d:Room id][w:RoomPriceID][d:AddUMoney])
#define M_CS_GET_PROMOTION_PRICE			"CS_GET_PROMOTION_PRICE"	// Get Promotion price([d:Room id][w:Scene id][b:ToUnlimited]) 방을 무한연장할 때와 일반승급할때, 승급무한연장할 때 3가지 경우 리용된다.
#define M_SC_PROMOTION_PRICE				"SC_PROMOTION_PRICE"		// Response for M_CS_GET_PROMOTION_PRICE([d:Result code][d:Room id][w:Scene id][b:ToUnlimited][d:Price][w:Last Old RoomKind])

// 천원카드관리
//#define M_CS_ROOMCARD_CHECK					"CS_ROOMCARD_CHECK"			// Check Tianyuan Card ([s:CardID][s:CardPWD])
//#define M_SC_ROOMCARD_CHECK					"SC_ROOMCARD_CHECK"			// Check Tianyuan Card Result ([d:ErrorCode][w:Room price ID])
#define M_CS_ROOMCARD_NEW					"CS_ROOMCARD_NEW"			// Use Tianyuan Card New Room ([s:CardID])
//#define M_CS_ROOMCARD_RENEW					"CS_ROOMCARD_RENEW"			// Use Tianyuan Card Renew ([s:CardID][s:CardPWD][d:RoomID])
#define M_CS_ROOMCARD_PROMOTION				"CS_ROOMCARD_PROMOTION"		// Use Tianyuan Card Promotion ([d:RoomID][s:CardID])

//#define M_SM_ROOMCARD_CHECK					"SM_ROOMCARD_CHECK"			// Check Tianyuan Card ([d:FID][b:flag,0-Check,1-new,2-renew,3-promotion][d:RoomID][s:CardID])
//#define M_MS_ROOMCARD_CHECK					"MS_ROOMCARD_CHECK"			// Check Tianyuan Card Result ([d:ErrorCode][w:CardType][d:FID][b:flag,0-Check,1-new,2-renew,3-promotion][d:RoomID][s:CardID])
#define M_SM_ROOMCARD_USE					"SM_ROOMCARD_USE"			// Use Tianyuan Card ([d:FID][d:UserID][s:CardID][s:UserIP][d:RoomID,0-New, Not 0-Promotion][w:LobbyService])
#define M_MS_ROOMCARD_USE					"MS_ROOMCARD_USE"			// Use Tianyuan Card  Result([d:FID][s:CardID][d:RoomID,0-New, Not 0-Promotion][d:ErrorCode][w:CardType])

// 방양도
#define	M_CS_CHANGEMASTER					"CS_CHANGEMASTER"			// Give room([d:Room id][d:toFID][s:TwoPassword])
#define	M_SC_CHANGEMASTER					"SC_CHANGEMASTER"			// Response for M_CS_CHANGEMASTER([d:Result code][d:Roomid][d:toFID])
#define	M_CS_CHANGEMASTER_CANCEL			"CS_CHANGEMASTER_CANCEL"	// Cancel giveroom (by timeout, etc...) ([d:Room id][d:toFID])
#define	M_SC_CHANGEMASTER_REQ				"SC_CHANGEMASTER_REQ"		// Notice that another user give you a room ([d:RoomID][w:SceneID][u:RoomName][d:fromFID][u:fromFamilyName][d:M1970-curGiveTime])
#define	M_CS_CHANGEMASTER_ANS				"CS_CHANGEMASTER_ANS"		// Answer of M_SC_CHANGEMASTER_REQ ([d:Room id][b:Answer, 1:Yes,0:No,2:Timeout])
// If you modify this, you must modify M_SC_OWNROOM
#define M_SC_SETROOMMASTER					"SC_SETROOMMASTER"			// Set room master([d:Room id][w:Room kind][M1970:CreationTime][M1970:Term time][M1970:RenewTime][u:Name][b:OpenFlag][s:OpenPWD][b:FreeFlag][b:State][d:VisitCount][u:Comment][b:DeletedFlag][d:HisSpaceSize][d:HisSpaceUsed][b:Level][d:Exp][b:PhotoType][u:Dead name1][b:Dead surnamelen1][d:BirthDate1][d:DeadDate1][u:Dead name2][b:Dead surnamelen2][d:BirthDate2][d:DeadDate2][d:SamePromotionCount])
#define M_NT_CHANGEMASTER_FORCE				"NT_CHANGEMASTER_FORCE"		// Change room master Force, ([d:RoomID][d:NewMasterFID])

#define M_CS_FINDROOM						"CS_FINDROOM"				// Search room([b:Flag][w:Page pos][w:Count per page][u:Room ID/Room name/Dead name])
#define M_SC_FINDROOMRESULT					"SC_FINDROOMRES"			// ([d:Result code][b:Flag][u:Room ID/Room name/Dead name][d:TotalCount][w:Page pos][ [d:Room id][b:Level][d:Exp][d:Family id][w:Room kind][u:Name][b:Open flag][u:Master name][d:VisitCount][M1970:Term time][b:PhotoType][u:Dead Name1][b:Dead Surnamelen1][b:DeadSex1][u:Domicile1][u:Nation1][Date4:Birthday1][Date4:DeadDay1][u:Dead Name2][b:Dead Surnamelen2][b:DeadSex2][u:Domicile2][u:Nation2][Date4:Birthday2][Date4:DeadDay2] ])

//#define M_SC_FAVORROOMGROUP					"SC_FAVORROOMGROUP"			// Send favorites room Group List [b:GroupCount][ [d:GroupId][u:Group name] ]
//#define M_SC_FAVORROOM						"SC_FAVORROOM"				// Send my favorites room list ([b:Count][[w:Room kind][d:Room id][d:Family id][b:Open flag][u:Name][u:Master name][M1970:ExpireTime][d:DeleteRemainMinutes][b:Level][d:Exp][d:VisitCount][b:PhotoType][u:DeadName1][b:DeadSurnamelen1][u:DeadName2][b:DeadSurnamelen2][M1970:GetTime]])
#define M_SC_FAVORROOM_AUTODEL				"SC_FAVORROOM_AUTODEL"		// Send that favorite room deleted because roommaster delete that. ([ [d:RoomID][u:RoomName] ])
#define M_CS_INSFAVORROOM					"CS_INSFAVORROOM"			// Add favorite room([d:GroupID][d:Room ID])
#define M_CS_DELFAVORROOM					"CS_DELFAVORROOM"			// Delete favorite room([d:Room ID])
#define M_CS_MOVFAVORROOM					"CS_MOVFAVORROOM"			// Move favorite room to other group([d:Room ID][d:OldGroupID][d:NewGroupID])
#define M_CS_NEW_FAVORROOMGROUP				"CS_NEW_FAVORROOMGROUP"		// Request create new favorite room group [u:GroupName][d:GroupID]
#define M_CS_DEL_FAVORROOMGROUP				"CS_DEL_FAVORROOMGROUP"		// Request delete a favorite room group [d:GroupID]
#define M_CS_REN_FAVORROOMGROUP				"CS_REN_FAVORROOMGROUP"		// Request rename a favorite room group [d:GroupID][u:GroupName]

#define M_CS_REQ_FAVORROOM_INFO				"CS_REQ_FAVORROOM_INFO"		// Request FavorRoom's Info ([d:RoomCount][[d:RoomID]])
#define M_NT_REQ_FAVORROOM_INFO				"NT_REQ_FAVORROOM_INFO"		// Request FavorRoom's Info ([w:fsSid][d:FID][d:RoomCount][[d:RoomID]])
#define M_SC_FAVORROOM_INFO					"SC_FAVORROOM_INFO"			// Send my favorites room info ([b:Count][[w:Room kind][d:Room id][d:Family id][b:Open flag][u:Name][u:Master name][M1970:ExpireTime][d:DeleteRemainMinutes][b:Level][d:Exp][d:VisitCount][b:PhotoType][u:DeadName1][b:DeadSurnamelen1][u:DeadName2][b:DeadSurnamelen2]])
//#define M_CS_REQ_ROOMORDERINFO				"CS_REQ_ROOMORDERINFO"		// Request RoomOrderInfo
#define M_SC_ROOMORDERINFO					"SC_ROOMORDERINFO"		// ([d:groupcount][[d:groupid][d:roomcount][[d:roomid]]])
#define M_CS_ROOMORDERINFO					"CS_ROOMORDERINFO"		// ([d:groupid][d:roomcount][[d:roomid]])

#define	M_CS_SETROOMINFO					"CS_SETROOMINFO"			// Set room info([d:Room id][u:Name][b:Open flag][u:Comment][s:AuthKey])
//#define	M_SC_SETROOMINFO					"SC_SETROOMINFO"			// ([d:result code][d:�방id][u:Name][b:Open flag][u:Comment])
//#define	M_CS_SETROOMPWD						"CS_SETROOMPWD"				// Change room password ([d:Room id][d:OldPwd][d:NewPwd])
//#define	M_SC_SETROOMPWD						"SC_SETROOMPWD"				// [d:Result code]

#define	M_SC_MSTROOM						"SC_MSTROOM"				// List of all room price info([w:Room price ID][w:Room kind][d:Price][b:Term time-year][b:Term time-month][b:Term time-day][d:Discount rate][d:His Space])
#define	M_SC_MSTITEM						"SC_MSTITEM"				// List of all item([ [d:Sub id][d:Game money][d:Discount rate][d:Real money][d:Discount rate][d:AddPoint][w:Inc exp][w:Inc virtue][w:Inc fame][d:Used time][d:Term time][b:겹침기발][w:Overlap count][d:ItemLevel] ])
#define	M_SC_MSTHISSPACE					"SC_MSTHISSPACE"			// List of all his space([ [d:ID][d:SpaceCapacity][d:Game money][d:Discount rate][d:Real money][d:Discount rate][d:AddPoint] ])
#define	M_SC_MSTROOMLEVELEXP				"SC_MSTROOMLEVELEXP"		// List of all room level's exp ([ [b:RoomLevel][d:RoomExp] ])
#define	M_SC_MSTFAMILYLEVELEXP				"SC_MSTFAMILYLEVELEXP"		// List of all family level's exp ([ [b:FamilyLevel][d:FamilyExp] ])
#define	M_SC_MSTCONFIG						"SC_MSTCONFIG"				// Config Datas ([d:ChangeChMoney][d:SamePromotionPrice-동급천원승급시에만 적용][d:SamePromotionCount-동급천원승급시에만 적용])

//#define	M_CS_BESTSELLITEM					"CS_BESTSELLITEM"			// Request BestSell Item List
#define	M_SC_BESTSELLITEM					"SC_BESTSELLITEM"			// Send BestSell Item List ([d:ItemID])

// Contact
//#define M_SC_MYCONTGROUP					"SC_MYCONTGRP"				// Send Friend Group List [b:Count][ [d:GroupId][u:Group name] ]
//#define M_SC_MYCONTLIST						"SC_MYCONTLIST"				// Send Friend List [b:Count][b:finished][ [d:GroupId][d:FamilyId][u:FamilyName][d:Index][b:Low4bit = OnlineState, High4bit = bIsMobile][d:OneselfState] ]
#define M_CS_ADDCONTGROUP					"CS_ADDCG"					// Add contact group([u:Name][d:GroupId])
//#define M_SC_ADDCONTGROUP					"SC_ADDCG"					// ([d:Result code][d:GroupId])
#define M_CS_DELCONTGROUP					"CS_DELCG"					// Delete contact group([d:GroupId])
//#define M_SC_DELCONTGROUP					"SC_DELCG"					// ([d:Result code])
#define M_CS_RENCONTGROUP					"CS_RENCG"					// Change contact group name([d:GroupId][u:new Group name])
//#define M_SC_RENCONTGROUP					"SC_RENCG"					// ([d:Result code])
#define M_CS_SETCONTGROUP_INDEX				"CS_CG_INDEX"				// Set contact group index([b:Count][ [d:GroupId] ])
//#define M_SC_SETCONTGROUP_INDEX				"SC_CG_INDEX"				// ([d:Result code])

#define M_CS_ADDCONT						"CS_ADDCONT"				// Add contact([d:FamilyId][d:GroupId][d:NewIndex])
#define M_SC_FAMILY_MODEL					"SC_FAMILY_MODEL"			// Notice contact's ModelID([d:FamilyId][d:ModelID])
#define M_CS_DELCONT						"CS_DELCONT"				// Delete contact([d:ContactFamilyId])
#define M_CS_CHANGECONTGRP					"CS_CHCONTGRP"				// Change contact's group [d:Count][ [d:ContactId][d:NewGroupId][d:NewIndex] ]
#define M_NT_REQ_FAMILY_INFO				"NT_REQ_FAMILY_INFO"		// Request Family Info for AddCont ([d:friendFID][d:FID][d:GroupID][d:FriendIndex])
#define M_NT_ANS_FAMILY_INFO				"NT_ANS_FAMILY_INFO"		// Response of M_NT_REQ_FAMILY_INFO ([d:friendFID][d:FID][d:GroupID][d:FriendIndex][d:friendUserID][d:friendModelID])

//#define	M_CS_CONTFAMILY						"CS_CONTFAMILY"				// Request contact family info([d:Contact ID])
//#define	M_SC_CONTFAMILY						"SC_CONTFAMILY"				// Response for M_CS_CONTFAMILY([d:Result code][d:Family ID][u:Family name][d:Exp][w:Virtue][w:Fame][b:Level][ [d:CH id][u:CH name][d:Model id][d:default dress id][d:Faceid][d:HairId][d:Dress id][u:Comment] ])

#define M_CS_FINDFAMILY						"CS_FINDFAMILY"				// Search family([b:Flag(0:Id,1:Name)][w:Page pos][w:Count per page][u:FamilyId/Family name])
#define M_SC_FINDFAMILY						"SC_FINDFAMILY"				// ([d:Result code][b:Flag(0:Id,1:Name)][u:FamilyId/Family name][d:TotalCount][w:Page pos][[u:Name][d:Family id][d:CharacterID][d:ModelID][b:FamilyLevel][Date4:Birthday][d:City][b:Low4bit=online, High4bit=bIsMobile]])

#define M_CS_SELFSTATE						"CS_SELFSTATE"				// Set own session state([d:State])
#define M_SC_CONTSTATE						"SC_CONTSTATE"				// Notify contact's session state([[d:Contact ID][b:Low4bit=OnlineState, High4bit=bIsMobile][d:State]])
//#define M_SELFSTATE							"SS_SELFSTATE"				// Set own session state([d:State])(Between one service and other service)

// Room Enter & Out
#define M_CS_REQEROOM						"CS_REQEROOM"				// Request entering room([d:Room id][s:AuthKey][d:ChannelID] + [w:ClientFSSid][b:Master'sFriendStatus]) ChannelID는 특별한 용도에 사용됨 (집체행사초청인경우)
#define M_SC_REQEROOM						"SC_REQEROOM"				// ([d:Result code][d:Room id][w:Room kind])
#define M_CS_CHANNELLIST					"CS_CHANNELLIST"			// Request room's channel list([d:Room id][b:bSpecialChannel])
#define M_SC_CHANNELLIST					"SC_CHANNELLIST"			// ([d:Room id][[d:ChannelID][b:ChannelStatus, 1:Smooth,2:Complex,3:Full]])
#define M_CS_ENTERROOM						"CS_ENTERROOM"				// Enter room([d:Room id][d:ChannelID][d:CH id][d:Dir][d:X][d:Y][d:Z])
#define M_SC_ENTERROOM						"SC_ENTERROOM"				// Response for M_CS_ENTERROOM([d:Room id][d:ChannelID][d:CH id][d:Enter code])
#define M_CS_CHANGECHANNELOUT				"CS_CHANGECHANNELOUT"		// Out Channel in room()
#define M_CS_CHANGECHANNELIN				"CS_CHANGECHANNELIN"		// In Channel in room([d:ChannelID][d:CH id][d:Dir][d:X][d:Y][d:Z])
#define M_SC_CHANGECHANNELIN				"SC_CHANGECHANNELIN"		// Response for M_CS_CHANGECHANNELIN([d:ChannelID][d:CH id][d:Enter code])
#define M_SC_CHANNELCHANGED					"SC_CHANNELCHANGED"			// Notice that room's channel changed. ([d:ChannelID][b:Add-1,Del-0])
#define M_SC_NEWENTER						"SC_NEWENTER"				// Notify new entered family([d:Room id][d:Family id][u:Family Name][b:level][d:Exp][w:RoomCount][b:bIsMobile][ [d:CH id][u:CH Name][d:Model id][d:default dress id][d:Faceid][d:HairId][d:Dress id][CH state] ])
#define M_CS_OUTROOM						"CS_OUTROOM"				// Out room(None)
#define M_SC_OUTROOM						"SC_OUTROOM"				// Response for M_CS_OUTROOM([d:Room id][d:Family id])
#define M_SC_FORCEOUTROOM					"SC_FORCEOUTROOM"			// Out room by force([d:Room id][d:Family id])
#define M_SC_ALLINROOM						"SC_ALLINROOM"				// All character in room([d:Room id][ [d:Family id][u:Family name][b:Level][d:Exp][w:RoomCount][b:bIsMobile][b:CH count][ [d:CH id][u:CH name][d:model id][d:default dress id][d:Faceid][d:HairId][d:Dress id][CH state][b:Show property] ] ])
//#define	M_SC_ROOMTERMTIME					"SC_ROOMTERMTIME"			// Change term time([d:Room id][s:Term time])
#define M_CS_CANCELREQEROOM					"CS_CANCELREQEROOM"			// Cancel request entering room([d:Room id])
// 
#define M_CS_STATECH						"CS_STATECH"				// Set character state([b:CH count][ [[d:CH id]][CH state] ])
#define M_SC_STATECH						"SC_STATECH"				// Notify character state([d:Room id][[d:Family id][b:CH count][ [[d:CH id]][CH state] ]])
//#define M_NT_STATECH						"NT_STATECH"				// Notify character state(Between FES and FES)
#define M_CS_ACTION							"CS_ACTION"					// Set character Action([d:ActionID][d:TargetFID])
#define M_SC_ACTION							"SC_ACTION"					// Notify character Action([d:FID][d:ActionID][d:TargetFID])
#define M_CS_MOVECH							"CS_MOVECH"					// Character move([b:CH count][ [d:CH id][d:X][d:Y][d:Z] ])
#define M_SC_MOVECH							"SC_MOVECH"					// Character move([d:Room id][[d:Family id][b:CH count][ [d:CH id][d:X][d:Y][d:Z] ]])

// 의자에 앉기 처리
#define	M_SC_CHAIR_LIST						"SC_CHAIR_LIST"				// Send Chair User List ([ [d:ChairID][d:FID] ])
#define	M_CS_CHAIR_SITDOWN					"CS_CHAIR_SITDOWN"			// Family Sitdown on a chair ([d:ChairID])
#define	M_SC_CHAIR_SITDOWN					"SC_CHAIR_SITDOWN"			// Family Sitdown on a chair ([d:FID][d:ChairID])
#define	M_CS_CHAIR_STANDUP					"CS_CHAIR_STANDUP"			// Family Standup ([d:ChairID])
#define	M_SC_CHAIR_STANDUP					"SC_CHAIR_STANDUP"			// Family Standup ([d:FID][d:ChairID])

//#define M_CS_FORCEOUT						"CS_FORCEOUT"				// Out room by force([d:Room id][d:Family id])
//#define M_SC_FORCEOUT						"SC_FORCEOUT"				// Response for M_CS_FORCEOUT([d:Result code][d:Room id][d:Family id])
#define M_CS_ROOMFORFAMILY					"CS_ROOMFORFAMILY"			// Request room list of any family in room([d:Family id])
#define M_SC_ROOMFORFAMILY					"SC_ROOMFORFAMILY"			// [d:FamilyId][b:flagStart][ [d:RoomId][w:SceneId][u:RoomName][b:OpenFlag][b:Level][d:Exp][d:visits][b:PhotoType][u:DeadName1][b:DeadSurnamelen1][u:DeadName2][b:DeadSurnamelen2] ][b:flagEnd]

// Check Enter Room
#define M_CS_CHECK_ENTERROOM				"CS_CHECK_ENTERROOM"		// Check enter room ([d:Room id][s:AuthKey] + [w:ClientFSSid][b:Master'sFriendStatus])
#define M_SC_CHECK_ENTERROOM				"SC_CHECK_ENTERROOM"		// Response of M_CS_CHECK_ENTERROOM ([d:Result code][d:Room id])

// Invite & Banish
#define M_CS_INVITE_REQ						"CS_INVITE_REQ"				// Invite other user to this room ([d:FamilyID] + [w:ClientFSSid][b:ContactStatus1][b:ContactStatus2])
#define M_SC_INVITE_REQ						"SC_INVITE_REQ"				// Notice that invited from other user ([d:FamilyID][u:FamilyName][d:RoomID][d:ChannelID][u:RoomName][w:SceneID])
#define M_CS_INVITE_ANS						"CS_INVITE_ANS"				// Reply other user's invite ([d:RoomID][d:ChannelID][d:srcFamilyID][b:Answer, 0:No, 1:Yes])
#define M_SC_INVITE_ANS						"SC_INVITE_ANS"				// Notice other user's answer ([d:FamilyID][u:FamilyName][b:Answer, 0:No, 1:Yes, 2:NotExist, 3:InCurrentRoom, 4:BlackList, 5:NoMasterFriend])
#define M_CS_BANISH							"CS_BANISH"					// Banish other user from this room ([d:FamilyID])
#define M_SC_BANISH							"SC_BANISH"					// Notice that banished from room master ([d:FamilyID][u:FamilyName])

// Dead Info (Deceased Info)
#define M_CS_DECEASED						"CS_DECEASED"				// Request dead info([d:Room id][s:password])
#define M_SC_DECEASED						"SC_DECEASED"				// Get dead([d:Result code][d:Room id][u:Room name][u:Dead name1][b:Dead surnamelen1][b:Sex1][d:Birthday1][d:Death day1][u:Brief history1][u:Nation1][u:domicile1][d:PhotoId1][b:PhotoType][u:Dead name2][b:Dead surnamelen2][b:Sex2][d:Birthday2][d:Death day2][u:Brief history2][u:Nation2][u:domicile2][d:PhotoId2])
#define M_CS_SETDEAD						"CS_SETDEAD"				// Set dead([d:Room id][u:Room name][b:DeadID][u:dead name][b:dead surnamelen][b:Sex][Date4:birthday][Date4:Death day][u:Brief history][u:Nation][u:domicile][b:PhotoType])
#define M_NT_REQ_DECEASED					"NT_REQ_DECEASED"			// Request dead info([w:fsSid][d:FID][d:Room id][s:password]) WS->WS
//#define M_CS_DELDEAD						"CS_DELDEAD"				// NOT USE-Delete dead ([d:Room id])
//#define M_SC_DELDEAD						"SC_DELDEAD"				// NOT USE-Response for M_CS_DELDEAD([d:Result code][d:Room id])
//#define M_NT_SETDEAD						"NT_DELDEAD"				// [d:RoomId][d:FamilyId]

#define M_CS_SET_DEAD_FIGURE				"CS_SETDEADFIG"				// Set dead Figure ([d:Room id][b:DeadID][d:PhotoId])
#define M_SC_SET_DEAD_FIGURE				"CS_SETDEADFIG"				// Set dead Figure ([d:Result])

#define	M_CS_ROOMINFO						"CS_ROOMINFO"				// Request room info ([d:RoomId])
#define	M_SC_ROOMINFO						"SC_ROOMINFO"				// [d:Result code][d:RoomId][b:Level][d:Exp][w:SceneId][u:Name][d:MasterId][u:MasterName][M1970:CreationTime][M1970:TermTime][b:OpenFlag][u:Comment][b:FreeFlag][d:VisitCount][b:Authority][M1970:RenewTime][d:HisSpaceSize][d:HisSpaceUsed][b:DeletedFlag][b:PhotoType][u:Dead name1][b:Dead surnamelen1][u:Dead name2][b:Dead surnamelen2])
#define M_NT_REQ_ROOMINFO					"NT_REQ_ROOMINFO"			// Request room info request shard ([w:fsSid][d:FID][d:RoomID]) WS->WS

//#define M_SC_ROOMPART						"SC_ROOMPART"				// Room part info([d:Room id][ [w:Part id] ])
//#define M_CS_ROOMPARTCHANGE					"CS_RPCH"					// Change room part info([w:part id])
//#define M_SC_ROOMPARTCHANGE					"SC_RPCH"					// Response for M_CS_ROOMPARTCHANGE([d:Room id][w:part id])

// Memo : Record Of Vistors - 길상등기능으로 교체됨.
//#define	M_CS_REQRMEMO						"CS_REQRMEMO"				// Request room memorial([Date4:the year and month][d:Page pos][b:Filter type])
#define	M_SC_ROOMMEMO						"SC_ROOMMEMO"				// Response for M_CS_REQRMEMO([d:Room id][d:page pos][d:Count][ [d:MemoID][d:FID][u:FamilyName][s:Memo time][u:Memorial][b:protected] ])
#define M_CS_NEWRMEMO						"CS_NEWRMEMO"				// New memorial([u:Memorial][b:protected])
#define M_SC_NEWRMEMO						"SC_NEWRMEMO"				// Response for M_CS_NEWRMEMO[d:Room id][d:MemoID][d:FID][u:FamilyName][s:Memorial time][u:Memorial][b:protected])
//#define M_CS_DELRMEMO						"CS_DELRMEMO"				// Delete memorial([d:MemoID])
//#define M_SC_DELRMEMO						"SC_DELRMEMO"				// Delete memorial([d:Room id][d:MemoID][d:ErrorCode])
//#define M_CS_MODIFYRMEMO					"CS_MODIFYRMEMO"			// Modify memorial([d:MemoID][u:Memorial][b:protected])
//#define M_SC_MODIFYRMEMO					"SC_MODIFYRMEMO"			// Response for M_CS_MODIFYRMEMO[d:Room id][d:MemoID][u:Memorial][b:protected])
//#define M_CS_MODIFY_MEMO_START				"CS_MODIFY_MEMO_START"		// Modify memo Start ([d:MemoID])
//#define M_CS_MODIFY_MEMO_END				"CS_MODIFY_MEMO_END"		// Modify memo End ([d:MemoID])

#define	M_SC_ROOMMEMO_LIST					"SC_ROOMMEMO_LIST"			// Send RoomMemo List ([ [b:Pos,0~][d:MemoID][d:FID][u:FamilyName][d:ShowTimeSecond] ])
#define	M_SC_ROOMMEMO_UPDATE				"SC_ROOMMEMO_UPDATE"		// Send RoomMemo Change ([b:Pos,0~][d:MemoID,0:삭제][d:FID][u:FamilyName][b:Flag, 0:Normal,1:Yuyue])
//#define	M_CS_ROOMMEMO_GET					"CS_ROOMMEMO_GET"			// Request RoomMemo Data ([d:MemoID])
//#define	M_SC_ROOMMEMO_DATA					"SC_ROOMMEMO_DATA"			// Send RoomMemo Data ([d:MemoID][d:FID][u:FamilyName][s:Memo time][u:Memorial][b:protected])

// Letter
#define	M_CS_REQ_PAPER_LIST					"CS_REQ_PAPER_LIST"			// Request room paper list([w:Year][b:bOnlyOwnData][b:bSort][d:Page][b:PageSize])
#define	M_SC_PAPER_LIST						"SC_PAPER_LIST"				// Response for M_CS_REQ_PAPER_LIST ([d:Room id][w:Year][b:bOnlyOwnData][b:bSort][d:Page][d:AllCount][d:YearCount][ [d:Paper id][s:Paper time][u:Title][b:opened][d:FID][u:FamilyName][d:ReadCount] ])
#define	M_CS_REQ_PAPER						"CS_REQ_PAPER"				// Request room paper([d:Paper id])
#define	M_SC_PAPER							"SC_PAPER"					// Response for M_CS_REQ_PAPER([d:Paper id][d:ErrorCode][u:Content][d:ReadCount])
#define M_CS_NEW_PAPER						"CS_NEW_PAPER"				// New paper([u:Title][u:Content][b:opened])
#define M_SC_NEW_PAPER						"SC_NEW_PAPER"				// Response for M_CS_NEW_PAPER[d:Room id][d:Paper id][s:Paper time][u:Title][u:Content][b:opened])
#define M_CS_DEL_PAPER						"CS_DEL_PAPER"				// Delete paper([b:count][ [d:Paper id] ])
#define M_SC_DEL_PAPER						"SC_DEL_PAPER"				// Delete paper Result. ([d:PaperID][d:ErrorCode])
#define M_CS_MODIFY_PAPER					"CS_MODIFY_PAPER"			// Modify paper([d:Paper id][u:Title][u:Content][b:opened])
//#define M_SC_MODIFY_PAPER					"SC_MODIFY_PAPER"			// Response for M_CS_MODIFY_PAPER[d:Room id][d:Paper id][u:Title][u:Content][b:opened])
#define M_CS_MODIFY_PAPER_START				"CS_MODIFY_PAPER_START"		// Modify paper Start ([d:Paper id])
#define M_CS_MODIFY_PAPER_END				"CS_MODIFY_PAPER_END"		// Modify paper End ([d:Paper id])

// Visit Info
#define M_CS_ADDACTIONMEMO					"CS_ADDRACTIONMEMO"			// Add new action memo([b:action type][u:pray text][b:is secret][d:StoreLockID][b:Number]<[d:SyncCode][ [w:InvenPos][d:ItemID] ]>) Number=0이면 뒤의 값들은 의미를 가지지 않는다.
//#define M_SC_ADDRACTIONMEMO					"SC_ADDRACTIONMEMO"			// Response for M_CS_ADDACTIONMEMO[d:Room id][d:action id])
#define	M_CS_REQRVISITLIST					"CS_REQRVISITLIST"			// Request room visit list([d:page][b:bOnlyOwnData][b:PageSize])
#define	M_SC_ROOMVISITLIST					"SC_ROOMVISITLIST"			// Response for M_CS_REQRVISITLIST([d:Room id][b:bOnlyOwnData][d:All Visit Count][d:30d Visit Count][d:page][ [d:group id][d:visitor id][u:visitor name][Date4:which day the visit happened ][b:has action][b:has Yishi])
#define	M_CS_VISIT_DETAIL_LIST				"CS_VISIT_DETAIL_LIST"		// Request room visit detail list ([w:Year][d:GroupID])
#define	M_SC_VISIT_DETAIL_LIST				"SC_VISIT_DETAIL_LIST"		// Response for M_CS_VISIT_DETAIL_LIST ([d:Room id][d:GroupID][d:total Count][ [d:action id][d:MinutesSince1970][b:action type] ])
#define	M_CS_VISIT_DATA						"CS_VISIT_DATA"				// Request room action data of activity ([w:Year][d:action id])
#define	M_SC_VISIT_DATA						"SC_VISIT_DATA"				// Response for M_CS_VISIT_DATA ([d:action id][d:action subid][d:GroupID][b:action type][b:finished][d:FID][u:FName][u:pray text][b:is secret][b:shielded][b:Number][ [d:Item id] ])
#define M_CS_VISIT_DATA_SHIELD				"CS_VISIT_DATA_SHIELD"		// Shield action memo([w:Year][d:action id][d:action subid][b:ShildFlag])
#define M_CS_VISIT_DATA_DELETE				"CS_VISIT_DATA_DELETE"		// Delete action memo([w:Year][d:action id][d:action subid])
#define M_CS_VISIT_DATA_MODIFY				"CS_VISIT_DATA_MODIFY"		// Modify action memo([w:Year][d:action id][d:action subid][b:action type][b:secret][u:pray text])
#define	M_SC_VISIT_FISHFLOWER_LIST			"SC_VISIT_FISHFLOWER_LIST"	// Response for M_CS_VISIT_DETAIL_LIST ([d:RoomID][d:GroupID][ [d:MinutesSince1970][b:type][d:ItemID][d:OldFlowerID] ])

#define M_CS_GET_ROOM_VISIT_FID				"CS_GET_ROOM_VISIT_FID"		// Request Room's Visit FID List For Autoplay ([w:Year][b:Month][b:Day])
#define M_SC_ROOM_VISIT_FID					"SC_ROOM_VISIT_FID"			// Send Room's Visit FID List For Autoplay ([w:Year][b:Month][b:Day][b:bStartFlag][ [d:FID][u:FamilyName][b:has Yishi] ][b:EndFlag])

// Mail
#define M_NT_REQ_MAILBOX_STATUS_CHECK		"NT_REQ_MAILBOX_STATUS_CHECK"	// Request Mailbox Status for Login [d:FID]
#define M_SC_MAILBOX_STATUS					"SC_MAILBOX_STATUS"			// [b:NewMailExist][b:SendMailboxOverflow][b:ReceiveMailboxOverflow]
#define M_CS_MAIL_GET_LIST					"CS_MAIL_GET_LIST"			// Request Mail List ([b:MailType][d:page][b:PageSize])
#define M_SC_MAIL_LIST						"SC_MAIL_LIST"				// Response for M_CS_MAIL_GET_LIST ([b:MailType][d:AllCount][d:NewCount][d:page][ [d:MailId][d:FID][u:FamilyName][b:MailKind][b:MailStatus][u:Title][s:DateTime][b:ItemExist] ])
#define M_CS_MAIL_GET						"CS_MAIL_GET"				// Request One Mail ([d:MailId])
#define M_SC_MAIL							"SC_MAIL"					// Response for M_CS_MAIL_GET ([d:MailId][b:MailStatus][u:Content][b:count][ [d:itemid][w:itemcount][b:moneytype] ])
#define M_CS_MAIL_SEND						"CS_MAIL_SEND"				// Send New Mail ([d:ClientMailID][d:toFID][u:Title][u:Content][b:count][ [w:itemcount][w:Inven pos] ])
#define M_NT_MAILBOX_STATUS_FOR_SEND		"NT_MAILBOX_STATUS_FOR_SEND"	// Send MaiboxCheckResult LS->WS->OROOM ([b:toFID_NoExist][b:fromFID_SendMailboxOverflow][b:toFID_ReceiveMailboxOverflow][d:FID][params of M_CS_MAIL_SEND])
#define M_NT_MAIL_SEND						"M_NT_MAIL_SEND"			// SendMail Check success, register mail [d:FID][d:ClientMailID][d:toFID][u:Title][u:Content][b:count][[d:itemid][w:itemcount][b:MoneyType]]
#define M_SC_MAIL_SEND						"SC_MAIL_SEND"				// Response for M_CS_MAIL_SEND ([d:ClientMailID][d:result][d:MailId][d:toFID][u:toFamilyName][s:DateTime] + [d:toUserID][b:count][[d:itemid][w:itemcount]])
#define M_CS_MAIL_DELETE					"CS_MAIL_DELETE"			// Delete Mail ([b:count][ [d:MailID][b:MailType] ])
#define M_CS_MAIL_REJECT					"CS_MAIL_REJECT"			// Reject Mail Items ([d:MailId])
#define M_SC_MAIL_REJECT					"SC_MAIL_REJECT"			// Response for M_CS_MAIL_REJECT ([d:result][d:MailId][s:DateTime])
#define M_CS_MAIL_ACCEPT_ITEM				"CS_MAIL_ACCEPT_ITEM"		// Accept Mail Items ([d:SyncCode][d:MailId][b:count][ [w:InvenPos] ])
#define M_NT_MAIL_ITEM_FOR_ACCEPT			"NT_MAIL_ITEM_FOR_ACCEPT"	// 메일의 아이템목록을 LS에서 RS로 보낸다. ([params of M_CS_MAIL_ACCEPT_ITEM] + [d:fromFID][d:fromUID][b:MailKind][u:fromName][[d:ItemID][w:ItemCount][b:MoneyType] (count:MAX_MAIL_ITEMCOUNT)])
#define M_NT_MAIL_ACCEPT_ITEM				"NT_MAIL_ACCEPT_ITEM"		// 메일아이템받기가 완료됨을 통지한다. ([d:MailID])

//#define	M_SC_SACRIFICE						"SC_SACRIFICE"				// List of sacrifices([d:Room id][ [d:Sac id][b:Count][b:Pos X][b:Pos Y] ])
//#define	M_SC_DELSACRIFICE					"SC_DELSACRIFICE"			// Delete sacrifice([d:Room id][ [b:Pos X][b:Pos Y] ])

//#define	M_CS_CHMETHOD						"CS_CHMETHOD"				// Character action([d:CH id][u:Method name][d:Parameter]
//#define	M_SC_CHMETHOD						"SC_CHMETHOD"				// Character action([d:Family id]][d:CH id][u:Method name][d:Parameter]
#define	M_SC_CHANGECHDRESS					"SC_CHANGECHDRESS"			// Change character dress[[d:Room id][d:Family id]][d:CH id][d:Dress id]]
#define M_SC_ROOMPRO						"SC_ROOMPRO"				// Change room property([d:Room id][d:Exp][b:level])
//#define M_CS_ROOMMUSIC						"CS_ROOMMUSIC"				// Set music([d:Music id])
//#define	M_SC_ROOMMUSIC						"SC_ROOMMUSIC"				// Set music([d:room id][d:Music id])

// 방관리자기능
#define M_CS_MANAGER_ADD					"CS_MANAGER_ADD"			// Add room manager([d:Room id][d:FID])
#define M_CS_MANAGER_ANS					"CS_MANAGER_CANCEL"			// Cancel or Refuse a room's manager([d:RoomID][u:RoomName][d:masterFID][b:1-OK,2-Refuse,3-Delete])
#define M_CS_MANAGER_DEL					"CS_MANAGER_DEL"			// Delete room manager([d:RoomID][d:FID])
#define M_CS_MANAGEROOMS_GET				"CS_MANAGEROOMS_GET"		// Request one's manage room ([d:targetFID][d:RoomID]) if RoomID=0, request all list
#define M_SC_MANAGEROOMS_LIST				"SC_MANAGEROOMS_LIST"		// List of one's manage room( [d:targetFID][b:flagStart][[d:RoomID][b:Permission][w:SceneID][u:RoomName][b:OpenFlag][d:VisitCount][b:Level][d:Exp][d:OwnerFID][u:OwnerName][b:PhotoType][u:Dead name1][b:Dead surnamelen1][u:Dead name2][b:Dead surnamelen2] ][b:flagEnd])
#define M_CS_MANAGER_GET					"CS_MANAGER_GET"			// Request room's managers([d:RoomID])
#define M_SC_MANAGER_LIST					"SC_MANAGER_LIST"			// Send room's managers([d:RoomID][b:Count][ [d:FID][b:Permission][d:CHID][u:FName][d:ModelID][d:BirthDate][d:City] ])
//#define M_CS_GETRMAN						"CS_GETRMAN"				// Request room's managers([d:room id])
//#define M_SC_GETRMAN						"SC_GETRMAN"				// Response for M_CS_GETRMAN([d:Room id][d:Master id][u:Master name][s:Last login time][ [d:Manager id][u:Manager name][s:Last login time] ] )
//#define M_SC_ADDRMAN						"SC_ADDRMAN"				// Response for M_CS_ADDRMAN([d:Result code][d:Room id]<[d:Manager id][u:Manager name][s:Last login time]>)
//#define M_CS_DELRMAN						"CS_DELRMAN"				// Delete room manager([d:Room id][d:Manager id])
//#define M_SC_DELRMAN						"SC_DELRMAN"				// Response for M_CS_DELRMAN([d:Result code][d:Roomo id]<[d:Manager id]>)
#define M_NT_MANAGER_DEL					"NT_MANAGER_DEL"			// Notice that manager deleted (when deletr from frient list). ManagerService->OpenroomService ([d:RoomID][d:FID])
#define M_CS_MANAGER_SET_PERMISSION			"CS_MANAGER_SET_PERMISSION"	// Set Room Manager's Permission ([d:Room id][d:targetFID][b:Permission])

// 비석관리
#define	M_CS_TOMBSTONE						"CS_TOMBSTONE"				// Set tomb([w:Tomb id][u:Content])
#define	M_SC_TOMBSTONE						"SC_TOMBSTONE"				// Set tomb([d:room id][ [w:Tomb id][u:Content] ])

// ruyibei관련
#define	M_SC_RUYIBEI						"SC_RUYIBEI"				// Send ruyinei ItemID ([d:ItemID])
#define	M_CS_RUYIBEI_TEXT					"CS_RUYIBEI_TEXT"			// Request ruyinei Text (Master only)
#define	M_SC_RUYIBEI_TEXT					"SC_RUYIBEI_TEXT"			// Send ruyinei Text ([u:Content])

//#define	M_CS_HOLDITEM						"CS_HOLDITEM"				// Hold item([d:CHID][d:ItemID])
//#define	M_SC_HOLDITEM						"SC_HOLDITEM"				// Notify character hold item([d:Room id][d:Family id][d:CH id][d:ItemID])
//#define M_CS_PUTHOLEDITEM					"CS_PUTHOLEDITEM"			// Put holden item([d:Family id][b:Pos X][b:Pos Y])
//#define M_CS_PUTITEM						"CS_PUTITEM"				// Put item in inventory([d:Family id][w:InvenPos][w:Count][b:Pos X][b:Pos Y])

// 기념관안의 동물관리
#define	M_SC_ANIMAL_ADD						"SC_ANIMAL_ADD"				// Add moving animal([ [d:Animal ID][d:Animal type ID][d:X][d:Y][d:Z][d:direction][b:ServerControlType] ])
#define M_SC_ANIMALMOVE						"SC_ANIMALMOVE"				// move animal([ [d:AnimalId][d:X][d:Y][d:Z][b:MoveType][b:bIsEscape] ])
#define M_CS_ANIMAL_APPROACH				"CS_ANIMAL_APPROACH"		// notice that family approach to an animal(squirrel) ([d:AnimalId])
//#define	M_SC_ANIMAL_DEL						"SC_ANIMAL_DEL"				// Del moving animal([d:Room id][ [d:Animal ID] ])
#define M_CS_ANIMAL_STOP					"CS_ANIMAL_STOP"			// Stop Animal ([d:Animal ID][d:X][d:Y][d:Z])
#define M_CS_ANIMAL_SELECT					"CS_ANIMAL_SELECT"			// Animal consensus start ([d:AnimalID][d:targetX][d:targetY][d:targetZ])
#define M_SC_ANIMAL_SELECT					"SC_ANIMAL_SELECT"			// Notice Animal consensus start ([d:FID][d:AnimalID])
#define M_CS_ANIMAL_SELECT_END				"CS_ANIMAL_SELECT_END"		// Animal consensus stop ([d:AnimalID])
#define M_SC_PEACOCK_TYPE					"SC_PEACOCK_TYPE"			// Send Peacock Type ([d:PeacockType])

// 기념관안의 편집동물관리
#define M_SC_EANOTIFYMAINCLIENT				"SC_EANOTIFYMAINCLIENT"		// Notify main client([b:send init info][[w:groupid][w:기초정보길이][기초정보]])
#define M_CS_EAINITINFO						"CS_EAINITINFO"				// Init info([w:number][[w:groupid][w:기초정보길이][기초정보]][w:number][[w:id][d:X][d:Y][d:Z][d:Direction]])
#define M_SC_EASETPOS						"SC_EASETPOS"				// Set position([w:groupnumber][[w:groupid][w:기초정보길이][기초정보]][w:animalnumber][[w:id][d:X][d:Y][d:Z][d:Direction]])
#define M_CS_EAMOVE							"CS_EAMOVE"					// Move([[b:type]( [w:id][d:X][d:Y][d:Z][d:Direction][b:MoveType] OR [w:id][s:ani name][b:loop flag])])
#define M_SC_EAMOVE							"SC_EAMOVE"					// Move([[b:type]( [w:id][d:X][d:Y][d:Z][d:Direction][b:MoveType] OR [w:id][s:ani name][b:loop flag])])
//#define M_CS_EAANIMATION					"CS_EAANIMATION"			// Animation([w:number][[w:id][s:ani name][b:loop flag]])
//#define M_SC_EAANIMATION					"SC_EAANIMATION"			// Animation([w:number][[w:id][s:ani name][b:loop flag]])
#define M_CS_EABASEINFO						"CS_EABASEINFO"				// Base info([w:number][[w:groupid][w:기초정보길이][기초정보]])
#define M_SC_EABASEINFO						"SC_EABASEINFO"				// Base info([w:number][[w:groupid][w:기초정보길이][기초정보]])
#define M_CS_EAANISELECT					"CS_EAANISELECT"			// Animal select([w:id][d:X][d:Y][d:Z][d:Direction])
#define M_SC_EAANISELECT					"SC_EAANISELECT"			// Animal select([d:FID][w:id][d:X][d:Y][d:Z][d:Direction])

// 행운대
#define M_CS_LUCK_REQ						"CS_LUCK_REQ"				// Request Luck
#define M_SC_LUCK							"SC_LUCK"					// Send Luck ([d:FID][u:FName][d:LuckID][d:RoomID][u:RoomName][w:SceneID][d:MasterFID][u:MasterFName]) Send to All/Room/Common
#define M_NT_LUCK							"NT_LUCK"					// Notice Luck to another service ([d:RoomID][u:RoomName][d:MasterFID][u:MasterFName][d:FID][u:FName][b:Level(3 or 4)][LuckID])
#define M_NT_LUCKHIS						"NT_LUCKHIS"				// Notice luck history([d:FID][d:RoomID][b:Level(3 or 4)][d:LuckID][q:lucktime]
#define M_SC_LUCK_LIST						"SC_LUCK_LIST"				// Send room's luck list ([d:LuckID_Lv3][d:LuckID_Lv4][d:Lv4ShowSecond])
#define M_SC_LUCK_TOALL						"SC_LUCK_TOALL"				// Send room's luck to all (type3 & type4) ([d:FID][u:FName][d:LuckID][d:RoomID][u:RoomName][w:SceneID][d:MasterFID][u:MasterFName])
//#define M_NT_LUCK_RESET						"NT_LUCK_RESET"				// Notice Luck reseted
//#define M_CS_LUCK4_LIST						"CS_LUCK4_LIST"				// Request Luck4 List
#define M_SC_LUCK4_LIST						"SC_LUCK4_LIST"				// Send Luck4 List ([ [d:RoomID][u:RoomName][d:MasterFID][u:MasterFName][d:FID][u:FName][d:LuckID] ])
//#define M_NT_LUCK4_REQ						"NT_LUCK4_REQ"				// Request luck4 for server([d:FID][u:FName][d:RoomID])
//#define M_NT_LUCK4_RES						"NT_LUCK4_RES"				// Response luck4 for server([b:1/0][d:FID][u:FName][d:RoomID])
#define M_NT_LUCK4_CONFIRM					"NT_LUCK4_CONFIRM"			// Confirm luck4 for server([b:1/0][d:RoomID][u:RoomName][d:MasterFID][u:MasterFName][d:FID][u:FName][d:LuckID])
#define M_NT_LUCK4_RESET					"NT_LUCK4_RESET"			// Notify that Luck4 list reseted in 24:00:00


// 북,종,악기
#define M_CS_DRUM_START						"CS_DRUM_START"				// Drum start ([d:DrumID][u:NPCName])
#define M_SC_DRUM_START						"SC_DRUM_START"				// Drum started ([d:DrumID][d:FID][u:NPCName])
#define M_CS_DRUM_END						"CS_DRUM_END"				// Drum end ([d:DrumID])
#define M_SC_DRUM_END						"SC_DRUM_END"				// Drum end ([d:DrumID][d:FID])
#define M_CS_BELL_START						"CS_BELL_START"				// Bell start
#define M_SC_BELL_START						"SC_BELL_START"				// Bell started ([d:FID])
#define M_CS_BELL_END						"CS_BELL_END"				// Bell end
#define M_SC_BELL_END						"SC_BELL_END"				// Bell end
#define M_CS_MUSIC_START					"CS_MUSIC_START"			// Music start ([d:MusicPosID])
#define M_SC_MUSIC_START					"SC_MUSIC_START"			// Music started ([ [d:FID][d:MusicPosID] ])
#define M_CS_MUSIC_END						"CS_MUSIC_END"				// Music end
#define M_SC_MUSIC_END						"SC_MUSIC_END"				// Music end ([d:FID][d:MusicPosID])

// Pet관리
//#define	M_CS_NEWPET							"CS_NEWPET"					// Add pet([d:Pet item id][w:Count][d:Region id][u:Region name])
//#define	M_SC_NEWPET							"SC_NEWPET"					// Add pet([d:Room id][ [d:Pet id][d:Pet item id][b:Pet step][d:Life][w:Percent][w:Count][d:Region id][u:Region name] ])
//#define	M_SC_UPDATEPET						"SC_UPDATEPET"				// Update pet([d:Room id][d:Pet id][b:pet step][w:life])
//#define	M_SC_DELPET							"SC_DELPET"					// Delete pet([d:Room id][d:Pet id])
//#define	M_CS_CAREPET						"CS_CAREPET"				// Care pet([d:Pet id][d:care id])

//#define	M_SC_TGATE							"SC_TGATE"					// New treasure gate([d:Room id][d:X][d:Y][d:Z])
//#define M_CS_ENTERTGATE						"CS_ENTERTGATE"				// Enter treasure gate
//#define M_SC_ENTERTGATE						"SC_ENTERTGATE"				// Enter treasure gate([d:Room id][d:Familyid])
//#define M_SC_DELTGATE						"SC_DELTGATE"				// Delete treasure gate([d:Room id])

// Activity
#define M_CS_ACT_REQ						"CS_ACT_REQ"				// Require Activity ([b:ActPos])
//#define M_SC_ACT_WAIT						"SC_ACT_WAIT"				// Notice Activity Term ([b:ActPos][d:ErrorCode][d:RemainCount][b:NPCPos(1,2)][b:BasketPos(1,2)][b:GreetPos(0,1,2)]), if RemainCount=0 then must start Activity
#define M_SC_ACT_WAIT						"SC_ACT_WAIT"				// Notice Activity Term ([b:ActPos][d:ErrorCode][d:RemainCount][b:DeskNo]), if RemainCount=0 then must start Activity
#define M_CS_ACT_WAIT_CANCEL				"CS_ACT_WAIT_CANCEL"		// Activity Wait Cancel ([b:ActPos])

#define M_CS_ACT_START						"CS_ACT_START"				// Start Activity ([b:ActPos][d:Param 특수한 용도에 사용, 조상탑 고인행사인경우 1:꽃드리기 2:향드리기, 기타 IsXDG][b:GongpinCount][[d:GongpinItemID]][b:BowType])
#define M_SC_ACT_START						"SC_ACT_START"				// Notice Start Activity ([b:ActPos][b:Acttype][d:FID] [b:HuaPos 특수한 용도에 사용, 조상탑 고인행사 꽃드리기인 경우 꽃을 놓을 위치, 불교구역인 경우 DeskNo])
#define M_CS_ACT_RELEASE					"CS_ACT_RELEASE"			// Release Activity
#define M_SC_ACT_RELEASE					"SC_ACT_RELEASE"			// Notice Release Activity([b:ActPos][d:FID][b:DeskNo])

#define M_CS_ACT_STEP						"CS_ACT_STEP"				// Send Act Step Command ([b:ActPos][d:StepID])
#define M_SC_ACT_STEP						"SC_ACT_STEP"				// Send Act Step Command to all users in room ([b:ActPos][d:StepID][d:HostID][b:DeskNo])

#define M_SC_ACT_NOW_START					"SC_ACT_NOW_START"			// Notice Start Single/Multi-Activity(By Step mode) to other Users(Send to All) ([b:ActPos][b:DeskNo][b:ActType][d:IsXDG][d:HostFID][b:GongpinCount][[d:GongpinItemID]][b:BowType][b:JoinCount][[d:JoinFID][d:FlowerItemID][b:PosIndex]][d:StepID])

// 단체행사
// MULTIACT2 : 공공구역에서의 하늘땅의식
#define M_CS_MULTIACT2_ITEMS				"CS_MULTIACT2_ITEMS"		// Send Item List of SkyWorld Activity in Public Room [b:ActPos][b:GongpinCount][[d:GongpinItemID]]
#define M_SC_MULTIACT2_ITEMS				"SC_MULTIACT2_ITEMS"		// Send Item List of SkyWorld Activity in Public Room [b:ActPos][d:HostFID][b:GongpinCount][[d:GongpinItemID]]

#define M_CS_MULTIACT2_ASK					"CS_MULTIACT2_ASK"			// Ask information for multiact([b:ActPos])
#define M_SC_MULTIACT2_ASK					"SC_MULTIACT2_ASK"			// Answer information for multiact([b:ActPos][d:HostFID][M1970:ReqTime][b:ReqSecond][b:CurCount][b:bStart])
#define M_CS_MULTIACT2_JOIN					"CS_MULTIACT2_JOIN"			// Join to MultiAct([b:ActPos])
#define M_SC_MULTIACT2_JOIN					"SC_MULTIACT2_JOIN"			// Join to MultiAct([b:ActPos][d:ErrorCode][b:Count][[b:PosIndex][d:JoinFID][b:JoinStatus]])
#define M_SC_MULTIACT2_JOINADD				"SC_MULTIACT2_JOINADD"		// Join to MultiAct([b:ActPos][b:PosIndex][d:JoinFID])

#define M_CS_MULTIACT_REQ					"CS_MULTIACT_REQ"			// Request MultiActivity([b:ActPos][b:ActType][b:Count][[d:JoinFID]][w:CountdownSec])
#define M_SC_MULTIACT_REQ					"SC_MULTIACT_REQ"			// Send MultiActivity Request to All ActivityUsers([b:ActPos][b:ActType][d:HostFID][u:HostFName][d:RoomID][u:RoomName][d:ChannelID][w:SceneID][b:Count][[d:JoinFID][u:JoinFName][b:JoinStatus]][w:CountdownSec])
#define M_CS_MULTIACT_ANS					"CS_MULTIACT_ANS"			// Answer MultiActivity Request([d:RoomID][d:ChannelID][b:ActPos][b:Answer,Yes-1,No-0])
#define M_SC_MULTIACT_ANS					"SC_MULTIACT_ANS"			// Notice MultiActivity Request Answer([b:ActPos][d:JoinFID][b:Answer])
#define M_CS_MULTIACT_READY					"CS_MULTIACT_READY"			// Ready MultiActivity([b:ActPos])
#define M_SC_MULTIACT_READY					"SC_MULTIACT_READY"			// Notice MultiActivity Ready([b:ActPos][d:JoinFID])

#define M_CS_MULTIACT_CANCEL				"CS_MULTIACT_CANCEL"		// MultiActivity Wait Cancel ([d:RoomID][d:ChannelID][b:ActPos])
#define M_SC_MULTIACT_CANCEL				"SC_MULTIACT_CANCEL"		// Notice that MultiActivity Wait Canceled ([d:RoomID][b:ActPos][d:FID][u:FName])
#define M_CS_MULTIACT_REQADD				"CS_MULTIACT_REQADD"		// Add MultiAct user([b:ActPos][b:Count][[d:JoinFID]][w:CountdownSec])
#define M_SC_MULTIACT_REQADD				"SC_MULTIACT_REQADD"		// Notice add family([[d:JoinFID][u:JoinFName]])

#define M_SC_MULTIACT_WAIT					"SC_MULTIACT_WAIT"			// Notice MultiActivity Wait Status ([b:ActPos][d:ErrorCode][d:RemainCount]), if RemainCount=0 then must start Activity

#define M_CS_MULTIACT_GO					"CS_MULTIACT_GO"			// Host Family want to start ([b:ActPos][d:IsXianDaGong][b:GongpinCount][[d:GongpinItemID]][b:BowType])
#define M_SC_MULTIACT_GO					"SC_MULTIACT_GO"			// Notice that MultiActivity go ([b:ActPos][b:Count][[d:FID]][d:IsXianDaGong]) if Count=0 then change single activity

#define M_CS_MULTIACT_START					"CS_MILTIACT_START"			// Start MultiActivity ([b:ActPos][d:StoreLockID][w:InvenPos][d:SyncCode][b:Secret][u:Pray])
#define M_SC_MULTIACT_START					"SC_MULTIACT_START"			// Notice Start MultiActivity to MultiActivity Users ([b:ActPos][d:FID][b:Secret][d:ItemID][u:Pray]) - 행사에 참가하는 성원들 수만큼 보내진다. HostFID정보는 제일 마지막에 보내짐.
#define M_SC_MULTIACT_STARTED				"SC_MULTIACT_STARTED"		// Notice Start MultiActivity to other Users(Send to All) ([b:ActPos][b:ActType][b:Count][[d:FID]])
#define M_CS_MULTIACT_RELEASE				"CS_MULTIACT_RELEASE"		// Finish MultiActivity ([b:ActPos][d:StoreLockID][b:Number][d:SyncCode]<[[w:InvenPos]]>) Number=0이면 뒤의 값들이 의미를 가지지 않는다.
#define M_SC_MULTIACT_RELEASE				"SC_MULTIACT_RELEASE"		// Notice Finish MultiActivity ([b:ActPos][b:SuccessFlag,1-Success,0-Fail][b:Count][[d:FID]][b:DeskNo])

#define M_CS_MULTIACT_COMMAND				"CS_MULTIACT_COMMAND"		// Send MultiActivity Command from Host to Join ([b:ActPos][d:JoinFID][b:Command][d:Param])
#define M_SC_MULTIACT_COMMAND				"SS_MULTIACT_COMMAND"		// Send MultiActivity Command from Host to Join ([b:ActPos][b:Command][d:Param])
#define M_CS_MULTIACT_REPLY					"CS_MULTIACT_REPLY"			// Send MultiActivity Reply from Join to Host ([b:ActPos][b:Command][d:Param])
#define M_SC_MULTIACT_REPLY					"SC_MULTIACT_REPLY"			// Send MultiActivity Reply from Join to Host ([b:ActPos][d:JoinFID][b:Command][d:Param])

#define M_CS_MOUNT_LUCKANIMAL				"CS_MOUNT_LUCKANIMAL"		// Send user want to mount luck animal ([d:AnimalID])
#define M_SC_MOUNT_LUCKANIMAL				"SC_MOUNT_LUCKANIMAL"		// Nitify user want to mount luck animal ([d:FID][d:AnimalID][b:result/1:success,0:fail])
#define M_CS_UNMOUNT_LUCKANIMAL				"CS_UNMOUNT_LUCKANIMAL"		// Send user want to unmount luck animal ()
#define M_SC_UNMOUNT_LUCKANIMAL				"SC_UNMOUNT_LUCKANIMAL"		// Send user want to unmount luck animal ([d:FID])

//#define M_CS_BURNITEM						"CS_BURNITEM"				// Burn item([b:Count][ [b:Inven(1)/Instant(0)][d:Inven Pos/Item id][w:Count] ])
//#define M_CS_BURNITEMINS					"CS_BURNITEMINS"			// Burn item instant([d:Item id][w:Count])


#define M_SC_CHITLIST						"SC_CHITLIST"				// List of my chits([w:r_sid][d:Count][ [d:Chit id][d:Sender ID][u:Sender name][b:Chit type][d:Param1][d:Param2][u:Param3][u:Param4] ])
#define M_CS_RESCHIT						"CS_RESCHIT"				// Response for chit([w:r_sid][d:Chit id][b:response code])
#define M_NT_ADDCHIT						"NT_ADDCHIT"				// Register new chit from shard to main ([b:ChitAddType, CHITADDTYPE_xxx][d:srcFID][u:srcName][d:targetFID][b:ChitType][d:p1][d:p2][u:p3][u:p4])

//#define M_GIVEROOMRESULT					"GIVEROOMRESULT"			// Notify give room(between Openroom and Openroom)([d:Room id][d:Receivor id][b:result])

#define M_CS_CHATROOM						"CS_CHATROOM"				// Room chatting([u:Chat])
#define M_SC_CHATROOM						"SC_CHATROOM"				// Room chatting([d:Family id][u:Chat])
#define M_CS_CHATCOMMON						"CS_CHATCOMMON"				// General chatting([u:Chat])
#define M_SC_CHATCOMMON						"SC_CHATCOMMON"				// General chatting([d:Family id][u:Chat])
#define M_CS_CHATEAR						"CS_CHATEAR"				// Ear chatting([d:FamilyID][u:Chat])
#define M_SC_CHATEAR						"SC_CHATEAR"				// Ear chatting([d:FamilyID][u:Family name][u:Chat])
#define	M_CS_CHATALL						"CS_CHATALL"				// To all chatting([u:Chat])
#define	M_SC_CHATALL						"SC_CHATALL"				// To all chatting([d:FamilyID][u:Family name][u:Chat])
#define	M_SC_CHATSYSTEM						"SC_CHATSYSTEM"				// System notify:Shard([b:Type][u:Chat])
#define	M_SC_CHATMAIN						"SC_CHATMAIN"				// System notify:Entire([u:Chat])
#define M_SC_CHATEAR_FAIL					"SC_CHATEAR_FAIL"			// Ear chatting failed. ([d:FamilyID])


#define M_CS_JOIN_SESSION					"CS_JOIN_SESSION"			// 1:N Join session([d:SessionID=RoomID][d:FamilyID])
#define M_SC_JOIN_SESSION					"SC_JOIN_SESSION"			// 1:N Join session response([b:bOK][[d:Session member ID]])
#define M_SC_SESSION_ADDMEMBER				"SESSION_ADDMEMBER"			// Add member to session([d:Session member ID])
#define M_SC_SESSION_DELMEMBER				"SESSION_DELMEMBER"			// Delete member from session([d:Session member ID])
#define M_CS_SPEAK_TO_SESSION				"CS_SPEAK_TO_SESSION"		// Request speaking in session([d:Session ID][d:Family ID])
#define M_SC_SPEAK_TO_SESSION				"SC_SPEAK_TO_SESSION"		// Notify speaker in session([d:Speaker PeerID])
#define M_CS_EXIT_SESSION					"EXIT_SESSION"				// Exit session([d:Session id][d:Family ID])
#define M_CS_REQUEST_TALK					"CS_REQUEST_CHAT"			// Request talk([d:Other family ID][d:TTalkMode == 0 Cancel request])
#define M_SC_REQUEST_TALK					"SC_REQUEST_CHAT"			// Request talk([d:Other family ID][u:Other family name][d:TTalkMode][s:relayserveraddress])
#define M_CS_RESPONSE_TALK					"CS_RESPONSE_CHAT"			// Response talk([d:Other family ID][b:ResponseCode][s:relayserveraddress])
#define M_SC_RESPONSE_TALK					"SC_RESPONSE_CHAT"			// Response talk([d:Other family ID][b:ResponseCode][s:relayserveraddress])
#define M_CS_HANGUP_TALK					"CS_HANGUP_CHAT"			// Hangup talk([d:Other family ID][d:ErrorCode])
#define M_SC_HANGUP_TALK					"SC_HANGUP_CHAT"			// Hangup talk([d:Other family ID][d:ErrorCode])
#define M_CS_TALK_INIT_COMPLETED			"CS_TALK_INIT_COMPLETED"	// Initialize talk
#define M_SC_TALK_INIT_COMPLETED			"SC_TALK_INIT_COMPLETED"	// Initialize talk([d:Other family ID])

/************************************************************************/
/*   History data(figure, photo, movie) upload and download and delete  */
/************************************************************************/
#define M_CS_REQ_UPLOAD						"CS_REQ_UPLOAD"				// [b:DataType][b:DeadID(if DataType=1)][d:AlbumId][d:DataFileBytes][u:Description]
#define M_SC_REQ_UPLOAD						"SC_REQ_UPLOAD"				// [d:Result Code][b:DataType][b:DeadID(if DataType=1)][d:AlbumId][s:ServerUrl][d:AuthKey]
#define M_SC_UPLOAD_DONE					"SC_UPLOAD_DONE"			// [d:Result Code][d:AuthKey]<[b:DataType][b:DeadID(if DataType=1)][PhotoInfo]> 		//ResultCode	0:Success 1:UnknownError 2:Cancel 101:Check Fail 102:File Size Fail 301:Convert Fail
#define M_CS_REQDATA_PHOTO					"CS_REQDATA_PHOTO"			// [b:DataType][b:DeadID][d:RoomID][d:DataId]
#define M_SC_REQDATA_PHOTO					"SC_REQDATA_PHOTO"			// [d:Result Code]<[b:CheckFlag][b:DataType][b:DeadID][PhotoInfo]>
#define M_CS_REQDATA_VIDEO					"CS_REQDATA_VIDEO"			// [d:RoomID][d:DataId]
#define M_SC_REQDATA_VIDEO					"SC_REQDATA_VIDEO"			// [d:Result Code]<[b:CheckFlag][MovieInfo][Index]>
#define M_CS_REQ_DOWNLOAD					"CS_REQ_DOWNLOAD"			// [b:Flag (1:Thumbnail, 2:Main)][d:RoomID][b:DataType][d:DataID]
#define M_SC_REQ_DOWNLOAD					"SC_REQ_DOWNLOAD"			// [d:Result Code][b:Flag (1:Thumbnail, 2:Main)][b:DataType][d:DataID][s:ServerUrl_Photo][d:AuthKey][s:ServerUrl_Video]
#define M_SC_DOWNLOAD_DONE					"SC_DOWNLOAD_DONE"			// [d:Result Code][b:DataType][d:DataID]<[u:FilePath]>
#define M_CS_REQ_DELETE						"CS_REQ_DELETE"				// [b:DataType][d:DataID][d:RoomID] : RoomID는 체험방타이틀사진인 경우만 유효하다. (DataType=10)
#define M_SC_REQ_DELETE						"SC_REQ_DELETE"				// [d:Result Code][b:DataType][d:DataID][s:ServerUrl][d:AuthKey]
#define M_SC_DELETE_DONE					"SC_DELETE_DONE"			// [d:Result Code][b:DataType][d:DataID]
#define M_SC_DOWNLOAD_PROG					"SC_DOWNLOAD_PROG"			// [d:DataType][d:DataId][b:Progress]
#define M_SC_UPLOAD_PROG					"SC_UPLOAD_PROG"			// [d:DataType][d:DataId][b:Progress]

#define M_WH_CHECK_AUTH_UPLOAD				"WH_CHECK_AUTH_UPLOAD"		// [d:AuthKey] = 30001
#define M_HW_CHECK_AUTH_UPLOAD				"HW_CHECK_AUTH_UPLOAD"		// [d:Result Code][d:RoomID][d:DataType][d:DataFileSize][d:NeedDeleteDataID] = 30002
#define M_WH_UPLOAD_DONE					"WH_UPLOAD_DONE"			// [d:Result Code][d:AuthKey][d:DataFileSize][d:FileChecksum] = 30003
#define M_HW_UPLOAD_DONE					"HW_UPLOAD_DONE"			// [d:Result Code][d:AuthKey][b:DataType][d:DataID] = 30004
#define M_WH_CHECK_AUTH_DOWNLOAD			"WH_CHECK_AUTH_DOWNLOAD"	// [d:AuthKey] = 30005
#define M_HW_CHECK_AUTH_DOWNLOAD			"HW_CHECK_AUTH_DOWNLOAD"	// [d:Result Code][d:RoomID][b:DataType][d:DataID][d:AuthKey] = 30006
#define M_WH_DOWNLOAD_DONE					"WH_DOWNLOAD_DONE"			// [d:Result Code][d:AuthKey] = 30007
#define M_WH_CHECK_AUTH_DELETE				"WH_CHECK_AUTH_DELETE"		// [d:AuthKey] = 30008
#define M_HW_CHECK_AUTH_DELETE				"HW_CHECK_AUTH_DELETE"		// [d:Result Code][d:RoomID][b:DataType][d:DataID] = 30009

#define M_CS_PHOTOALBUMLIST					"CS_PHOTOALBUMLIST"			// Request Photo Album List
#define M_SC_PHOTOALBUMLIST					"SC_PHOTOALBUMLIST"			// Send Photo Album List [ [d:AlbumId][u:Name][d:LogoDataId] ]
#define M_CS_VIDEOALBUMLIST					"CS_VIDEOALBUMLIST"			// Request Video Group List
#define M_SC_VIDEOALBUMLIST					"SC_VIDEOALBUMLIST"			// Send Video Group List [ [d:AlbumId][u:Name] ]
#define M_CS_ADDALBUM						"CS_ADDALBUM"				// Add new Photo & Video Album [b:DataType][u:Name][d:AlbumId]
//#define M_SC_ADDALBUM						"SC_ADDALBUM"				// Response of M_CS_ADDALBUM [d:Result Code]<[d:AlbumId]>
#define M_CS_DELALBUM						"CS_DELALBUM"				// Delete Photo & Video Album [b:DataType][d:AlbumId]
//#define M_SC_DELALBUM						"SC_DELALBUM"				// Response of M_CS_DELALBUM [d:Result Code]
#define M_CS_RENALBUM						"CS_RENALBUM"				// Rename Photo & Video Album's name [b:DataType][d:AlbumId][u:Name]
//#define M_SC_RENALBUM						"SC_RENALBUM"				// Response of M_CS_RENALBUM [d:Result Code]
#define M_CS_CHANGEALBUMINDEX				"CS_CHANGEALBUMINDEX"		// Change Album Index [b:DataType][b:Count][ [d:AlbumID] ]
//#define M_SC_CHANGEALBUMINDEX				"SC_CHANGEALBUMINDEX"		// Response of M_CS_CHANGEALBUMINDEX [d:Result]

#define M_CS_ALBUMINFO						"CS_ALBUMINFO"				// Get Photo&Video list of a Album [b:DataType][d:AlbumId]
#define M_SC_ALBUMINFO						"SC_ALBUMINFO"				// Response of M_CS_ALBUMINFO [d:Result Code][b:DataType][d:AlbumId][ [d:DataId][d:Index] ]

//#define M_SC_PHOTOLIST						"SC_PHOTOLIST"				// [d:RoomID][ [b:DataType][PhotoInfo] ]
//#define M_SC_VIDEOLIST						"SC_VIDEOLIST"				// [d:RoomID][ [MovieInfo] ]

#define M_CS_RENDATA						"CS_RENDATA"				// Modify Data's Desc [b:DataType][d:DataId][u:Description]
//#define M_SC_RENDATA						"SC_RENDATA"				// [d:Result Code]
#define M_CS_MOVDATA						"CS_MOVDATA"				// Change Data's AlbumID [b:DataType][d:DataId][d:NewAlbumId]
#define M_SC_MOVDATA						"SC_MOVDATA"				// [d:Result Code][b:DataType][d:DataId][d:NewAlbumId]

#define M_CS_CHANGEVIDEOINDEX				"CS_CHVIDEOIDX"				// Change video's index [d:Count][ [d:VideoId][d:NewIndex] ]
//#define M_SC_CHANGEVIDEOINDEX				"SC_CHVIDEOIDX"				// ([d:Result code])

#define M_SC_FRAMELIST						"SC_FRAMELIST"				// [d:RoomId][ [d:DataFrameId][d:PhotoId][w:OffsetX][w:OffsetY][d:Scale] ]
#define M_CS_FRAMEDATA_SET					"CS_FRAMEDATA_SET"			// Set Frame's Photo [d:FrameId][d:PhotoId][b:1 Hang up/0 Hang down][w:OffsetX][w:OffsetY][d:Scale]
//#define M_SC_FRAMEDATA						"SC_FRAMEDATA"				// [d:Result Code]
#define M_CS_FRAMEDATA_GET					"CS_FRAMEDATA_GET"			// Get Frame's Photo info [d:FrameId]
#define M_SC_FRAMEDATA_GET					"SC_FRAMEDATA_GET"			// Send Frame's Photo info [d:FrameId][d:PhotoId][w:OffsetX][w:OffsetY][d:Scale]


#define M_CS_BUYHISSPACE					"CS_BUYHISSPACE"			// Buy History Space([d:Room id][d:his space id])
#define	M_SC_CURHISSPACE					"SC_CURHISSPACE"			// History Space([d:RoomId][d:SpaceId][d:NewSize])

#define M_NT_ADDTOHIS						"NT_ADDTOHIS"				// Notify enter room from OpenRoom to HisManager ([d:FID][d:RoomID][b:RoomRole][w:fesid]
#define M_NT_DELFROMHIS						"NT_DELFROMHIS"				// Notify out room to HisManager
#define M_NT_CHANGEROLE						"NT_CHANGEROLE"				// Notify Role Changed from OpenRoom to HisManager ([d:FID][d:RoomID][b:RoomRole]

#define M_CS_HISMANAGE_START				"CS_HISMANAGE_START"		// Start to manage his data ([b:HisManageType])
#define M_SC_HISMANAGE_START				"SC_HISMANAGE_START"		// Responset of M_CS_HISMANAGE_START ([d:CurrentManagerFID][b:HisManageType])
#define M_CS_HISMANAGE_END					"CS_HISMANAGE_END"			// End to manage his data

#define M_SC_FIGUREFRAME_LIST				"SC_FIGUREFRAME_LIST"		// Send Figure Frame Data [ [d:FigureFrameId][b:PhotoType][d:PhotoId1][b:checked1][d:PhotoId2][b:checked2] ]
#define M_CS_FIGUREFRAME_SET				"CS_FIGUREFRAME_SET"		// Set FigureFrame's Photo [d:FigureFrameId][b:PhotoType][d:PhotoId1][d:PhotoId2]
//////////////////////////////////////////////////////////////////////////

//#define M_CS_FORCEFAMILY					"CS_FORCEFAMILY"			// Packet for testing
//#define	M_SC_FORCEFAMILY					"SC_FORCEFAMILY"			// Packet for testing 
#define M_CS_FORCESTATECH					"CS_FORCESTATECH"			// Packet for testing

// Reserve Event
//#define	M_SC_CURDATETIME					"CS_TIME"					// Current time			( [s:date time] )

// Festival
#define	M_CS_REGFESTIVAL					"CS_REGFESTIVAL"			// Register festival	( [Date4:Festival][u:Name][b:days] )
#define	M_SC_REGFESTIVAL					"SC_REGFESTIVAL"			// ( [d:Result code][d:FestivalId] )
#define	M_CS_MODIFYFESTIVAL					"CS_MODIFYFESTIVAL"			// Modify festival		( [d:FestivalId][Date4:Festival][u:Name][b:days] )
#define	M_SC_MODIFYFESTIVAL					"SC_MODIFYFESTIVAL"			// ( [d:Result code][d:FestivalId] )
#define	M_CS_DELFESTIVAL					"CS_DELFESTIVAL"			// Delete festival		( [d:FestivalId] )
#define	M_SC_DELFESTIVAL					"SC_DELFESTIVAL"			// ( [d:Result code][d:FestivalId] )
#define	M_SC_ALLFESTIVAL					"SC_ALLFESTIVAL"			// List of Festivals( [b:flagStart][ [d:FestivalId][Date4:Festival][u:Name] ][b:flagEnd] )
#define	M_CS_SET_FESTIVALALARM				"CS_SET_FESTIVALALARM"		// Set festival alarm	( [b:Type][d:FestivalId][b:days] )
#define	M_SC_SET_FESTIVALALARM				"SC_SET_FESTIVALALARM"		// ( [d:Result code] )
#define	M_SC_ALL_FESTIVALALARM				"SC_ALL_FESTIVALALARM"		// List of Festival alarm ( [[b:Type][d:FestivalId][b:days]] )

//#define	M_SC_DEADSMEMORIALDAY				"SC_DEADSDAY"				// List of dead([w:Count][ [d:Room id][b:Dead pos][u:Dead name][b:Deadsurnamelen][Date4:Birthday][Date4:Death day][u:RoomName] ])
// Log
#define	M_CS_SHARDLOG						"CS_SHARDLOG"				// Log family action
#define M_CS_UNLAWLOG						"CS_UNLAWLOG"				// Log lawless action
#define M_CS_GMLOG							"CS_GMLOG"					// Log GM action

// GM
#define	M_GMCS_NOTICE						"GM_NOTICE"					// Send system notice([b:Type][u:Notice])
#define	M_GMCS_WHEREFAMILY					"GMCS_WHEREFAMILY"			// Get family position([d:FamilyID])
#define	M_GMSC_WHEREFAMILY					"GMSC_WHEREFAMILY"			// Response for M_GMCS_WHEREFAMILY([d:FamilyID][u:Family name][b:Online flag]<d:Room id><u:Room name><d:Room channel id>)
#define M_GMSC_MOVETO						"GMSC_MOVETO"				// Move character by force([d:CH id][CH state])
#define M_GMCS_PULLFAMILY					"GMCS_PULLFAMILY"			// Pull family by force([d:family id][CH state])
#define M_GMCS_GETFAMILY					"GMCS_GETFAMILY"			// get family list
#define M_GMSC_GETFAMILY					"GMSC_GETFAMILY"			// get family list
#define M_GMCS_LOGOFFFAMILY					"GMCS_LOGOFFFAMILY"			// Logout family([d:FamilyID])
#define M_GMSC_LOGOFFFAMILY					"GMSC_LOGOFFFAMILY"			// Logout User([d:FamilyID][d:GMID])---Only To GM Tool, not GM Client
#define M_GMCS_OUTFAMILY					"GMCS_OUTFAMILY"			// Out family([d:FamilyID])
#define	M_GMCS_ACTIVE						"GMCS_ACTIVE"				// GM On/Off([b:On(1)/Off(0)][b:Is Tool(1)/GM Client(0))
#define	M_GMSC_ACTIVE						"GMSC_ACTIVE"				// GM On/Off([d:GM id][b:On(1)/Off(0)][b:UserType])
#define M_GMCS_SHOW							"GMCS_SHOW"					// GM Show/Hide([b:Show flag])
#define M_GMSC_SHOW							"GMSC_SHOW"					// GM Show/Hide/([d:GMid][b:Show flag])
//#define M_GMCS_GIVEITEM						"GMCS_GIVEITEM"				// Give item([d:FamilyID][d:Item id][d:Count])
//#define M_GMCS_GIVEMONEY					"GMCS_GIVEMONEY"			// Give money([d:FamilyID][d:Real money][d:Game money])
#define	M_GMCS_GETMONEY						"GMCS_GETMONEY"				// Get money info([d:FamilyID])
#define M_GMSC_GETMONEY						"GMSC_GETMONEY"				// Response for M_GMCS_GETMONEY([d:FamilyID][b:Family is][u:Family name]<d:Real money><d:Game money>)
#define	M_GMCS_GETITEM						"GMCS_GETITEM"				// Get item count([d:FamilyID][d:Item id])
#define M_GMSC_GETITEM						"GMSC_GETITEM"				// Response for M_GMCS_GETITEM([d:FamilyID][b:Family is][u:Family name]<d:Item id><d:Count>)
#define	M_GMCS_GETINVENEMPTY				"GMCS_GETINVENEMPTY"		// Is there empty inventory position([d:FamilyID])
#define M_GMSC_GETINVENEMPTY				"GMSC_GETINVENEMPTY"		// Response for M_GMCS_GETINVENEMPTY([d:FamilyID][b:Family is][u:Family name]<b:Empty is>)
#define M_GMCS_GETLEVEL						"GMCS_GETLEVEL"				// Get level([d:FamilyID])
#define M_GMSC_GETLEVEL						"GMSC_GETLEVEL"				// Response for M_GMCS_GETLEVEL([d:FamilyID][b:Family is][u:Family name]<b:Level>)
#define M_GMCS_SETLEVEL						"GMCS_SETLEVEL"				// Set level([d:FamilyID][b:Level])
#define M_GMCS_LISTCHANNEL					"GMCS_LISTCHANNEL"			// List room all channel id([d:roomid])
#define M_GMSC_LISTCHANNEL					"GMSC_LISTCHANNEL"			// Response list room all channel id([d:roomid][d:num][[d:channelid]])
#define M_GMCS_GET_GMONEY					"GMCS_GET_GMONEY"			// Get user's GMoney-Jifen ([d:UserID])
#define M_GMSC_GET_GMONEY					"GMSC_GET_GMONEY"			// Get user's GMoney-Jifen ([d:UserID][b:User exist]<d:GMoney>)

//#define M_GMCS_MAIL_SEND					"GMCS_MAIL_SEND"			// Send New System Mail ([d:toFID][u:Title][u:Content][b:count][ [d:ItemID][w:itemcount] ])
//#define M_GMSC_MAIL_SEND					"GMSC_MAIL_SEND"			// Response for M_GMCS_MAIL_SEND ([d:result][d:MailId][d:toFID][u:toFamiltName][s:DateTime])
#define M_GMSC_FAIL							"GMSC_FAIL"					// Fail ([d:result])
#define M_GMSC_ROOMCHAT						"GMSC_ROOMCHAT"				// Room chat([d:roomid][d:channelid][u:roomname][d:familyid][u:familyname][u:chat])

#define M_GMCS_ZAIXIAN_ANSWER				"GMCS_ZAIXIAN_ANSWER"		// GM's response chat([d:familyid][u:text])
#define M_GMSC_ZAIXIAN_ASK					"GMSC_ZAIXIAN_ASK"			// Client's ask chat([d:familyid][u:Familyname][u:text])
#define M_GMCS_ZAIXIAN_CONTROL				"GMCS_ZAIXIAN_CONTROL"		// GM's control code([d:familyid][d:control code])
#define M_GMSC_ZAIXIAN_END					"GMSC_ZAIXIAN_END"			// Client is end([d:familyid]);

// 금언기능
#define M_NT_SET_DBTIME						"NT_SET_DBTIME"				// Notice MS to FS for Current DB Time ([d:S1970])
#define M_GMSC_SILENCE_FAMILY				"GMSC_SILENCE_FAMILY"		// Send Silence Family info, Response of M_GMCS_GETFAMILY ([d:FID][d:RemainSeconds])
#define M_GMCS_SILENCE_SET					"GMCS_SILENCE_SET"			// Set/Reset Silence ([d:FID][d:Seconds, 0:Reset])
#define M_SC_SILENCE_TIME					"SC_SILENCE_TIME"			// Send Silence Remain Time to client ([d:S1970, 0:Reset])
#define M_NT_SILENCE_SET					"NT_SILENCE_SET"			// Notice MS to FS for Set/Reset Silence ([d:FID][d:S1970, 0:Reset])

// For Media Stream
#define		M_CS_SMINIT						"CS_SMINIT"				// Media init([u:MediaPath][b:IsAuthorKey])
#define		M_SC_SMINIT						"SC_SMINIT"				// Media init[d:length][c:]
#define		M_CS_SMSTART					"CS_SMSTART"			// Stream start
#define		M_SC_SMSTART					"SC_SMSTART"			// Stream start
#define		M_CS_SMSETSEG					"CS_SMSETSEG"			// Set Segment
#define		M_SC_SMENDSTREAMSEG				"SC_SMENDSTREAMSEG"		// End Segment
#define		M_CS_SMSTOP						"CS_SMSTOP"				// Stream stop
#define		M_CS_SMSEEK						"CS_SMSEEK"				// Stream seek([d:SeekTimeMS])
#define		M_SC_SMSEEK						"SC_SMSEEK"				// Stream seek([d:SeekTimeMS])
#define		M_CS_SMPAUSEANDREPLAY			"CS_SMPAUSEANDREPLAY"	// Stream pause and replay([b:bPause])
#define		M_SC_SMMEDIADATA				"SC_SMMEDIADATA"		// Stream data([s:data])
#define		M_SC_SMEND						"SC_SMEND"				// Stream end

// 소원관련
#define	M_CS_ADDWISH						"CS_ADDWISH"			// Add wish ([w:InvenPos][u:TargetName][u:Pray][d:SyncCode])
#define M_SC_WISH							"SC_WISH"				// a family start wish ([d:FID])
#define M_CS_WISH_LIST						"CS_WISH_LIST"			// request wish list ([d:Page][d:PageSize])
#define M_SC_WISH_LIST						"SC_WISH_LIST"			// send wish list ([d:AllCount][d:Page][ [d:FID][u:FName][d:WishTime] ])
#define M_CS_MY_WISH_LIST					"CS_MY_WISH_LIST"		// request my wish list ([d:Page][d:PageSize])
#define M_SC_MY_WISH_LIST					"SC_MY_WISH_LIST"		// send my wish list ([d:AllCount][d:Page][ [d:WishID][d:ItemID][u:TargetName][d:WishTime][d:DeleteTime] ])
#define M_CS_MY_WISH_DATA					"CS_MY_WISH_DATA"		// request my wish data ([d:WishID])
#define M_SC_MY_WISH_DATA					"SC_MY_WISH_DATA"		// send my wish data ([d:WishID][u:Pray])

// 종교구역에서 편지올리기 - 사양 없어짐
//#define M_SC_R_PAPER_LIST					"SC_R_PAPER_LIST"		// Send Paper Desk Status ([ [d:DeskNo][d:FID] ])
//#define M_CS_R_PAPER_START					"CS_R_PAPER_START"		// Request Paper ([d:DeskNo])
//#define M_SC_R_PAPER_START					"SC_R_PAPER_START"		// Answer Paper ([d:ErrorCode][d:FID][d:DeskNo])
//#define M_CS_R_PAPER_PLAY					"CS_R_PAPER_PLAY"		// Notice that writting Paper finished and start autoplay ([d:DeskNo])
//#define M_SC_R_PAPER_PLAY					"SC_R_PAPER_PLAY"		// Notice that writting Paper finished and start autoplay ([d:FID][d:DeskNo])
//#define M_CS_R_PAPER_END					"CS_R_PAPER_END"		// Paper Write End ([d:DeskNo][b:isOK])
//#define M_SC_R_PAPER_END					"SC_R_PAPER_END"		// Paper Write End ([d:FID][d:DeskNo][b:isOK])

// 열점추천기능
//#define M_GMCS_RECOMMEND_SET				"GMCS_RECOMMEND_SET"	// Set recommend room ([b:Index][d:RoomID][d:PhotoID][d:Date]), Index: 0~4
//#define M_CS_RECOMMEND_ROOM					"CS_RECOMMEND_ROOM"		// Request recommend room list
//#define M_SC_RECOMMEND_ROOM					"SC_RECOMMEND_ROOM"		// Send recommend room list ([ [b:Index][d:RoomID][d:PhotoID][d:Date] ])

// 공덕비관련
#define M_CS_VIRTUE_LIST					"CS_VIRTUE_LIST"		// Request virtue list
#define M_SC_VIRTUE_LIST					"SC_VIRTUE_LIST"		// Send virtue list ([d:AllCount][ [d:FID][u:FName][d:Virtue] ])
#define M_CS_VIRTUE_MY						"CS_VIRTUE_MY"			// Request my current virtue value
#define M_SC_VIRTUE_MY						"SC_VIRTUE_MY"			// Send current virtue value ([d:Virtue])

// 종교구역에서 행사기록관련
#define M_CS_R_ACT_INSERT					"CS_R_ACT_INSERT"		// Insert new action. ([b:NpcID][b:ActionType][b:Secret][u:Pray][b:ItemNum][d:SyncCode][[w:InvenPos]]), InvenPos=0xFFFF if no item
#define M_CS_R_ACT_MODIFY					"CS_R_ACT_MODIFY"		// Modify action's pray. ([d:PrayID][b:Secret][u:Pray])
#define M_CS_R_ACT_LIST						"CS_R_ACT_LIST"			// Request action list ([b:NpcID][d:Page][b:PageSize])
#define M_SC_R_ACT_LIST						"SC_R_ACT_LIST"			// Send action list ([b:NpcID][d:AllCount][d:Page][ [d:ActID][b:ActionType][d:FID][u:FName][d:ModelID][b:secret][d:S1970] ])
#define M_CS_R_ACT_MY_LIST					"CS_R_ACT_MY_LIST"		// Request my action list ([b:NpcID][d:Page][b:PageSize])
#define M_SC_R_ACT_MY_LIST					"SC_R_ACT_MY_LIST"		// Send my action list ([b:NpcID][d:AllCount][d:Page][ [d:ActID][b:ActionType][b:secret][d:S1970] ])
#define M_CS_R_ACT_PRAY						"CS_R_ACT_PRAY"			// Request action's pray ([d:ActID])
#define M_SC_R_ACT_PRAY						"SC_R_ACT_PRAY"			// Send action's pray ([d:ActID][[d:PrayID][d:FID][u:FName][b:secret][u:Pray][b:ItemNum][[d:ItemID]]])

// Action결과물관련
#define M_SC_ACT_RESULT_XIANBAO				"SC_ACT_RESULT_XIANBAO"	// Send Xianbao Result [d:S1970]
#define M_SC_ACT_RESULT_YISHI				"SC_ACT_RESULT_YISHI"	// Send Yishi Result [d:RoomID][b:NPCID][[b:YishiType][d:ActionID][d:FID][u:YishiFamilyName]]
#define M_SC_ACT_RESULT_ANCESTOR_JISI		"SC_ACT_RESULT_ANCESTOR_JISI"	// Send Ancestor Jisi Result [ [b:YishiType][d:ActionID][d:FID][u:JisiFamilyName] ]
#define M_SC_ACT_RESULT_ANCESTOR_DECEASED_XIANG		"SC_ACT_RESULT_ANCESTOR_DECEASED_XIANG"	// Send Ancestor Deceased Xiang Result [b:AncestorDeceasedIndex][ [d:ItemID][u:XiangFamilyName] ]
#define M_SC_ACT_RESULT_ANCESTOR_DECEASED_HUA		"SC_ACT_RESULT_ANCESTOR_DECEASED_HUA"	// Send Ancestor Deceased Hua Result [b:AncestorDeceasedIndex][ [d:ItemID][u:HuaFamilyName] ]
#define M_SC_ACT_RESULT_AUTO2				"SC_ACT_RESULT_AUTO2"	// Send Auto2 Result [d:AllCount(for ModelLevel)][ [d:ActionID][d:FID][u:JisiFamilyName] ]

// 조상탑기능
#define M_SC_ANCESTOR_TEXT					"SC_ANCESTOR_TEXT"		// Send Ancestor Text ([u:Text])
#define M_SC_ANCESTOR_DECEASED				"SC_ANCESTOR_DECEASED"	// Send Ancestor Deceased Info ([b:AncestorDeceasedIndex][b:DeadID][b:SurName][u:Name][b:SexID][d:BirthDate][d:DeadDate][u:BriefHistory][u:Domicile][u:Nation][d:PhotoID][b:PhotoType])
#define M_CS_ANCESTOR_TEXT_SET				"CS_ANCESTOR_TEXT_SET"	// Set Ancestor Text ([u:Text])
#define M_CS_ANCESTOR_DECEASED_SET			"CS_ANCESTOR_DECEASED_SET"	// Set Ancestor Deceased Info ([b:AncestorDeceasedIndex][b:DeadID][b:SurName][u:Name][b:SexID][d:BirthDate][d:DeadDate][u:BriefHistory][u:Domicile][u:Nation][d:PhotoID][b:PhotoType])

// AutoPlay기능
#define M_CS_AUTOPLAY_REQ_BEGIN				"CS_AUTOPLAY_REQ_BEGIN"	// Request AutoPlay Start ([d:SyncCode][w:InvenPos(AutoPlayItem)][b:AutoPlayCount][ [w:InvenPos(ActionItem,종합아이템)] ])
#define M_CS_AUTOPLAY_REQ					"CS_AUTOPLAY_REQ"		// Send AutoPlay Data ([d:RoomID][b:ActPos][u:Pray][b:Secret])
#define M_SC_AUTO_ENTER						"SC_AUTO_ENTER"			// Notify that new auto enter ([d:AutoFID][d:FID][u:FamilyName][d:ModelID][d:DressID][d:FaceID][d:HairID])
#define M_SC_AUTO_LEAVE						"SC_AUTO_LEAVE"			// Notify that new auto leave ([d:AutoFID])
//#define M_SC_AUTO_STATECH					"SC_AUTO_STATECH"		// Notify auto character state([d:AutoFID][d:X][d:Y][d:Z][d:direction][u:AnimationName][d:AniState][d:HoldItem])
//#define M_SC_AUTO_CHMETHOD					"SC_AUTO_CHMETHOD"		// Auto Character animation ([d:AutoFID][u:Method name][d:Parameter])
//#define M_SC_AUTO_HOLDITEM					"SC_AUTO_HOLDITEM"		// Auto Character holditem ([d:AutoFID][d:ItemID])
//#define M_SC_AUTO_MOVECH					"SC_AUTO_MOVECH"		// Auto Character move ([d:AutoFID][d:X][d:Y][d:Z])
#define M_NT_AUTOPLAY_REGISTER				"NT_AUTOPLAY_REGISTER"	// Register a AutoPlay, OpenRoomService->AutoPlayService ([d:RoomID][b:ActPos][d:IsXDG][d:FID][u:FName][d:ModelID][d:DressID][d:FaceID][d:HairID][u:Pray][b:Secret][ [d:ItemID] (6개 혹은 9개) ][d:UsedItemID(for RoomExp)][b:UsedItemMoneyType(for RoomExp)])
#define M_NT_ADDACTIONMEMO					"NT_ADDACTIONMEMO"		// Add new action memo AutoPlayService->OpenRoomService ([d:UnitID][d:RoomID][d:FID][u:FName][b:ActPos][d:IsXDG][u:Pray][b:Secret][ [d:ItemID] ][d:UsedItemID(for RoomExp)][b:UsedItemMoneyType(for RoomExp)])
#define M_NT_ADDACTIONMEMO_OK				"NT_ADDACTIONMEMO_OK"	// Notice that Autoplay ready OpenRoomService->AutoPlayService ([d:UnitID][d:Param])
#define M_NT_AUTOPLAY_REQ					"NT_AUTOPLAY_REQ"		// Request AutoPlay, AutoPlayService->OpenRoomService ([d:RoomID][d:AutoPlayerFID][b:ActPos][d:FID])
#define M_NT_AUTOPLAY_ANS					"NT_AUTOPLAY_ANS"		// Response of M_NT_ACT_REQ, OpenRoomService->AutoPlayService ([d:AutoPlayerFID][d:result, 0:success][d:roomID][w:SceneID][b:RoomLevel][w:frontend service SID of FID])
#define M_NT_AUTOPLAY_START					"NT_AUTOPLAY_START"		// Start AutoPlay, AutoPlayService->OpenRoomService (Param[d:AutoPlayerFID][b:ActPos][d:FID][u:FName][d:ModelID][d:DressID][d:FaceID][d:HairID][d:state][d:dir][d:X][d:Y][d:Z])
#define M_NT_AUTOPLAY_END					"NT_AUTOPLAY_END"		// End AutoPlay, AutoPlayService->OpenRoomService ([d:RoomID][d:AutoPlayerFID][b:ActPos])
//#define M_NT_AUTOPLAY_STATECH				"NT_AUTOPLAY_STATECH"	// Set Auto character state ([d:AutoPlayerFID][d:X][d:Y][d:Z][d:direction][u:AnimationName][d:AniState][d:HoldItem])
//#define M_NT_AUTOPLAY_CHMETHOD				"NT_AUTOPLAY_CHMETHOD"	// Auto Character animation ([d:AutoPlayerFID][u:Method name][d:Parameter])
//#define	M_NT_AUTOPLAY_HOLDITEM				"NT_AUTOPLAY_HOLDITEM"	// Hold item([d:AutoPlayerFID][d:ItemID])
//#define M_NT_AUTOPLAY_MOVECH				"NT_AUTOPLAY_STATECH"	// Move Auto character ([d:AutoPlayerFID][d:X][d:Y][d:Z])

#define M_SC_AUTOPLAY_STATUS				"SC_AUTOPLAY_STATUS"	// Notice Autoplay Status to master ([d:RoomID][b:ActPos][d:Status])

// 천원특사기능
#define M_CS_AUTOPLAY2_REQ					"CS_AUTOPLAY2_REQ"		// Send AutoPlay2 Data ([d:SyncCode][w:InvenPos(AutoPlay2Item)][b:AutoPlay2Count][[d:RoomID]])

// 행사예약기능
#define M_SC_AUTOPLAY3_LIST					"SC_AUTOPLAY3_INFO"		// 예약행사자료를 보낸다. ([b:StartFlag, 1:Start, 0:Continue][[d:RoomID][u:RoomName][M1970:StartTime][d:YuyueDays][d:CountPerDay][d:ItemID_Yishi][d:ItemID_Xianbao][d:ItemID_Fishfood][d:ItemID_Tian][d:ItemID_Di][d:FinishedDays]])
#define M_CS_AUTOPLAY3_REGISTER				"CS_AUTOPLAY3_REGISTER"	// 예약행사자료를 등록한다. ([w:InvenPos(AutoPlay3Item)][d:SyncCode][d:RoomID][u:RoomName][M1970:StartTime][d:YuyueDays][d:CountPerDay][d:ItemID_Yishi][d:ItemID_Xianbao][d:ItemID_Fishfood][d:ItemID_Tian][d:ItemID_Di])
#define M_NT_AUTOPLAY3_REGISTER				"NT_AUTOPLAY3_REGISTER"	// Register a AutoPlay3, OpenRoomService->WS->LS ([d:RoomID][u:RoomName][d:FID][u:FamilyName][d:ModelID][d:DressID][d:FaceID][d:HairID][M1970:StartTime][d:YuyueDays][d:CountPerDay][d:YishiTaocanItemID][d:XianbaoTaocanItemID][d:YangyuItemID][d:ItemID_Tian][d:ItemID_Di])
#define M_NT_AUTOPLAY3_START_REQ			"NT_AUTOPLAY3_START_REQ"// AutoPlay3이 시간이 되여 시작하라는것을 통지한다. LS->WS->MS ([d:YishiTimeMin][d:Autoplay3ID][d:RoomID][d:FID][u:FamilyName][d:ModelID][d:DressID][d:FaceID][d:HairID][d:CountPerDay][d:YishiTaocanItemID][d:XianbaoTaocanItemID][d:YangyuItemID][d:ItemID_Tian][d:ItemID_Di])
#define M_NT_AUTOPLAY3_START_OK				"NT_AUTOPLAY3_START_OK"	// M_NT_AUTOPLAY3_START_REQ의 응답  MS->WS->LS ([d:YishiTimeMin][d:Autoplay3ID][d:Param])
#define M_NT_AUTOPLAY3_EXP_ADD_ONLINE		"NT_AUTOPLAY3_EXP_ADD_ONLINE"// 예약행사에 의한 경험치증가 통지 LS->WS->MS->OROOM ([d:FID][d:YishiTimeMin][d:Autoplay3ID][u:FamilyName][d:RoomID][u:RoomName][d:CountPerDay][d:YishiTaocanItemID][d:XianbaoTaocanItemID][d:YangyuItemID][d:ItemID_Tian][d:ItemID_Di][d:Param])
#define M_NT_AUTOPLAY3_EXP_ADD_OFFLINE		"NT_AUTOPLAY3_EXP_ADD_OFFLINE"// 예약행사에 의한 경험치증가 통지 LS->OwnWS->MS->OROOM ([d:FID][d:YishiTimeMin][d:Autoplay3ID][u:FamilyName][d:RoomID][u:RoomName][d:CountPerDay][d:YishiTaocanItemID][d:XianbaoTaocanItemID][d:YangyuItemID][d:ItemID_Tian][d:ItemID_Di][d:Param])
#define M_NT_AUTOPLAY3_EXP_ADD_OK			"NT_AUTOPLAY3_EXP_ADD_OK"// M_NT_AUTOPLAY3_EXP_ADD_ONLINE & M_NT_AUTOPLAY3_EXP_ADD_OFFLINE 의 응답 OROOM->WS->LS ([d:YishiTimeMin][d:Autoplay3ID])
#define M_NT_AUTOPLAY3_FAIL					"NT_AUTOPLAY3_FAIL"		// Autoplay3이 실패하였음을 LS에 통지한다. MS->WS->LS([d:RoomID][d:Param, 1-방열기 실패 , 2-방기한지남])
#define M_NT_AUTOPLAY3_TIANDI				"NT_AUTOPLAY3_TIANDI"	// Autoplay3에서 하늘땅의식 등록 통지. MS->ReligionRoomService([d:FID][u:FamilyName][d:TianItemID][u:TianPray][d:DiItemID][d:DiPray][d:CountPerDay])

// Manager써비스 Player사용자 방입장/방퇴장 관련
#define M_NT_PLAYER_LOGIN					"NT_PLAYER_LOGIN"		// Player Login ([d:FID][d:UserID][u:FamilyName][w:clientFsSid])
#define M_NT_PLAYER_LOGOUT					"NT_PLAYER_LOGOUT"		// Player Logout ([d:FID])
#define M_NT_PLAYER_ENTERROOM				"NT_PLAYER_ENTERROOM"	// Player Enter a room ([d:FID][d:RoomID][d:ChannelID])
#define M_NT_PLAYER_LEAVEROOM				"NT_PLAYER_LEAVEROOM"	// Player Leave room ([d:FID][d:RoomID][d:ChannelID])
//#define M_NT_PLAYER_CHANGECHANNEL			"NT_PLAYER_CHANGECHANNEL"	// Player Changed channel ([d:FID][d:RoomID][d:ChannelID])

// Manager써비스 Room관리용
#define M_NT_ROOM_CREATE_REQ				"NT_ROOM_CREATE_REQ"	// Request create room. ManagerService->OpenRoomService ([d:RoomID])
#define M_NT_ROOM_CREATED					"NT_ROOM_CREATED"		// Notice room created. OpenRoomService->ManagerService ([d:RoomID][d:Result][w:SceneID][u:RoomName][d:MasterFID])
#define M_NT_ROOM_DELETED					"NT_ROOM_DELETED"		// Notice room deleted. OpenRoomService->ManagerService ([d:RoomID])

// 물고기, 꽃
#define M_CS_FISH_FOOD						"CS_FISH_FOOD"				// Give food to fish ([d:StoreLockID][d:SyncCode][w:InvenPos][d:ItemID][d:FishScopeID])
#define M_SC_UPDATE_FISH					"SC_UPDATE_FISH"			// Notice fish update ([d:FishExp][d:FID][d:FishScopeID][d:FishFoodID][d:FoodCount]), if enter room, FID=0, FishScopeID=0
#define M_CS_FLOWER_NEW						"CS_FLOWER_NEW"				// Set New Flower ([d:StoreLockID][d:SyncCode][w:InvenPos][d:ItemID])
#define M_CS_FLOWER_WATER					"CS_FLOWER_WATER"			// Give water to flower
//#define M_SC_FLOWER_RESULT				"SC_FLOWER_RESULT"			// Give water to flower Failed!! [d:ErrorCode][d:RemainSecond]
#define M_SC_UPDATE_FLOWER					"SC_UPDATE_FLOWER"			// Notice flower update ([d:FlowerID][d:FlowerLevel][d:RemainSecond][d:FID][d:FlowerFID][u:FlowerFamilyName][b:flag, 0:normal,1:YuYue]), if enter room, FID=0 else if FlowerLevel=0 then [flower new], else [flower water]
#define M_CS_FLOWER_END						"CS_FLOWER_END"				// Flower New & Water Finished
#define M_CS_FLOWER_NEW_REQ					"CS_FLOWER_NEW_REQ"			// Request New Flower ([d:CallKey])
#define M_CS_FLOWER_WATER_REQ				"CS_FLOWER_WATER_REQ"		// Request Give water to flower ([d:CallKey])
#define M_SC_FLOWER_NEW_ANS					"SC_FLOWER_NEW_ANS"			// [d:ErrorCode][d:CallKey]
#define M_SC_FLOWER_WATER_ANS				"SC_FLOWER_WATER_REQ"		// [d:ErrorCode][d:RemainSecond][d:CallKey]
#define M_CS_FLOWER_WATERTIME_REQ			"CS_FLOWER_WATERTIME_REQ"	// Request Give water time to flower
#define M_SC_FLOWER_WATERTIME_ANS			"SC_FLOWER_WATERTIME_REQ"	// [d:RemainSecond]
#define	M_SC_MSTFISH						"SC_MSTFISH"				// Send Fish's master data ([ [b:FishLevel][d:Exp] ])
#define M_CS_GOLDFISH_CHANGE				"CS_GOLDFISH_CHANGE"		// GoldFish Change ([d:GoldFishScopeID][b:count][[b:GoldFishIndex, 0~][d:StoreLockID][d:SyncCode][w:InvenPos]])
#define M_SC_UPDATE_GOLDFISH				"SC_UPDATE_GOLDFISH"		// Notice goldfish update ([d:GoldFishScopeID][ [d:GoldFishID][d:RemainTimeSecond][d:FID][u:FName] ])

// 기념관 보물창고관련
#define M_CS_GET_ROOMSTORE					"CS_GET_ROOMSTORE"			// Request RoomStore ([d:StoreSyncCode])
#define M_SC_ROOMSTORE						"SC_ROOMSTORE"				// Send RoomStore Data ([d:StoreSyncCode][ [d:ItemID][w:ItemCount] ])
#define M_CS_ADD_ROOMSTORE					"CS_ADD_ROOMSTORE"			// Add Item To RoomStore ([d:SyncCode][b:protected][u:comment][b:Count][ [w:InvenPos][b:ItemCount] ])
#define M_SC_ADD_ROOMSTORE_RESULT			"SC_ADD_ROOMSTORE_RESULT"	// Send AddRoomStore Result ([d:SyncCode][d:Result]) (E_ROOMSTORE_FULL)
#define M_CS_GET_ROOMSTORE_HISTORY			"CS_GET_ROOMSTORE_HISTORY"	// Request RoomStore History ([w:Year][b:Month][b:Flag, 0:All,1:Add,2:Use][b:OwnDataOnly][d:Page])
#define M_SC_ROOMSTORE_HISTORY				"SC_ROOMSTORE_HISTORY"		// Send RoomStore History ([d:RoomID][w:Year][b:Month][b:Flag, 0:All,1:Add,2:Use][b:OwnDataOnly][d:Page][d:AllCount][ [d:ListID][d:FID][u:FamilyName][b:Flag, 0:All,1:Add,2:Use][d:MinutesSince1970] ])
#define M_CS_GET_ROOMSTORE_HISTORY_DETAIL	"CS_GET_ROOMSTORE_HISTORY_DETAIL"	// Request RoomStore History Detail Info ([d:ListID])
#define M_SC_ROOMSTORE_HISTORY_DETAIL		"SC_ROOMSTORE_HISTORY_DETAIL"	// Send RoomStore History Detail Info ([d:ListID][b:protected][u:comment][b:Shield][ [d:ItemID][b:ItemCount] ])
#define M_CS_ROOMSTORE_LOCK					"CS_ROOMSTORE_LOCK"			// Lock RoomStore Items ([b:Count][ [d:ItemID] ])
#define M_SC_ROOMSTORE_LOCK					"SC_ROOMSTORE_LOCK"			// Send RoomStore Lock Result ([d:ErrorCode][d:StoreLockID]),  it StoreLockID=0 then lock failed.
#define M_CS_ROOMSTORE_UNLOCK				"CS_ROOMSTORE_UNLOCK"		// Unlock RoomStore Items ([d:StoreLockID])
#define M_SC_ROOMSTORE_STATUS				"SC_ROOMSTORE_STATUS"		// Send RoomStore's Status ([d:ItemCount][ [d:LastItemID] ])
#define M_CS_ROOMSTORE_LASTITEM_SET			"CS_ROOMSTORE_LASTITEM_SET"	// Set RoomStore's Last Item (In Activity) ([b:Count][ [d:LastItemID] ])
#define M_CS_ROOMSTORE_HISTORY_MODIFY		"CS_ROOMSTORE_HISTORY_MODIFY"	// Modify RoomStore Info ([d:ListID][b:protected][u:comment])
#define M_CS_ROOMSTORE_HISTORY_DELETE		"CS_ROOMSTORE_HISTORY_DELETE"	// Delete RoomStore Info ([d:ListID])
#define M_CS_ROOMSTORE_HISTORY_SHIELD		"CS_ROOMSTORE_HISTORY_SHIELD"	// Shield or unshield RoomStore Info ([d:ListID][b:shield])
#define M_CS_ROOMSTORE_GETITEM				"CS_ROOMSTORE_GETITEM"		// Get Items from RoomStore ([b:Count][ [w:InvenPos][d:ItemID][w:ItemCount] ])
#define M_SC_ROOMSTORE_GETITEM				"SC_ROOMSTORE_GETITEM"		// Response of M_CS_ROOMSTORE_GETITEM ([ErrorCode])

// 中奖기능
#define M_SC_PRIZE							"SC_PRIZE"					// Send Prize ([d:FID][b:PrizeType,0:None,1:Yishi,2:Xianbao,3:Flower,4:Fish,5:4레벨행운][d:PrizeID][w:InvenPos, 0xFFFF=InvenFull])
#define M_SC_LARGEACTPRIZE					"SC_LARGEPRIZE"				// Send LargeAct Prize ([b:Bless1AddNum][b:Bless2AddNum][b:Bless3AddNum][b:Bless4AddNum][[w:InvenPos][d:ItemID][b:ItemNum]])
#define M_SC_YUWANGPRIZE					"SC_YUYANGPRIZE"			// Send YuYangTeXiaoPrize([d:FID][d:Param])
#define M_SC_ADDEDJIFEN						"SC_ADDEDJIFEN"				// Send added jifen([d:addedJifen])
#define M_NT_REMOVEJIFEN					"NT_REMOVEJIFEN"			// Remove added jifen([d:FID])

// 축복카드기능
#define M_SC_BLESSCARD_LIST					"SC_BLESSCARD_LIST"			// Send BlessCard List ([[b:BlessCardID][b:Count]])
#define M_CS_BLESSCARD_GET					"CS_BLESSCARD_GET"			// Request for get BlessCard
#define M_SC_BLESSCARD_GET					"SC_BLESSCARD_GET"			// Response for M_CS_BLESSCARD_GET ([d:ErrorCode,0:ok][b:BlessCardID])
#define M_CS_BLESSCARD_SEND					"CS_BLESSCARD_SEND"			// Send BlessCard to other ([b:BlessCardID][d:tarfetFID])
#define M_SC_BLESSCARD_SEND					"SC_BLESSCARD_SEND"			// Response for M_CS_BLESSCARD_SEND ([d:ErrorCode])
#define M_SC_BLESSCARD_RECEIVE				"SC_BLESSCARD_RECEIVE"		// Notice that receive BlessCard ([b:BlessCardID][d:fromFID][u:fromFName])
#define M_NT_BLESSCARD_USED					"NT_BLESSCARD_USED"			// Notice from ManagerService to OpenroomService that used used Blesscard (for EXP) ([d:FID])
#define M_NT_LARGEACTPRIZE					"NT_LARGEACTPRIZE"			// Notice largeact prize

// 사용후기
//#define M_CS_REVIEW_LIST					"CS_REVIEW_LIST"			// Request Review List
//#define M_SC_REVIEW							"SC_REVIEW"					// Send Review ([b:start][b:ReviewID,1~10][u:Name][u:Content][s:Url][b:end])
//#define M_GMCS_REVIEW_ADD					"GMCS_REVIEW_ADD"			// Add a Review ([b:ReviewID,1~10][u:Name][u:Content][s:Url])
//#define M_GMCS_REVIEW_MODIFY				"GMCS_REVIEW_MODIFY"		// Modify a Review ([b:ReviewID,1~10][u:Name][u:Content][s:Url])
//#define M_GMCS_REVIEW_DELETE				"GMCS_REVIEW_DELETE"		// Delete a Review ([b:ReviewID,1~10])

// 공공구역에서 Frame에 걸려있는 체험방자료
#define M_GMCS_PUBLICROOM_FRAME_SET			"GMCS_PUBLICROOM_FRAME_SET"	// Set Publicroom's frame ([d:RoomID][b:Index][d:PhotoID][d:ExpRoomID])
#define M_CS_PUBLICROOM_FRAME_LIST			"CS_PUBLICROOM_FRAME_LIST"	// Request Publicroom's frame list
#define M_SC_PUBLICROOM_FRAME_LIST			"SC_PUBLICROOM_FRAME_LIST"	// Send Publicroom's frame list ([ [b:Index][d:PhotoID][d:ExpRoomID] ])

// 공공구역에서 대형행사조직
//#define M_CS_LARGEACT_LIST					"CS_LARGEACT_LIST"			// Request LargeAct list ([d:RoomID])
#define M_SC_LARGEACT_LIST					"SC_LARGEACT_LIST"			// Send LargeAct list [d:RoomID][b:flagStart][d:ActID][u:title][u:comment][u:FlagText][u:ActMean][M1970:accepttime][M1970:starttime][d:PhotoID0][d:UserCount][b:BlessCard1Num][b:BlessCard2Num][b:BlessCard3Num][b:BlessCard4Num][b:GiveItemMode][b:ItemTypeNum][[d:ItemID][w:ItemNum]][b:CustomCount][d:CustomID][u:CustomName][u:Notify1][u:Notify2][b:flagEnd]
#define M_GMCS_LARGEACT_SET					"GMCS_LARGEACT_SET"			// Insert or Modify LargeAct ([d:RoomID][d:ActID,0=insert,other=modify][u:title,""=delete][u:comment][u:FlagText][u:ActMean][d:option][M1970:accepttime][M1970:starttime][20x[itemids]][7x[photoids]][b:BlessCard1Num][b:BlessCard2Num][b:BlessCard3Num][b:BlessCard4Num][b:GiveItemMode][b:ItemTypeNum][[d:ItemID][w:ItemNum]][b:CustomCount][[d:CustomID][u:CustomName]][u:Notify1][u:Notify2])
#define M_GMSC_LARGEACT_NEWID				"GMSC_LARGEACT_INDEX"		// Send LargeAct's ActID when Insert new LargeAct ([d:ActID])
#define M_GMCS_LARGEACT_DETAIL				"GMCS_LARGEACT_DETAIL"		// Request LargeAct Detail Info ([d:RoomID][d:ActID])
#define M_GMSC_LARGEACT_DETAIL				"GMSC_LARGEACT_DETAIL"		// Send LargeAct Detail Info ([d:ActID][d:option][20x[itemids]][7x[photoids]])
#define M_GMSC_LARGEACT_SET					"GMSC_LARGEACT_SET"			// Result Insert or Modify LargeAct ([b:SuccessFlag])
#define M_CS_LARGEACT_CURRENT				"CC_LARGEACT_CURRENT"		// Request Current LargeAct data
#define M_SC_LARGEACT_CURRENT				"SC_LARGEACT_CURRENT"		// Send Current LargeAct data ([d:ActID,0:NoData][u:title][u:comment][u:FlagText][u:ActMean][M1970:accepttime][M1970:starttime][d:UserCount][7x[photoids]])
#define M_SC_LARGEACT_USERNUM				"SC_LARGEACT_USERNUM"		// Send Current request num([d:ActID][d:ChannelCount][d:TotalCount])

// 공공구역에서 대형행사참가/진행
#define M_CS_LARGEACT_REQUEST				"CS_LARGEACT_REQUEST"		// Request to enter LargeAct([d:RoomID][d:ReqSyncCode])
#define M_SC_LARGEACT_REQUEST				"SC_LARGEACT_REQUEST"		// Response of M_CS_LARGEACT_REQUEST ([d:ErrorCode,E_LARGEACT_][d:UserCount][d:EnterChannelID][d:ReqSyncCode])
#define M_CS_LARGEACT_CANCEL				"CS_LARGEACT_Cencel"		// Cencel to enter LargeAct ([d:RoomID])
#define M_SC_LARGEACT_PREPARE				"SC_LARGEACT_PREPARE"		// Notice that prepare for start LargeAct
#define M_SC_LARGEACT_START					"SC_LARGEACT_START"			// Notice that start LargeAct ([d:option][20x[itemids]][d:UserCount][[d:FID][w:Pos]][u:EndingNotice])
#define M_SC_LARGEACT_OUT					"SC_LARGEACT_OUT"			// Notice that a user out from LargeAct  ([d:FID])
#define M_CS_LARGEACT_STEP					"CS_LARGEACT_STEP"			// Send LargeAct Step Command ([d:Step,100-Finished])
#define M_SC_LARGEACT_STEP					"SC_LARGEACT_STEP"			// Send LargeAct Step Command to all users in room ([d:Step])
#define M_CS_LARGEACT_USEITEM				"CS_LARGEACT_USEITEM"		// Use item for large act([w:invenpos][d:synccode])
#define M_SC_LARGEACT_INFOCHANGE			"SC_LARGEACT_INFOCHANGE"	// Notify largeact info change
#define M_SC_LARGEACT_READYVIP				"SC_LARGEACT_READYVIP"		// Ready Largeact for vip([d:ActID])

// 头香정보
#define M_CS_ADD_TOUXIANG				    "CS_PUT_TOUXIANG"			// add touxiang ([b:actPos][d:item id])
#define M_SC_ADD_TOUXIANG					"SC_ADD_TOUXIANG"			// added touxiang([b:count][[b:actPos][d:item id][u:Family name][S1970:addTime]])
#define M_SC_DEL_TOUXIANG					"SC_DEL_TOUXIANG"			// del touxiang([b:count][[b:actPos]])

// 불교구,공공구역 념불읽기
#define M_CS_NIANFO_BEGIN					"CS_NIANFO_BEGIN"			// user want NianFo ([d:npc service id])
#define M_SC_NIANFO_BEGIN					"SC_NIANFO_BEGIN"			// user started NianFo([b:count]([d:npc service id][d:FID]))
#define M_CS_NIANFO_END						"CS_NIANFO_END"				// user want to fisinsh NianFo()
#define M_SC_NIANFO_END						"SC_NIANFO_END"				// user fisinshed NianFo([d:npc service id][d:FID])

// 불교구 대전내에서 념불읽기
#define M_CS_NEINIANFO_BEGIN				"CS_NEINIANFO_BEGIN"		// user want DaDianNeiNianFo ([d:npc service id])
#define M_SC_NEINIANFO_BEGIN				"SC_NEINIANFO_BEGIN"		// user started DaDianNeiNianFo([b:count]([d:npc service id][d:FID]))
#define M_CS_NEINIANFO_END					"CS_NEINIANFO_END"			// user want to fisinsh DaDianNeiNianFo()
#define M_SC_NEINIANFO_END					"SC_NEINIANFO_END"			// user fisinshed DaDianNeiNianFo([d:npc service id][d:FID])

// 불교구역대형행사설정관련
#define M_SC_BY_CURRENT				"SC_BY_CURRENT"				// 현재 채널에 설정된 행사정보를 종합적으로 통지	([d:행사id][b:행사분류 | (actCycle << 4)][d:편집자id][u:편집자이름][u:행사대상][u:행사류형][u:기원내용][d:행사시작시간][w:최대참가수][w:현재참가수])	채널에 캐릭터가 들어올때 한번 통지한다. 그후 행사정보설정이 변경될때마다 통지한다. [현재참가수]에 대한 정보가 변할때는 별도의 파케트로 통지한다.
#define M_GMCS_SBY_LIST				"GMCS_SBY_LIST"				// 이미 존재하는 모든 체계대형행사목록요청		
#define M_GMSC_SBY_LIST				"GMSC_SBY_LIST"				// 이미 존재하는 모든 체계대형행사목록을 통지	([b:개수][[d:목록id][u:행사대상][u:행사류형][b:행사주기속성][d:행사시작시간][b:행사음성속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])
#define M_GMCS_SBY_DEL				"GMCS_SBY_DEL"				// 이미 존재하는 체계대형행사를 삭제	([d:목록id])
#define M_GMSC_SBY_DELRES			"GMSC_SBY_DELRES"			// 이미 존재하는 체계대형행사삭제에 대한 응답	([d:응답코드][d:목록id])
#define M_GMCS_SBY_EDIT				"GMCS_SBY_EDIT"				// 이미 존재하는 체계대형행사에 대한 편집	([d:목록id][u:행사대상][u:행사류형][b:행사주기속성][d:행사시작시간][b:행사음성속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])	
#define M_GMSC_SBY_EDITRES			"GMSC_SBY_EDITRES"			// 이미 존재하는 체계대형행사편집에 대한 응답	([d:응답코드][d:목록id][u:행사대상][u:행사류형][b:행사주기속성][d:행사시작시간][b:행사음성속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])	[응답코드]가 령(성공)인경우에만 뒤의 값들이 존재한다.
#define M_GMCS_SBY_ADD				"GMCS_SBY_ADD"				// 새로운 체계대형행사 추가	([u:행사대상][u:행사류형][b:행사주기속성][d:행사시작시간][b:행사음성속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])	
#define M_GMSC_SBY_ADDRES			"GMSC_SBY_ADDRES"			// 새로운 체계대형행사추가에 대한 응답	([d:응답코드][d:목록id][u:행사대상][u:행사류형][b:행사주기속성][d:행사시작시간][b:행사음성속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])	[응답코드]가 령(성공)인경우에만 뒤의 값들이 존재한다.

// 불교구역체계대형행사관련
#define M_CS_SBY_ADDREQ				"CS_SBY_ADDREQ"				// 체계대형행사참가신청	([d:행사id])	
#define M_SC_SBY_ADDRES				"SC_SBY_ADDRES"				// 체계대형행사참가신청에 대한 응답	([d:응답코드][d:행사id][w:참가위치][d:참가채널ID])	[응답코드]가 령(성공)인경우에만 뒤의 값이 존재한다.[참가위치]는 령시작이다.
#define M_SC_SBY_ADDUSER			"SC_SBY_ADDUSER"			// 체계대형행사참가자 추가통보	([d:행사id][d:참가자id][w:참가위치][w:현재참가수])	채널의 전체캐릭터들에게 통보
#define M_CS_SBY_EXIT				"CS_SBY_EXIT"				// 체계대형행사참가자 탈퇴통보(탈퇴자로부터)	([d:행사id])	
#define M_CS_SBY_OVER				"CS_SBY_OVER"				// 체계대형행사완료통보([d:행사id])
#define M_SC_SBY_EXITUSER			"SC_SBY_EXITUSER"			// 체계대형행사참가자 탈퇴통보	([d:행사id][d:탈퇴자id][w:참가위치][w:현재참가수])	채널의 전체캐릭터들에게 통보
#define M_SC_SBY_START				"SC_SBY_START"				// 체계대형행사시작([d:행사id][b:행사음성속성][b:행사아이템개수][[d:행사아이템id]])
#define M_SC_SBY_OVER				"SC_SBY_OVER"				// 체계대형행사완료	([d:행사id])
#define M_SC_SBY_CURSTATE			"SC_SBY_CURSTATE"			// 진행중인 체계대형행사상태 통지	([d:행사id][b:행사음성속성][b:행사아이템개수][[d:행사아이템id]][w:행사경과시간S][w:현재참가수][[d:참가자id][w:참가위치]])	채널에 캐릭터가 들어올때 한번 통지한다.

// 불교구역개인대형행사관련
#define M_CS_PBY_MAKE				"CS_PBY_MAKE"				// 개인대형행사만들기	([u:행사대상][u:행사류형][b:공개속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])
#define M_SC_PBY_MAKERES			"SC_PBY_MAKERES"			// 개인대형행사만들기에 대한 응답	([d:응답코드][d:행사id])	[응답코드]가 령(성공)인경우에만 뒤의 값이 존재한다. [행사id]는 행사기간 행사를 구분하기 위한 림시값으로 사용된다.
#define M_CS_PBY_SET				"CS_PBY_SET"				// 개인대형행사설정	([d:행사id][u:행사대상][u:행사류형][b:공개속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])	
#define M_SC_PBY_SET				"SC_PBY_SET"				// 개인대형행사설정결과	([d:응답코드][d:행사id])
#define M_CS_PBY_JOINSET			"CS_PBY_JOINSET"			// 개인대형행사참가정보설정 ([d:행사id][b:공개속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])
#define M_CS_PBY_ADDREQ				"CS_PBY_ADDREQ"				// 개인대형행사참가신청	([d:행사id][b:공개속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])
#define M_SC_PBY_ADDRES				"SC_PBY_ADDRES"				// 개인대형행사참가신청에 대한 응답	([d:응답코드][d:행사id][w:참가위치])	[응답코드]가 령(성공)인경우에만 뒤의 값이 존재한다.[참가위치]는 령시작이다.[경과시간]은 행사가 만들어진후부터의 경과시간이다.
#define M_SC_PBY_ADDUSER			"SC_PBY_ADDUSER"			// 개인대형행사참가자 추가통보	([d:행사id][d:참가자id][w:참가위치][w:현재참가수])	채널의 전체캐릭터들에게 통보
#define M_CS_PBY_EXIT				"CS_PBY_EXIT"				// 개인대형행사참가자 탈퇴통보(탈퇴자로부터)	([d:행사id])
#define M_SC_PBY_EXITUSER			"SC_PBY_EXITUSER"			// 개인대형행사참가자 탈퇴통보	([d:행사id][d:탈퇴자id][w:참가위치][w:현재참가수])	채널의 전체캐릭터들에게 통보
#define M_CS_PBY_UPDATESTATE		"CS_PBY_UPDATESTATE"		// 개인대형행사진척통보(주최자로부터)	([d:행사id][w:행사진척단계])	[행사진척단계]에서 시작, 끝을 표현한다.
#define M_SC_PBY_UPDATESTATE		"SC_PBY_UPDATESTATE"		// 개인대형행사진척통보	([d:행사id][w:행사진척단계][b:행사아이템개수][[d:행사아이템id]])	채널의 전체캐릭터들에게 통보
#define M_SC_PBY_CURSTATE			"SC_PBY_CURSTATE"			// 진행중인 개인대형행사상태 통지	([d:행사id][b:행사아이템개수][[d:행사아이템id]][w:행사진척단계][w:단계경과시간S][w:현재참가수][[d:참가자id][w:참가위치]])	채널에 캐릭터가 들어올때 한번 통지한다.
#define M_CS_PBY_CANCEL				"CS_PBY_CANCEL"				// 개인대형행사취소통보(주최자로부터)	([d:행사id])
#define M_SC_PBY_CANCEL				"SC_PBY_CANCEL"				// 개인대형행사취소통보	([d:행사id])	채널의 전체캐릭터들에게 통보
#define M_CS_PBY_OVERUSER			"CS_PBY_OVERUSER"			// 개인대형행사참가자들이 행사가 끝났다는것을 통보한다.	([d:행사id])
#define M_SC_PBY_OVERALL			"SC_PBY_OVERALL"			// 개인대형행사가 완전히 끝났다는것을 써버에서 통지한다. ([d:행사id])
#define M_CS_PBY_HISLIST			"CS_PBY_HISLIST"			// 개인대형행사리력요청	([d:페지번호(령시작)][d:PageSize])
#define M_SC_PBY_HISLIST			"SC_PBY_HISLIST"			// 개인대형행사리력	([d:Allcount][d:페지번호(령시작)][[d:리력목록ID][d:주최자ID][u:주최자이름][d:행사시간]])
#define M_CS_PBY_MYHISLIST			"CS_PBY_MYHISLIST"		// 나의 개인대형행사리력요청	([d:페지번호(령시작)][d:PageSize])
#define M_SC_PBY_MYHISLIST			"SC_PBY_MYHISLIST"		// 나의 개인대형행사리력	([d:Allcount][d:페지번호(령시작)][[d:리력목록ID][d:행사시간]])
#define M_CS_PBY_HISINFO			"CS_PBY_HISINFO"			// 개인대형행사의 주행사정보요청	([d:리력목록ID])
#define M_SC_PBY_HISINFO			"SC_PBY_HISINFO"			// 개인대형행사의 주행사정보	([d:리력목록ID][u:행사대상][u:행사류형][b:공개속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]][d:참가자수][[d:보조목록ID][d:참가자ID][u:참가자이름][d:참가시간]])
#define M_CS_PBY_SUBHISINFO			"CS_PBY_SUBHISINFO"		// 개인대형행사의 보조행사정보요청	([d:보조목록ID])
#define M_SC_PBY_SUBHISINFO			"SC_PBY_SUBHISINFO"		// 개인대형행사의 보조행사정보	([d:보조목록ID][b:공개속성][u:기원내용][b:행사아이템개수][[d:행사아이템id]])
#define M_CS_PBY_HISMODIFY			"CS_PBY_HISMODIFY"		// 개인대형행사의 주행사정보변경	([d:리력목록ID][b:공개속성][u:기원내용])
#define M_CS_PBY_SUBHISMODIFY		"CS_PBY_SUBHISMODIFY"		// 개인대형행사의 보조행사정변경	([d:보조목록ID][b:공개속성][u:기원내용])	

// 매일 checkin관련
#define M_CS_CHECKIN				"CS_CHECKIN"				// Request checkin
#define M_SC_CHECKIN				"SC_CHECKIN"				// Response checkin([b:CheckInDays][[d:ItemID][w:ItemCount][w:InvenPos]]) // CheckInDays: 0xfe, 0, 1, 2, 3, 4, 5, 6 (이번 체크인을 포함하여 지금까지 련속체크인한 날자수)
#define M_SC_CHECKINSTATE			"SC_CHECKINSTATE"			// current checkin state([b: CheckInDays])
#define M_NT_REQCHECKIN				"NT_REQCHECKIN"				// Request to server([d:FamilyID][d:ModelID])
#define M_NT_RESCHECKIN				"NT_RESCHECKIN"				// Response to server
#define M_MS_CURRENT_CHECKIN		"MS_CURRENT_CHECKIN"

// 공공구역에 있는 선밍관련
#define M_CS_REQLUCKINPUBROOM		"CS_REQLUCKINPUBROOM"		// Request luck in public room
// #define M_SC_NEWLUCKINPUBROOM		"SC_NEWLUCKINPUBROOM"		// Notify new luck in public room ([d:LuckID][d:masterFID][u:masterFName][d:MinuteFrom1970][b:Seconds])(// [b:Seconds]는 해당 분에서 경과한 초값이다)
// #define M_SC_DELLUCKINPUBROOM		"SC_DELLUCKINPUBROOM"		// Delete luck in public room([d:LuckID])
#define M_CS_GETBLESSCARDINPUBROOM	"CS_GETBLESSCARDINPUBROOM"	// Request bless card in public room
#define M_CS_HISLUCKINPUBROOM		"CS_HISLUCKINPUBROOM"		// Request luck history in  public room([d:page][b:PageSize])
#define M_SC_HISLUCKINPUBROOM		"SC_HISLUCKINPUBROOM"		// Response luck history in  public room([d:AllCount][d:Page][ [d:LuckID][d:FID][u:FName][d:ModelID][d:S1970] ])
#define M_NT_REQGIVEBLESSCARD		"NT_REQGIVEBLESSCARD"		//
#define M_NT_RESGIVEBLESSCARD		"NT_RESGIVEBLESSCARD"		//
#define M_SC_CURLUCKINPUBROOM		"SC_CURLUCKINPUBROOM"		// update current luck in public room[d:LuckID][d:masterFID][u:masterFName][d:MinuteFrom1970][b:Seconds])(// [b:Seconds]는 해당 분에서 경과한 초값이다)
#define M_NT_CURLUCKINPUBROOM		"NT_CURLUCKINPUBROOM"	// 

// 지역써버절환용
#define M_CS_CHANGE_SHARD_REQ				"CS_CHANGE_SHARD_REQ"		// Request to change shard ([b:NewShardCode]) Client->FS->WS->LS
#define M_SC_CHANGE_SHARD_ANS				"CS_CHANGE_SHARD_ANS"		// Response for M_CS_CHANGE_SHARD_REQ ([b:NewShardCode][d:Return code][CLoginCookie:cookie][s:NewFSAddr]) LS->WS->FS->Client

#define M_NT_MOVE_USER_DATA_REQ				"NT_MOVE_USER_DATA_REQ"		// Request to move UserData from shard to shard ([d:UID][d:FID][d:toShardID]) LS->fromWS
#define M_NT_MOVE_USER_DATA_END				"NT_MOVE_USER_DATA_END"		// Notice that move UserData finished ([d:UID][d:FID]) toWS->LS

#define M_NT_SEND_USER_DATA					"NT_SEND_USER_DATA"			// Send UserData ([d:UID][d:FID][b:flag,1-Start,2-End,0-Continue][...]) fromWS->toWS

#define	M_NT_NEWFAMILY						"NT_NEWFAMILY"				// Notice OROOM->WS->LS that new family created ([d:UID][d:FID][u:FamilyName])
#define	M_NT_CHANGE_USERNAME				"NT_CHANGE_USERNAME"		// Notice that character's name changed to OROOM & LOBBY ([d:FID][u:Family name][d:ModelID])	WS->other WS, LS

#define M_CS_REQ_MST_DATA					"CS_REQ_MST_DATA"			// 로그인후 한번만 받아야 하는 Master자료를 보내줄것을 요청한다.
																		// SendAllMasterDatas - M_SC_MSTROOM, M_SC_MSTITEM, M_SC_MSTHISSPACE, M_SC_MSTROOMLEVELEXP, M_SC_MSTFAMILYLEVELEXP, M_SC_MSTCONFIG, M_SC_MSTFISH
#define M_CS_REQ_PRIMARY_DATA				"CS_REQ_PRIMARY_DATA"		// 로그인후 한번만 받아야 하는 자료를 보내줄것을 요청한다.
																		// M_SC_OWNROOM, M_SC_ALLFESTIVAL, M_SC_ALL_FESTIVALALARM, M_SC_CHECKINSTATE, M_SM_CHECK_USER_ACTIVITY, M_SM_CHECK_BEGINNERMSTITEM, M_SC_BESTSELLITEM, M_SC_ROOMORDERINFO, M_SC_CHANGEMASTER_REQ

// 친구: Main에서 관리된다.
#define M_SC_FRIEND_GROUP					"SC_FRIEND_GROUP"			// Send Friend Group List ([b:Count][ [d:GroupId][u:Group name] ]) LS->SS->Client
#define M_SC_FRIEND_LIST					"SC_FRIEND_LIST"			// Send Friend List ([b:Count][b:finished][ [d:GroupId][d:FamilyId][u:FamilyName][d:Index][d:ModelId] ]) LS->SS->Client
#define M_NT_REQ_FRIEND_INFO				"NT_REQ_FRIEND_INFO"		// Request Friend Info ([d:FID][d:SN]) MS->WS->LS
#define M_NT_FRIEND_GROUP					"NT_FRIEND_GROUP"			// Send Friend Group List ([d:FID][d:SN][b:Count][ [d:GroupId][u:Group name] ]) LS->WS->MS
#define M_NT_FRIEND_LIST					"NT_FRIEND_LIST"			// Send Friend List ([d:FID][d:SN][b:Count][b:finished][ [d:GroupId][d:FamilyId][d:Index] ]) LS->WS->MS
#define M_NT_FRIEND_SN						"NT_FRIEND_SN"				// Send Friend info's Changed_SN. Response of chaned friend info's packets ([d:FID][d:SN][b:flag, 0-Own, 1-Other(Main)]) LS->WS->MS
#define M_NT_FRIEND_DELETED					"NT_FRIEND_DELETED"			// Send deleted friend for remove room's manager ([d:FID][d:friendFID]) LS->WS->MS

// Favorite: Main에서 관리된다.
#define M_SC_FAVORROOM_GROUP				"SC_FAVORROOM_GROUP"		// Send Favorite Room Group List ([b:Count][ [d:GroupId][u:Group name] ]) LS->SS->Client
#define M_SC_FAVORROOM_LIST					"SC_FAVORROOM_LIST"			// Send Favorite Room List ([b:Count][b:finished][ [d:GroupId][d:RoomId][M1970:GetTime] ]) LS->SS->Client


#define M_PROCPACKET						"PROCPACKET"				// Proceduring packet is over
#define M_FORCEDISCONNECT					"FORCEDISCONNECT"			// Disconnect family by force

#define M_AES_SERVICE_NOTPONG				"SERVICE_NOTPONG"
#define M_AES_REGISTER_AES					"REGISTER_AES"
#define M_AES_AES_INFO						"AES_INFO"
#define M_AES_REJECTED						"REJECTED"
#define M_AES_AES_GET_VIEW					"AES_GET_VIEW"
#define M_AES_REG_SVCS						"AES_REG_SVCS"
#define M_AES_DISCONNECT_SERVICE			"AES_DISCONNECT_SERVICE"
#define M_CS_FORCELOGIN                     "FORCELOGIN"                  // Request force login in [d:userid]

#define M_SS_MASTER							"MASTER"
#define M_SS_SLAVE							"SLAVE"
//#define M_SS_CV								"CV"
//#define M_SS_FORCECS						"FORCECS"
//#define M_SS_REG							"REG"
#define M_SS_NOTIFYCOOKIETOSLAVE			"NOTIFYCOOKIETOSLAVE"
#define M_SS_RECEIVED_COOKIE				"RECEIVED_COOKIE"
#define M_SS_RQSTATE						"RQSTATE"
#define M_NT_REQ_FORCE_LOGOFF				"NT_REQ_FORCE_LOGOFF"			// Request Force Logoff by double login, SS->LS->WS
#define M_SS_SLAVEIDENT						"SLAVEIDENT"
//#define M_SS_asymMsg						"asymMsg"
//#define M_SS_symMsg							"symMsg"
//#define M_SS_FORCELOGOFF					"FORCELOGOFF"				// Notice that same account logined so old account must be logoff. slaveSS->masterSS, masterSS->another slaveSS [d:AccountID]

//#define M_LS_STATEDEF						"STATEDEF"
//#define M_LS_RESHARD						"RESHARD"
#define M_LW_SHARDINFO						"SHARDINFO"
//#define M_LS_CANUSEMONEYR					"CANUSEMONEYR"
#define M_WL_WS_IDENT						"WS_IDENT"			// Send Shard Info from WS to LS when shard connected to LS. (class CShard) ([d:ShardID][u:ShardName][b:ZoneID][d:UserLimit][u:Content][b:ActiveFlag][d:Players][b:StateID][b:UserTypeID][w:SID][s:WSAddress])
#define M_LS_EXPENDMONEY					"EXPENDMONEY"
//#define M_LS_CANUSEMONEY					"CANUSEMONEY"
#define M_LS_REFRESHMONEY					"REFRESHMONEY"		// Request family UMoney [d:UserID][d:FamilyID][w:RoomSID][w:FesSID]
#define M_LS_USERMONEY						"USERMONEY"			// Response of M_LS_REFRESHMONEY [w:RoomSID][d:FamilyID][w:FesSID][d:UMoney]
#define M_LS_REPORT_FS_STATE				"REPORT_FS_STATE"
#define M_LS_SET_SHARD_OPEN					"SET_SHARD_OPEN"
#define M_LS_OL_ST							"OL_ST"				// Notice Online Status from WS to LS. but LS don't use this ([d:OnlineStatus])
#define M_LS_RELOGOFF						"RELOGOFF"
#define M_LS_CHECKPWD2						"CHECKPWD2"			// Check password2, [d:family id][s:password2][b:reason][d:room_id][d:target family id]
#define M_LS_CHECKPWD2_R					"CHECKPWD2_R"		// Response M_LS_CHECKPWD2, [d:result][d:family id][b:reason][d:room_id][d:target family id]
#define M_W_REQSHARDCODE					"W_REQSHARDCODE"	// Request Shard Code from Lobby, ORoom, MS to WS
#define M_W_SHARDCODE						"W_SHARDCODE"		// Send Shard Code from WS to Lobby [[b:ShardMainCode]], last value is 0

#define M_WS_FS_ACCEPT						"FS_ACCEPT"
#define M_WS_FEPA							"FEPA"
#define M_WS_NBPLAYERS						"NBPLAYERS"
#define M_WS_NBPLAYERS2						"NBPLAYERS2"
//#define M_WS_RESTORE_SHARD_OPEN				"RESTORE_SHARD_OPEN"
//#define M_WS_WS_REFRESH_LOBBYS				"WS_REFRESH_LOBBYS"
//#define M_WS_CANUSERMONEY					"CANUSERMONEY"

#define M_LW_OTHER_SHARD					"LW_OTHER_SHARD"	// Send other shard's info from LS to WS ([s:ServiceName][s:NSAddress][u:ShardCodeList][b:PrevOn])
#define M_LW_OTHER_SHARD_OFF				"LW_OTHER_SHARD_OFF"	// Send other shard offline LS to WS ([s:ServiceName])

//#define M_WM_SHARDCODELIST					"WM_SHARDCODELIST"	// Send ShardCodeList from WS to MS ([u:ShardCodeList])

#define M_TEST								"TEST"

//#define M_OROOM_MS_CREATE_LOBBY				"MS_CREATE_LOBBY"
//#define M_OROOM_MS_DEL_LOBBY                "MS_DEL_LOBBY"
//#define M_OROOM_SM_DEL_LOBBY                "SM_DEL_LOBBY"
//#define M_OROOM_LOBBY_USERS_CHANGED			"LOBBY_USERS_CHANGED"
//#define M_OROOM_SM_CREATE_LOBBY				"SM_CREATE_LOBBY"

#define M_CLIENT_temp						"temp"
//#define M_CLIENT_GMAUTH						"GMAUTH"
#define M_CLIENT_accountLogin				"accountLogin"
//#define M_CLIENT_connectToShard				"connectToShard"

#define M_TESTINGTOOL_PMINFO				"PMINFO"
#define M_TESTINGTOOL_PMCONFIG				"PMCONFIG"
#define M_TESTINGTOOL_PMAUTH				"PMAUTH"
#define M_TESTINGTOOL_PMLOGOFF				"PMLOGOFF"

// 폭죽관련
#define		M_SC_CRACKER_LIST				"SC_CRACKER_LIST"		// Send Deleted Cracker List ([d:Count][ [d:CrackerID] ])
#define		M_CS_CRACKER_BOMB				"CS_CRACKER_BOMB"		// Cracker Bomb Request ([d:CrackerID])
#define		M_SC_CRACKER_BOMB				"SC_CRACKER_BOMB"		// Cracker Bombed Notice ([d:CrackerID])
#define		M_SC_CRACKER_CREATE				"SC_CRACKER_CREATE"		// Cracker Created Notice ([d:CrackerID])

// 등불아이템관련
#define M_CS_LANTERN					"CS_LANTERN"			// Add new lantern ([d:SyncCode][w:InvenPos][d:X][d:Y][d:Z][d:Dir])
#define M_SC_LANTERN					"SC_LANTERN"			// Send Lantern Data ([d:X][d:Y][d:Z][d:Dir][d:ReqItemID][d:UpTimeSecond][d:FID])
#define M_CS_MULTILANTERN_REQ			"CS_MULTILANTERN_REQ"	// Request multi lantern([d:X][d:Y][d:Z][d:ReqItemID])
#define M_SC_MULTILANTERN_RES			"SC_MULTILANTERN_RES"	// Response for request multi lantern([d:Code][d:MultiLanternID])
#define M_SC_MULTILANTERN_NEW			"SC_MULTILANTERN_NEW"	// new multi lantern([d:MultiLanternID][d:X][d:Y][d:Z][d:ReqItemID][d:MasterID])
#define M_CS_MULTILANTERN_JOIN			"CS_MULTILANTERN_JOIN"	// join multi lantern([d:MultiLanternID])
#define M_SC_MULTILANTERN_JOIN			"SC_MULTILANTERN_JOIN"	// join multi lantern([d:Code][b:JoinPos])
#define M_CS_MULTILANTERN_START			"CS_MULTILANTERN_START" // start multi lantern([d:MultiLanternID][d:SyncCode][w:invenpos])
#define M_SC_MULTILANTERN_START			"SC_MULTILANTERN_START" // start multi lantern([d:MultiLanternID][d:X][d:Y][d:Z][d:ReqItemID][d:MasterID][[d:FID][b:JoinPos]])
#define M_CS_MULTILANTERN_END			"CS_MULTILANTERN_END"	// end multi lantern([d:MultiLanternID])
#define M_SC_MULTILANTERN_END			"SC_MULTILANTERN_END"	// end multi lantern([d:MultiLanternID])
#define M_CS_MULTILANTERN_CANCEL		"CS_MULTILANTERN_CANCEL" // cancel multi lantern([d:MultiLanternID])
#define M_SC_MULTILANTERN_CANCEL		"SC_MULTILANTERN_CANCEL" // cancel multi lantern([d:MultiLanternID])
#define M_CS_MULTILANTERN_OUTJOIN		"CS_MULTILANTERN_OUTJOIN" // out multi lantern([d:MultiLanternID])
#define M_SC_MULTILANTERN_OUTJOIN		"SC_MULTILANTERN_OUTJOIN" // out multi lantern([d:MultiLanternID][d:FID])
#define M_SC_MULTILANTERN_READYLIST		"SC_MULTILANTERN_READYLIST" // [[d:MultiLanternID][d:X][d:Y][d:Z][d:ReqItemID][d:MasterID]]

// 악기아이템들 - 피리, 바이올린, 칠현금, 북, 폭죽
#define M_CS_ITEM_MUSICITEM				"CS_ITEM_MUSICITEM"		// Use music Item ([d:SyncCode][d:InvenPos])

//// 피리아이템불기
//#define M_CS_ITEM_FLUTES				"CS_ITEM_FLUTES"		// Use Flutes Item ([d:SyncCode][d:InvenPos])
//
//// 바이올린아이템관련
//#define M_CS_ITEM_VIOLIN				"CS_ITEM_VIOLIN"		// Use Violin Item ([d:SyncCode][d:InvenPos])
//
//// 칠현금아이템관련
//#define M_CS_ITEM_GUQIN					"CS_ITEM_GUQIN"			// Use GuQin Item ([d:SyncCode][d:InvenPos])
//
//// 북아이템관련
//#define M_CS_ITEM_DRUM					"CS_ITEM_DRUM"			// Use Drum Item ([d:SyncCode][d:InvenPos])
//
//// 폭죽아이템관련
//#define M_CS_ITEM_FIRECRACK				"CS_ITEM_FIRECRACK"		// Use Firecrack Item ([d:SyncCode][d:InvenPos])

// 특수비아이템관련
#define M_CS_ITEM_RAIN					"CS_ITEM_RAIN"			// Use Rain Item ([d:SyncCode][w:InvenPos])
#define M_SC_ITEM_RAIN					"SC_ITEM_RAIN"			// Use Rain Item ([d:FID])

// 포인트카드아이템관련
#define M_CS_ITEM_POINTCARD				"CS_ITEM_POINTCARD"		// Use PointCard Item ([d:SyncCode][w:InvenPos])
#define M_SC_ITEM_POINTCARD				"SC_ITEM_POINTCARD"		// Use PointCard Item ([d:FID][d:PointCardID])

// 기념관 깜짝이벤트기능
#define M_SC_ROOMEVENT					"SC_ROOMEVENT"			// Send Room Daily Event Data ([b:EventType][b:EventPos][d:SecondSince1970])
#define M_SC_ROOMEVENT_END				"SC_ROOMEVENT_END"		// Send room event end
#define M_GMCS_ROOMEVENT_ADD			"GMCS_ROOMEVENT_ADD"	// Add a Room Daily Event ([d:RoomID][b:EventType])

// 실시간문의관련
#define M_CS_ZAIXIAN_REQUEST				"CS_ZAIXIAN_REQUEST"	// Request new service()
#define M_SC_ZAIXIAN_RESPONSE				"SC_ZAIXIAN_RESPONSE"	// Response for new service([d: response code][u:GMName])
#define M_CS_ZAIXIAN_ASK					"CS_ZAIXIAN_ASK"		// Ask chat([u:text])
#define M_SC_ZAIXIAN_ANSWER					"SC_ZAIXIAN_ANSWER"		// Answer chat([u:text])
#define M_CS_ZAIXIAN_END					"CS_ZAIXIAN_END"		// End
#define M_SC_ZAIXIAN_CONTROL				"SC_ZAIXIAN_CONTROL"	// Control code([d:Control code])
#define M_NT_ZAIXIANGM_LOGON				"NT_ZAIXIANGM_LOGON"	// ([d:GMUserID][u:GMName])
#define M_NT_ZAIXIANGM_LOGOFF				"NT_ZAIXIANGM_LOGOFF"	// ([d:GMUserID])

// 婚庆祭祖祈福관련
#define M_CS_HUNQING_LOGIN					"CS_HUNQING_LOGIN"		// Request HunQing Login ([u:UserName][s:Password][d:PktVersion])
#define M_SC_HUNQING_LOGIN_RESULT			"CS_HUNQING_LOGIN_RESULT"	// Response of M_CS_HUNQING_LOGIN, ([d:Result][d:Token][d:GMoney][d:HunqingPrice][s:HunqingPhotoURL])
#define M_CS_HUNQING_LIST					"CS_HUNQING_LIST"		// Request HunQing List ([d:Token])
#define M_SC_HUNQING_LIST					"SC_HUNQING_LIST"		// Send HunQing List ([b:startFlag][[d:ID][d:Status(0:NoUsed,1:Used)][u:Name1][u:Name2][d:StartTime][9*[PhotoID]][20*[ItemIDs]][u:Comment]][b:endFlag])
#define M_CS_HUNQING_ADD					"CS_HUNQING_ADD"		// Add New HunQing ([d:Token][u:Name1][u:Name2][d:StartTime][9*[PhotoID]][20*[ItemIDs]][u:Comment])
#define M_SC_HUNQING_ADD					"SC_HUNQING_ADD"		// Send New HunQing Info ([d:Result][d:NewID][d:GMoney])
#define M_CS_HUNQING_MODIFY					"CS_HUNQING_MODIFY"		// Modify HunQing Info ([d:Token][d:ID][u:Name1][u:Name2][d:StartTime][9*[PhotoID]][20*[ItemIDs]][u:Comment])
#define M_CS_HUNQING_DELETE					"CS_HUNQING_DELETE"		// Delete HunQing ([d:Token][d:ID])
#define M_CS_HUNQING_PLAY					"CS_HUNQING_PLAY"		// HunQing Played ([d:Token][d:ID])
#define M_SC_HUNQING_ERROR					"SC_HUNQING_ERROR"		// Send HunQing Error ([d:ErrorCode])
#define M_CS_HUNQING_LOGOUT					"M_CS_HUNQING_LOGOUT"	// User Logout ([d:Token])

/************************************************************************/
/*      Delete packet                                                   */
/************************************************************************/

//#define M_CS_INSFAVOR_CONTACTROOM			"CS_INSCONTACTROOM"			// Add my contact's rooms to my favorites

//#define M_CS_FAMILYITEM						"CS_FAMILYITEM"				// Request family's items(None)

//#define M_CS_GETALLINROOM					"CS_GETALLINROOM"			// Request family info in room([d:Room id])
//#define M_SC_GETALLINROOM					"SC_GETALLINROOM"			// Response for M_CS_GETALLINROOM([d:Room id][ [d:Family id][u:Family name][d:model id] ])

//#define M_CS_ROOMFORCONTACT					"CS_ROOMFORCONTACT"			// Request contact's room([d:Contact ID])

//#define M_CS_DELFAMILY						"CS_DELFAMILY"				// Delete family(None)
//#define M_SC_DELFAMILY						"SC_DELFAMILY"				// Response for deleting family([d:OK/fail][d:Result code][d:Family id])

//#define	M_SC_CHFAMILYINFO					"SC_CHFAMILYINFO"			// Change family level in room([d:Room id][d:Family id][b:level])

//#define	M_CS_LOBBY_ADDWISH					"CS_LOBBY_ADDWISH"			// Add wish([w:Inven pos][u:Wish][b:Wish Type][b:Open flag(1:Open, 0:Close)])
//#define	M_SC_LOBBY_ADDWISH					"SC_LOBBY_ADDWISH"			// Add wish([d:Room id][d:Result code][d:Wish ID][d:X*100][d:Y*100][d:Z*100][w:Dir(0-355)][b:Y Delta(0-255)])
//#define	M_SC_LOBBY_NEWWISH					"SC_LOBBY_NEWWISH"			// List of wish([d:RoomId][b:NewFlag][ [d:WishId][b:WishType][d:WishItemId][d:X][d:Y][d:Z][w:Dir][b:Y Delta][b:OpenFlag][d:WriterId][u:WriterName] ])
//#define	M_CS_LOBBY_REQ_WISH					"CS_LOBBY_WISH"				// Request wish content([d:Wish ID])
//#define	M_SC_LOBBY_WISH						"SC_LOBBY_WISH"				// Wish content([d:Room id][d:Wish ID][u:Wish content])
//#define	M_CS_LOBBY_DELWISH					"CS_LOBBY_DELWISH"			// Delete wish([d:Wish ID])
//#define	M_SC_LOBBY_DELWISH					"SC_LOBBY_DELWISH"			// Delete wish([d:Room id][[d:Wish ID]])

//#define	M_CS_NEWSACRIFICE					"CS_NEWSACRIFICE"			// New sacrifice([b:Count][ [d:Item id][b:Count][b:Pos X][b:Pos Y] ])
//#define	M_CS_EXPERIENCE						"CS_EXPERIENCE"				// Set experience flag

//#define	M_CS_FNAMECHECK						"CS_FNAMECHECK"				// Check family name([u:Name])
//#define	M_SC_FNAMECHECK						"SC_FNAMECHECK"				// Response for M_CS_FNAMECHECK([b:Result(true/false)][u:Name])

//---#define M_CS_DELDATA						"CS_DELDATA"				// [b:DataType][d:DataId]
//---#define M_SC_DELDATA						"SC_DELDATA"				// [d:Result Code]

//#define	M_SC_NOTEREQCONT					"SC_NOTEREQCONT"			// Notify adding contact([d:Request family ID][u:Request family name]
//#define	M_CS_ANSWERCONT						"CS_ANSWERCONT"				// Reply adding contact([b:Reply code)][d:Request family ID]
//#define	M_SC_ADDCONTRESULT					"SC_ADDCONTRES"				// Request adding contact([d:Result code][d:Contact family ID][u:Family name][b:Group type][u:Group name][M1970:LastLoginTime])

//#define M_SC_RECVHISLIST					"SC_HISLIST"				// Packet for testing
//#define M_SC_RECVHISDATA					"SC_RECVHISRESULT"			// Packet for testing
//#define M_SC_UPLOADRESULT					"SC_UPLOADRESULT"			// Packet for testing
//#define M_SC_HISERROR						"SC_HISERROR"				// Packet for testing

//#define M_CS_HISDOWNREQ						"CS_HISDOWNREQ"				// Packet for testing
//#define M_SC_HISDOWNREQ						"SC_HISDOWNREQ"				// Packet for testing
//#define M_CS_HISDOWNEND						"CS_HISDOWNEND"				// Packet for testing
//#define	M_CS_HISCONFIRM						"CS_HISCONFIRM"				// Packet for testing
//#define	M_SC_HISCONFIRM						"SC_HISCONFIRM"				// Packet for testing
//#define	M_CS_HISCONFIRMMASTER				"CS_HISCONFIRMMASTER"		// Packet for testing
//#define	M_SC_HISCONFIRMMASTER				"SC_HISCONFIRMMASTER"		// Packet for testing
//#define	M_SC_DOWNUPSTATE					"SC_DOWNUPSTATE"			// Packet for testing
//#define	M_CS_EXPENDSPACE					"CS_EXPENDSPACE"			// Packet for testing
//#define	M_CS_RESTORESPACE					"CS_RESTORESPACE"			// Packet for testing
//#define	M_CS_CANEXPEND						"CS_CANEXPEND"				// Packet for testing
//#define	M_SC_CANEXPEND						"SC_CANEXPEND"				// Packet for testing

// For passing URL for album or video interface
//#define M_CS_REQURL                         "CS_REQURL"                 // Request URL message from FES to HS
//#define M_CS_FORURL                         "CS_FORURL"                 // The message with URL sending to FS from HS
//#define M_CS_REQFORURL                      "CS_REQFORURL"              // The message requesting URL from Client to FES
//#define M_SC_URL                            "SC_URL"                    // The message with URL sending from FES to Client

// For updating hanging photo of room in time for each user
//#define M_CS_REQFORPHOTO                    "CS_REQFORPHOTO"            // The message from Client request for Updating photo hanging in room
//#define M_CS_REQPHOTOURL                    "CS_REQPHOTOURL"            // The message from FES to HS for Update photo hanging in room
//#define M_CS_REQPORTRAIT					"CS_REQPORTRAIT"			// Get portrait URL[d:Room ID]
//#define M_SC_REQPORTRAIT					"SC_REQPORTRAIT"			// Response for M_CS_REQPORTRAIT[b:Result][d:Room ID][s:WebRootPath][d:PhotoID][s:Filename][s:FileMD5][d:FileSize]

// 이벤트관련
//#define M_CS_EVENT							"CS_EVENT"					// Request room event
//#define M_SC_EVENT							"SC_EVENT"					// Response for M_CS_EVENT([d:Room id][ [d:Family id][u:Family name][w:Event order] ])
//#define M_CS_ADDEVENT						"CS_ADDEVENT"				// Add room event([w: Event type])
//#define M_SC_ADDEVENT						"SC_ADDEVENT"				// Response for M_CS_ADDEVENT([d:Result code][d:Room id][w:Event type])
//#define M_SC_PLAYEVENT						"SC_PLAYEVENT"				// Play event ([d:Room id][d:Family id][w:Event type])
//#define M_CS_ENDEVENT						"CS_ENDEVENT"				// Event be over

#endif // SIP_MSG_NAME_DWORD

#endif // TIANGUO_PACKET_H
