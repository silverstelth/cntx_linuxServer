/*
-----------------------------------------------------------------------------
Copyright (c) 2007-2011 Cien Network Corporation
Copyright (c) 2007-2011 Samilpho Center
-----------------------------------------------------------------------------
*/

#ifndef __COOKIE_H__
#define __COOKIE_H__

#include "misc/types_sip.h"

#include "misc/stream.h"
#include "misc/common.h"


namespace SIPNET {


/**
 * Manage cookie during the authenticate procedure.
 *
 * _UserAddr is the ipv4 address of the client in uint32
 * _UserKey is an uint32 generated by the login_service at each login password verification
 * _UserId is an uint32 uniq for each account (an account could have more than one avatar)
 *
 * _UserMoney is an uint32
 * _VisitDays is an uint32
 * _UserExp is an uint16
 * _UserVirtue is an uint16
 * _UserFame is an uint16
 *
 * \date 2001
 */
class CCookie
{
public:

	CCookie (uint32 addr);
	CCookie () : _Valid(false), _UserAddr(0), _UserKey(0) {};

	void serial (SIPBASE::IStream &s)
	{
		// verify that we initialized the cookie before writing it
		if (!s.isReading() && !_Valid) sipwarning ("LC: serialize a non valid cookie");

		s.serial (_UserAddr);
		s.serial (_UserKey);

		if (s.isReading()) _Valid = true;
	}

	std::string setToString () const
	{
		if (_Valid)
		{
			char cstr[8*3+2+1];
			SIPBASE::smprintf(cstr, 8*5+2+1, "%08X|%08X", _UserAddr, _UserKey);
			sipinfo ("LC: setToString %s -> %s", toString().c_str (), cstr);
			return cstr;
		}
		else
		{
			return "0|0";
		}
	}

	void setFromString (const std::string &str)
	{
		sscanf(str.c_str(), "%08X|%08X", &_UserAddr, &_UserKey);

		if(str.empty () || (_UserAddr==0 && _UserKey==0))
			_Valid = 0;
		else
			_Valid = 1;

		sipinfo ("LC: setFromString %s -> %s, isValid: %d", str.c_str (), toString().c_str (), _Valid);
	}

	std::string toString () const
	{
		if (_Valid)
			return "'" +
				SIPBASE::toString("%08X", (unsigned int)_UserAddr) +
				"|" + SIPBASE::toString("%08X", (unsigned int)_UserKey) +
				"'";
		else
			return "<InvalidCookie>";
	}

	uint32	getUserAddr () const { sipassert (_Valid); return _UserAddr; }
	uint32	getUserKey () const { sipassert (_Valid); return _UserKey; }

	void	set (uint32 ua, uint32 uk) 
	{ 
		_Valid = true;
		_UserAddr = ua;
		_UserKey = uk;
	}

	bool	isValid() const { return _Valid; }
	void	clear () { _Valid = false; }

	bool	isNullCookie() const { return (_Valid == false) && (_UserAddr == 0) && (_UserKey == 0); }

	uint32	generateKey();

	/// Comparison == operator
	friend bool operator== (const CCookie &c1, const CCookie &c2);

	/// Strict weak ordering operator
	bool operator <(const CCookie &other) const
	{
		if(_UserAddr != other._UserAddr)
			return _UserAddr < other._UserAddr;
		return _UserKey < other._UserKey;
	}

private:
	bool	_Valid;

	uint32	_UserAddr;	// SocketId
	uint32	_UserKey;	// Random
};

/*
 * Comparison == operator
 */
bool operator== (const CCookie &c1, const CCookie &c2);
/*
 * Comparison != operator
 */
bool operator!= (const CCookie &c1, const CCookie &c2);

} // SIPNET



#endif // __COOKIE_H__

/* End of login_cookie.h */
