/*
-----------------------------------------------------------------------------
Copyright (c) 2007-2011 Cien Network Corporation
Copyright (c) 2007-2011 Samilpho Center
-----------------------------------------------------------------------------
*/

#ifndef __LOGIN_COOKIE_H__
#define __LOGIN_COOKIE_H__

#include "misc/types_sip.h"

#include "misc/stream.h"
#include "misc/common.h"

#include "net/cookie.h"
#include "net/inet_address.h"

namespace SIPNET {

typedef struct _ACCOUNT_INFO
{
	_ACCOUNT_INFO() :
		userid(0), shardId(0), state(0) {}
		
	_ACCOUNT_INFO(const _ACCOUNT_INFO & other)
	{
		sPassword	= other.sPassword.c_str();
		ucUser		= other.ucUser.c_str();
		userid		= other.userid;
		shardId		= other.shardId;
		state		= other.state;
		cookie		= other.cookie;
		addr		= other.addr;
		tmState		= other.tmState;
	}

	_ACCOUNT_INFO &operator=(const _ACCOUNT_INFO & other)
	{
		sPassword	= other.sPassword.c_str();
		userid		= other.userid;
		shardId		= other.shardId;
		state		= other.state;
		ucUser		= other.ucUser.c_str();
		cookie		= other.cookie;
		addr		= other.addr;
		tmState		= other.tmState;
		return	*this;
	}

	ucstring		ucUser;
	std::string		sPassword;
	uint32			userid;
	uint32			shardId;
	uint8			state;
	SIPBASE::TTime	tmState;		
	std::string		cookie;
	CInetAddress	addr;
	//ENUM_USERSTATE	state;
} ACCOUNT_INFO, *PACCOUNT_INFO;

/**
* Manage cookie during the authenticate procedure.
*
* _UserAddr is the ipv4 address of the client in uint32
* _UserKey is an uint32 generated by the login_service at each login password verification
* _UserId is an uint32 uniq for each account (an account could have more than one avatar)
* _UserType is an uint8 Type Id
*
* _UserMoney is an uint32
* _VisitDays is an uint32
* _UserExp is an uint16
* _UserVirtue is an uint16
* _UserFame is an uint16
*
* \date 2001
*/
class CLoginCookie : public CCookie
{
public:

#ifdef SIP_OS_UNIX
	CLoginCookie (uint64 addr, uint32 id, uint8 userType, std::string userName, uint32 visitDays, uint16 userExp, uint16 userVirtue, uint16 userFame, uint8 experienceRoom, uint8	bIsGM, uint32 addJifen);
#else
	CLoginCookie (uint32 addr, uint32 id, uint8 userType, std::string userName, uint32 visitDays, uint16 userExp, uint16 userVirtue, uint16 userFame, uint8 experienceRoom, uint8	bIsGM, uint32 addJifen);
#endif
	CLoginCookie () : _Valid(false) { }

	void serial (SIPBASE::IStream &s)
	{
		// verify that we initialized the cookie before writing it
		if (!s.isReading() && !_Valid) sipwarning ("LC: serialize a non valid cookie");

		s.serial (_UserAddr);
		s.serial (_UserKey);
		s.serial (_UserId);
		s.serial (_UserType);
		s.serial (_UserName);
//		s.serial (_UserMoney);
		s.serial (_VisitDays);
		s.serial (_UserExp);
		s.serial (_UserVirtue);
		s.serial (_UserFame);
		s.serial (_ExpRoom);
		s.serial (_bIsGM);
		s.serial (_AddJifen);

		if (s.isReading()) _Valid = true;
	}

	std::string setToString () const
	{
		if (_Valid)
		{
			uint32	nMaxLenUsername = 32;
			char cstr[8*5+4*3+2+10+1+1+1+32];
			SIPBASE::smprintf(cstr, 8*5+4*3+2+10+1+1+1+nMaxLenUsername, "%08X|%08X|%08X|%2X|%s|%08X|%04X|%04X|%04X|%01X|%01X|%08X", _UserAddr, _UserKey, _UserId, _UserType, _UserName.c_str(), _VisitDays, _UserExp, _UserVirtue, _UserFame, _ExpRoom, _bIsGM, _AddJifen);
			sipinfo ("LC: setToString %s -> %s, userName %s", toString().c_str (), cstr, _UserName.c_str());
			return cstr;
		}
		else
		{
			return "0|0|0|0|0|0|0|0|0|0|0|0|0";
		}
	}

	void setFromString (const std::string &str)
	{
		sscanf(str.c_str(), "%08X|%08X|%08X|%02X|%s|%08X|%04X|%04X|%04X|%1X|%1X|%8X", &_UserAddr, &_UserKey, &_UserId, &_UserType, &_UserName, &_VisitDays, &_UserExp, &_UserVirtue, &_UserFame, &_ExpRoom, &_bIsGM, &_AddJifen);

		if(str.empty () || (_UserAddr==0 && _UserKey==0 && _UserId==0 && &_UserType==0 && _UserName=="" && _VisitDays == 0 && _UserExp==0 && _UserVirtue==0 && _UserFame==0 && _ExpRoom==0 && _bIsGM==0 && _AddJifen==0))
			_Valid = 0;
		else
			_Valid = 1;

		sipinfo ("LC: setFromString %s -> %s, isValid: %d", str.c_str (), toString().c_str (), _Valid);
	}

	std::string toString () const
	{
		if (_Valid)
			return "'" +
			SIPBASE::toString("%08X", (unsigned int)_UserAddr) +
			"|" + SIPBASE::toString("%08X", (unsigned int)_UserKey) +
			"|" + SIPBASE::toString("%08X", (unsigned int)_UserId) +
			"|" + SIPBASE::toString("%02X", (unsigned int)_UserType) +
			"|" + SIPBASE::toString("%s",	_UserName.c_str()) +
//			"|" + SIPBASE::toString("%08X", (unsigned int)_UserMoney) +
			"|" + SIPBASE::toString("%08X", (unsigned int)_VisitDays) +
			"|" + SIPBASE::toString("%04X", (unsigned int)_UserExp) +
			"|" + SIPBASE::toString("%04X", (unsigned int)_UserVirtue) +
			"|" + SIPBASE::toString("%04X", (unsigned int)_UserFame) +
			"|" + SIPBASE::toString("%01X", (unsigned int)_ExpRoom) +
			"|" + SIPBASE::toString("%01X", (unsigned int)_bIsGM) +
			"|" + SIPBASE::toString("%08X", (unsigned int)_AddJifen) +
			"'";
		else
			return "<InvalidCookie>";
	}

#ifdef SIP_OS_UNIX
	uint64	getUserAddr () const { sipassert (_Valid); return _UserAddr; }
#else
	uint32	getUserAddr () const { sipassert (_Valid); return _UserAddr; }
#endif
	uint32	getUserKey () const { sipassert (_Valid); return _UserKey; }
	uint32	getUserId () const { sipassert (_Valid); return _UserId; }
	uint8	getUserType () const { sipassert (_Valid); return _UserType; }
	std::string	getUserName () const { sipassert (_Valid); return _UserName; }
//	uint32	getUserMoney () const { sipassert (_Valid); return _UserMoney; }
	uint32	getVisitDays () const { sipassert (_Valid); return _VisitDays; }
	uint16	getUserExp () const { sipassert (_Valid); return _UserExp; }
	uint16	getUserVirtue () const { sipassert (_Valid); return _UserVirtue; }
	uint16	getUserFame () const { sipassert (_Valid); return _UserFame; }
	uint8	getExpRoom () const { sipassert (_Valid); return _ExpRoom; }
	uint8	getIsGM () const { sipassert (_Valid); return _bIsGM; }
	uint32	getAddJifen () const { sipassert (_Valid); return _AddJifen; }

#ifdef SIP_OS_UNIX
	void	set (uint64 ua, uint32 uk, uint32 ui, uint8 ut, std::string us, uint32 vd, uint16 ue, uint16 uv, uint16 uf, uint8 exp, uint8 gm, uint32 addJifen) 
#else
	void	set (uint32 ua, uint32 uk, uint32 ui, uint8 ut, std::string us, uint32 vd, uint16 ue, uint16 uv, uint16 uf, uint8 exp, uint8 gm, uint32 addJifen) 
#endif
	{ 
		_Valid		= true;
		_UserAddr	= ua;
		_UserKey	= uk;
		_UserId		= ui;
		_UserType	= ut;
		_UserName	= us;
//		_UserMoney	= um;
		_VisitDays	= vd;
		_UserExp	= ue;
		_UserVirtue	= uv;
		_UserFame	= uf;
		_ExpRoom	= exp;
		_bIsGM		= gm;
		_AddJifen	= addJifen;
	}

	bool	isValid() const { return _Valid; }
	void	clear () { _Valid = false; }

	uint32	generateKey();

	/// Comparison == operator
	friend bool operator== (const CLoginCookie &c1, const CLoginCookie &c2);

	/// Strict weak ordering operator
	bool operator <(const CLoginCookie &other) const
	{
		if(_UserAddr != other._UserAddr)
			return _UserAddr < other._UserAddr;
		if(_UserKey != other._UserKey)
			return _UserKey < other._UserKey;
		if(_UserId != other._UserId)
			return _UserId < other._UserId;
		if (_UserType != other._UserType)
			return _UserType < other._UserType;
//		if(_UserMoney != other._UserMoney)
//			return _UserMoney < other._UserMoney;
		if(_VisitDays != other._VisitDays)
			return _VisitDays < other._VisitDays;
		if(_UserExp != other._UserExp)
			return _UserExp < other._UserExp;
		if(_UserVirtue != other._UserVirtue)
			return _UserVirtue < other._UserVirtue;
		if(_UserFame != other._UserFame)
            return _UserFame < other._UserFame;
		if(_ExpRoom != other._ExpRoom)
			return _ExpRoom < other._ExpRoom;
		return _bIsGM < other._bIsGM;
	}

private:
	bool		_Valid;

#ifdef SIP_OS_UNIX
	uint64		_UserAddr;		// SocketId
#else
	uint32		_UserAddr;		// SocketId
#endif
	uint32		_UserKey;		// Random
	uint32		_UserId;		// DBId
	uint8		_UserType;		// UserType
	std::string	_UserName;		// UserName
//	uint32		_UserMoney;		// UserMoney
	uint32		_VisitDays;		// VisitDays
	uint16		_UserExp;		// UserExp
	uint16		_UserVirtue;	// UserVirtue
	uint16		_UserFame;		// UserFame
	uint8		_ExpRoom;	// Experiance		
	uint8		_bIsGM;
	uint32		_AddJifen;
};

/*
 * Comparison == operator
 */
bool operator== (const CLoginCookie &c1, const CLoginCookie &c2);
/*
 * Comparison != operator
 */
bool operator!= (const CLoginCookie &c1, const CLoginCookie &c2);

struct	ELogin: public	SIPBASE::Exception
{
	ELogin(const char *reason="", bool systemerr=false)
	{
		_Reason = "LOGIN ERROR: ";
		_Reason += reason;

		sipwarning( "LNETL0: Exception will be launched: %s", _Reason.c_str() );
	}
};

} // SIPNET



#endif // __LOGIN_COOKIE_H__

/* End of login_cookie.h */
